<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.Primitives</name>
  </assembly>
  <members>
    <member name="T:HAL.Alerts.Alert">
      <summary>Generic throwable alert, tracing runtime events. Extend this class to publish custom <see cref="T:HAL.Alerts.Alert" />s in HAL client applications.</summary>
    </member>
    <member name="M:HAL.Alerts.Alert.#ctor">
      <summary>Creates an empty alert.</summary>
    </member>
    <member name="M:HAL.Alerts.Alert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String,System.Exception,System.Nullable{System.DateTime})">
      <summary>Creates a detailed, filterable and sortable alert.</summary>
      <param name="topic">Topic.</param>
      <param name="severity">Severity.</param>
      <param name="title">Title.</param>
      <param name="message">Message.</param>
      <param name="innerException">Inner exception to be included.</param>
      <param name="timeStamp">UTC time stamp override.</param>
    </member>
    <member name="P:HAL.Alerts.Alert.Title">
      <summary>Alert title.</summary>
    </member>
    <member name="P:HAL.Alerts.Alert.TimeStamp">
      <summary>UTC time stamp of this <see cref="T:HAL.Alerts.Alert" />.</summary>
    </member>
    <member name="P:HAL.Alerts.Alert.Topic">
      <summary>Topic.</summary>
    </member>
    <member name="P:HAL.Alerts.Alert.Severity">
      <summary>Severity level.</summary>
    </member>
    <member name="M:HAL.Alerts.Alert.ToString">
      <summary>Generate a <see cref="T:System.String" /> representation of this <see cref="T:HAL.Alerts.Alert" /> in the <c>"HH:mm:ss.ff [LEVEL] Title. Message."</c> format, i.e: <c>[ERROR] Connection failed. The controller is unavailable.</c>.</summary>
    </member>
    <member name="M:HAL.Alerts.Alert.Log(HAL.Alerts.ILogger)">
      <summary>Logs an alert.</summary>
      <param name="logger">Logger to be used to record this alert.</param>
      <returns>Original alert.</returns>
    </member>
    <member name="M:HAL.Alerts.Alert.GetHighestSeverity(System.Collections.Generic.List{HAL.Alerts.Alert},HAL.Alerts.AlertLevel)">
      <summary>Retrieves the highest severity from a set of alerts.</summary>
      <param name="alerts">Alerts to analyze.</param>
      <param name="threshold">Severity below which the search should continue. If a higher severity is encountered, it will return immediately.</param>
    </member>
    <member name="T:HAL.Alerts.AlertLevel">
      <summary>Enumerates supported <see cref="T:HAL.Alerts.Alert" /> severity levels.</summary>
    </member>
    <member name="F:HAL.Alerts.AlertLevel.Unknown">
      <summary>Unknown (alert level: N/A).</summary>
    </member>
    <member name="F:HAL.Alerts.AlertLevel.None">
      <summary>Unknown (alert level: 0/4).</summary>
    </member>
    <member name="F:HAL.Alerts.AlertLevel.Info">
      <summary>Information (alert level: 1/4).</summary>
    </member>
    <member name="F:HAL.Alerts.AlertLevel.Remark">
      <summary>Remark (alert level: 2/4).</summary>
    </member>
    <member name="F:HAL.Alerts.AlertLevel.Warning">
      <summary>Warning (alert level: 3/4).</summary>
    </member>
    <member name="F:HAL.Alerts.AlertLevel.Error">
      <summary>Error (alert level: 4/4).</summary>
    </member>
    <member name="T:HAL.Alerts.HAL_AlertLevelDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Alerts.HAL_AlertLevelDescriptions.Description(HAL.Alerts.AlertLevel)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Alerts.AlertRegistry">
      <summary>Registers <see cref="T:HAL.Alerts.Alert" />s triggered by an <see cref="T:HAL.Alerts.IAlertEmitter" />.</summary>
    </member>
    <member name="M:HAL.Alerts.AlertRegistry.#ctor">
      <summary>Creates an empty <see cref="T:HAL.Alerts.AlertRegistry" />.</summary>
    </member>
    <member name="M:HAL.Alerts.AlertRegistry.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{HAL.Alerts.Alert}})">
      <summary>Creates an <see cref="T:HAL.Alerts.AlertRegistry" /> from an existing one.</summary>
      <param name="alerts">Existing <see cref="T:HAL.Alerts.AlertRegistry" />.</param>
    </member>
    <member name="P:HAL.Alerts.AlertRegistry.MaximumSeverity">
      <summary>Highest severity level currently contained by this <see cref="T:HAL.Alerts.AlertRegistry" />.</summary>
    </member>
    <member name="M:HAL.Alerts.AlertRegistry.Add(HAL.Alerts.Alert,System.String)">
      <summary>Registers an <see cref="T:HAL.Alerts.Alert" />.</summary>
      <param name="alert">
        <see cref="T:HAL.Alerts.Alert" /> to be added.</param>
      <param name="originMethodName">Origin method name. Leave blank to automatically take the calling method into account.</param>
    </member>
    <member name="M:HAL.Alerts.AlertRegistry.AddRange(System.Collections.Generic.List{HAL.Alerts.Alert},System.String)">
      <summary>Registers multiple <see cref="T:HAL.Alerts.Alert" />s.</summary>
      <param name="alerts">
        <see cref="T:HAL.Alerts.Alert" />s to be added.</param>
      <param name="originMethodName">Origin method name. Leave blank to automatically take the calling method into account.</param>
    </member>
    <member name="M:HAL.Alerts.AlertRegistry.ClearEntry(System.String)">
      <summary>Removes <see cref="T:HAL.Alerts.Alert" />s associated with the given method name.</summary>
      <param name="originMethodName">Origin method name. Leave blank to automatically take the calling method into account.</param>
    </member>
    <member name="M:HAL.Alerts.AlertRegistry.Append(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{HAL.Alerts.Alert}},System.String)">
      <summary>Appends an existing <see cref="T:HAL.Alerts.AlertRegistry" /> to this one.</summary>
      <param name="alerts">
        <see cref="T:HAL.Alerts.Alert" />s to append.</param>
      <param name="prefix">Optional prefix to append to the <see cref="T:HAL.Alerts.Alert" /> keys.</param>
    </member>
    <member name="T:HAL.Alerts.ArgumentConflictAlert">
            Alert triggered by conflicting arguments in a method.
        </member>
    <member name="M:HAL.Alerts.ArgumentConflictAlert.#ctor">
      <summary>Creates an alert due to conflicting arguments in a method.</summary>
    </member>
    <member name="M:HAL.Alerts.ArgumentConflictAlert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to conflicting arguments in a method, with a description of this alert.</summary>
      <param name="topic">Alert topic.</param>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.ArgumentConflictAlert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to conflicting arguments in a method, with a description of this alert.</summary>
      <param name="topic">Alert topic.</param>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.ArgumentInvalidAlert">
            Alert triggered by an invalid argument in a method.
        </member>
    <member name="M:HAL.Alerts.ArgumentInvalidAlert.#ctor">
      <summary>Creates an alert due to an invalid argument in a method.</summary>
    </member>
    <member name="M:HAL.Alerts.ArgumentInvalidAlert.#ctor(System.String,System.String)">
      <summary>Creates an alert due to an invalid argument in a method, with a quick description of this alert.</summary>
      <param name="title">Alert title.</param>
      <param name="argumentName">Name of the invalid argument.</param>
    </member>
    <member name="M:HAL.Alerts.ArgumentInvalidAlert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to an invalid argument in a method, with a description of this alert.</summary>
      <param name="topic">Alert topic.</param>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.ArgumentInvalidAlert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to an invalid argument in a method, with a description of this alert and its inner cause.</summary>
      <param name="topic">Alert topic.</param>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.ArgumentMissingAlert">
            Alert triggered by a missing argument in a method. 
        </member>
    <member name="M:HAL.Alerts.ArgumentMissingAlert.#ctor">
      <summary>Creates an alert due to a missing argument in a method.</summary>
    </member>
    <member name="M:HAL.Alerts.ArgumentMissingAlert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to a missing argument in a method, with a description of this alert.</summary>
      <param name="topic">Alert topic.</param>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.ArgumentMissingAlert.#ctor(System.String,HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>
             Creates an alert due to a missing argument in a method, 
             with a description of this alert and its inner cause. 
            </summary>
      <param name="topic">Alert topic.</param>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.CorruptedApiAlert">
      <summary>Alert triggered by a corrupted API.</summary>
    </member>
    <member name="M:HAL.Alerts.CorruptedApiAlert.#ctor">
      <summary>Creates an alert due to a corrupted API.</summary>
    </member>
    <member name="M:HAL.Alerts.CorruptedApiAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to a corrupted API, with a description of this alert.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.CorruptedApiAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to a corrupted API, with a description of this alert and its inner cause.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.IAlertEmitter">
      <summary>Qualifies an object emitting <see cref="T:HAL.Alerts.Alert" />s.</summary>
    </member>
    <member name="P:HAL.Alerts.IAlertEmitter.Alerts">
      <summary>
        <see cref="T:HAL.Alerts.Alert" />s related to this object.</summary>
    </member>
    <member name="T:HAL.Alerts.ILogger">
      <summary>Qualifies an <see cref="T:HAL.Alerts.Alert" /> logger.</summary>
    </member>
    <member name="M:HAL.Alerts.ILogger.Log(HAL.Alerts.Alert)">
      <summary>Logs an <see cref="T:HAL.Alerts.Alert" />.</summary>
      <param name="alert">
        <see cref="T:HAL.Alerts.Alert" /> to log.</param>
      <returns>Whether the logging was successful.</returns>
    </member>
    <member name="P:HAL.Alerts.ILogger.IsActive">
      <summary>Whether this logger is active.</summary>
    </member>
    <member name="T:HAL.Alerts.LicenseInvalidAlert">
      <summary>Licensing issue alert.</summary>
    </member>
    <member name="M:HAL.Alerts.LicenseInvalidAlert.#ctor(System.String,System.String)">
      <summary>Creates an alert due to an invalid license.</summary>
      <param name="title">Title.</param>
      <param name="message">Message.</param>
    </member>
    <member name="T:HAL.Alerts.UpdateAvailableAlert">
      <summary>Obsolete component alert.</summary>
    </member>
    <member name="M:HAL.Alerts.UpdateAvailableAlert.#ctor(HAL.Catalog.Extensions.ExtensionItem)">
      <summary>Creates an alert due to an update being available for a framework component.</summary>
      <param name="component">Obsolete component.</param>
    </member>
    <member name="P:HAL.Alerts.UpdateAvailableAlert.Component">
      <summary>Obsolete component.</summary>
    </member>
    <member name="T:HAL.Bindings.Bindable">
      <summary>Base implementation of <see cref="T:HAL.Bindings.IBindable" /> object.</summary>
    </member>
    <member name="P:HAL.Bindings.Bindable.Bindings">
      <summary>Bindings having this object as source or target.</summary>
    </member>
    <member name="E:HAL.Bindings.Bindable.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Bindings.Bindable.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="F:HAL.Bindings.Bindable.IsBeingDisposed">
      <summary>Whether this object disposal started.</summary>
    </member>
    <member name="M:HAL.Bindings.Bindable.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Bindings.Bindable.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="T:HAL.Bindings.Binding">
      <summary>Maintains a binding between select properties of two objects with a given <see cref="T:HAL.Bindings.Binding.Direction" />.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding.#ctor">
      <summary>Creates a new one way binding.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding.#ctor(HAL.Bindings.IBindable,HAL.Bindings.PropertyKey,HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer,HAL.Bindings.Binding.Direction)">
      <summary>Creates a binding between two object properties.</summary>
      <param name="sourceParent">The object whose property the target should be bound to.</param>
      <param name="sourceProperty">The property of the parent object to which the target should be bound.</param>
      <param name="targetParent">The object whose property is the binding target.</param>
      <param name="targetProperty">The property which should be bound to the source.</param>
      <param name="mode">Binding <see cref="T:HAL.Bindings.Binding.Direction" />.</param>
    </member>
    <member name="P:HAL.Bindings.Binding.SourceProperty">
      <summary>Stores the property to which this binding applies.</summary>
    </member>
    <member name="P:HAL.Bindings.Binding.SourceParent">
      <summary>Stores the source object to which this binding applies.</summary>
    </member>
    <member name="P:HAL.Bindings.Binding.TargetParent">
      <summary>Stores the objects and properties which should be updated when a change occurs.</summary>
    </member>
    <member name="P:HAL.Bindings.Binding.TargetProperty">
      <summary>Stores the property to which this binding applies.</summary>
    </member>
    <member name="P:HAL.Bindings.Binding.Mode">
      <summary>Binding <see cref="T:HAL.Bindings.Binding.Direction" />.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding.SetSource(HAL.Bindings.IBindable,HAL.Bindings.PropertyKey)">
      <summary>Adds a binding to a given object and property.</summary>
      <param name="sourceParent">The object which contains the property to be bound.</param>
      <param name="sourceProperty">The property of the object to be bound.</param>
      <returns>Whether the object and property have been added.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.SetTarget(HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer)">
      <summary>Adds a binding to a given object and property.</summary>
      <param name="targetParent">The object which contains the property to be bound.</param>
      <param name="targetProperty">The property of the object to be bound. N.B. For TwoWay binding this must be a Stack with a single key.</param>
      <returns>Whether the object and property have been added.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.RemoveTarget">
      <summary>Removes a binding from the target object and property.</summary>
      <returns>Whether the target object and property have been removed.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.ClearBinding">
      <summary>Removes all bound targets from this binding.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding.UnsubscribeFromSource">
      <summary>Unsubscribes from the source such that changes to the source property no longer affect the target.</summary>
      <returns>Whether the subscription was successfully removed.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.SubscribeToSource">
      <summary>Subscribes to the source such that changes to the source property are propagated to the target.</summary>
      <returns>Whether the subscription was successfully established.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.UnsubscribeFromTarget">
      <summary>[<see cref="F:HAL.Bindings.Binding.Direction.TwoWay" /> only] Unsubscribes from the target such that changes to the target property no longer affect the source.</summary>
      <returns>Whether the subscription was successfully removed.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.SubscribeToTarget">
      <summary>[<see cref="F:HAL.Bindings.Binding.Direction.TwoWay" /> only] Subscribes to the target such that changes to the target property are propagated to the source.</summary>
      <returns>Whether the subscription was successfully established.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding.OnBoundPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Triggered when the source or target properties are changed.</summary>
      <param name="sender">The object whose property has changed.</param>
      <param name="propertyChangedEventArgs">Information about the changed property.</param>
    </member>
    <member name="M:HAL.Bindings.Binding.CreateBinding(HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer,HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer,HAL.Bindings.Binding.Direction)">
      <summary>Creates a binding between two object properties.</summary>
      <param name="sourceParent">The object whose property the target should be bound to.</param>
      <param name="sourceProperty">The property of the parent object to which the target should be bound.</param>
      <param name="targetParent">The object whose property is the binding target.</param>
      <param name="targetProperty">The property which should be bound to the source.</param>
      <param name="mode">Binding <see cref="T:HAL.Bindings.Binding.Direction" />.</param>
    </member>
    <member name="F:HAL.Bindings.Binding.IsBeingDisposed">
      <summary>Whether this object disposal started.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="T:HAL.Bindings.Binding`1">
      <summary>Maintains a binding between select properties of two objects with a given <see cref="T:HAL.Bindings.Binding.Direction" />.</summary>
      <typeparam name="T">Bound property type.</typeparam>
    </member>
    <member name="M:HAL.Bindings.Binding`1.#ctor">
      <summary>Creates a new one way binding.</summary>
    </member>
    <member name="M:HAL.Bindings.Binding`1.#ctor(HAL.Bindings.IBindable,HAL.Bindings.PropertyKey,HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer,HAL.Bindings.Binding.Direction)">
      <summary>Creates a binding between two object properties.</summary>
      <param name="sourceParent">The object whose property the target should be bound to.</param>
      <param name="sourceProperty">The property of the parent object to which the target should be bound.</param>
      <param name="targetParent">The object whose property is the binding target.</param>
      <param name="targetProperty">The property which should be bound to the source.</param>
      <param name="mode">Binding <see cref="T:HAL.Bindings.Binding.Direction" />.</param>
    </member>
    <member name="M:HAL.Bindings.Binding`1.SetSource(HAL.Bindings.IBindable,HAL.Bindings.PropertyKey)">
      <summary>Adds a binding to a given object and property.</summary>
      <param name="sourceParent">The object which contains the property to be bound.</param>
      <param name="sourceProperty">The property of the object to be bound.</param>
      <returns>Whether the object and property were added.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding`1.SetTarget(HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer)">
      <summary>Adds a binding to a given object and property.</summary>
      <param name="targetParent">The object which contains the property to be bound.</param>
      <param name="targetProperty">The property of the object to be bound. N.B. For TwoWay binding this must be a Stack with a single key.</param>
      <returns>Whether the object and property were added.</returns>
    </member>
    <member name="M:HAL.Bindings.Binding`1.OnBoundPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Triggered when the source or target properties are changed.</summary>
      <param name="sender">The object whose property has changed.</param>
      <param name="propertyChangedEventArgs">Information about the changed property.</param>
    </member>
    <member name="T:HAL.Bindings.IBindable">
      <summary>Qualifies an object that can be bound to.</summary>
    </member>
    <member name="P:HAL.Bindings.IBindable.Bindings">
      <summary>Bindings having this object as source or target.</summary>
    </member>
    <member name="T:HAL.Bindings.IBinding">
      <summary>Qualifies a binding between select properties of two objects with a given direction.</summary>
    </member>
    <member name="P:HAL.Bindings.IBinding.Mode">
      <summary>Direction in which this <see cref="T:HAL.Bindings.IBinding" /> is to be created. See <see cref="T:HAL.Bindings.Binding.Direction" /> for options.</summary>
    </member>
    <member name="P:HAL.Bindings.IBinding.SourceParent">
      <summary>Stores the source object to which this <see cref="T:HAL.Bindings.IBinding" /> applies.</summary>
    </member>
    <member name="P:HAL.Bindings.IBinding.SourceProperty">
      <summary>Stores the property to which this <see cref="T:HAL.Bindings.IBinding" /> applies.</summary>
    </member>
    <member name="P:HAL.Bindings.IBinding.TargetParent">
      <summary>Stores the objects and properties which should be updated when a change occurs.</summary>
    </member>
    <member name="P:HAL.Bindings.IBinding.TargetProperty">
      <summary>Stores the property to which this <see cref="T:HAL.Bindings.IBinding" /> applies.</summary>
    </member>
    <member name="M:HAL.Bindings.IBinding.SetSource(HAL.Bindings.IBindable,HAL.Bindings.PropertyKey)">
      <summary>Adds a <see cref="T:HAL.Bindings.IBinding" /> to a given object and property.</summary>
      <param name="sourceParent">The object which contains the property to be bound.</param>
      <param name="sourceProperty">The property of the object to be bound.</param>
      <returns>
        <c>true</c> if the object and property have been added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.IBinding.SetTarget(HAL.Bindings.IBindable,HAL.Bindings.IPropertyIdentifer)">
      <summary>Adds a <see cref="T:HAL.Bindings.IBinding" /> to a given object and property.</summary>
      <param name="targetParent">The object which contains the property to be bound.</param>
      <param name="targetProperty">The property of the object to be bound. N.B. For <c>TwoWay</c><see cref="T:HAL.Bindings.IBinding" /> this must be a <see cref="T:HAL.Bindings.IPropertyIdentifer" /> with a single key.</param>
      <returns>
        <c>true</c> if the object and property have been added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.IBinding.RemoveTarget">
      <summary>Removes a <see cref="T:HAL.Bindings.IBinding" /> from the target object and property.</summary>
      <returns>
        <c>true</c> if the target object and property have been removed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.IBinding.ClearBinding">
      <summary>Removes all bound targets from this <see cref="T:HAL.Bindings.IBinding" />.</summary>
    </member>
    <member name="T:HAL.Bindings.IPropertyIdentifer">
      <summary>Qualifies a property identifier.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.Alias">
      <summary>Name of the key.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.Description">
      <summary>Description of property.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.CanWrite">
      <summary>Gets a value indicating whether the property can be written.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.Custom">
      <summary>Gets a value indicating whether the property is a custom property and therefore not tied to the property of a class.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.PropertyType">
      <summary>Returns the <c>Type</c> of the property being pointed to by this identifier.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.Manager">
      <summary>If this is a custom property, the manager in which it is contained.</summary>
    </member>
    <member name="P:HAL.Bindings.IPropertyIdentifer.IsBindable">
      <summary>Defines whether this identifier can be used to bind its target.</summary>
    </member>
    <member name="M:HAL.Bindings.IPropertyIdentifer.GetValue(System.Object)">
      <summary>Gets the current value of the property of a given object pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="parent">The object from which the value pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> should be retrieved.</param>
    </member>
    <member name="M:HAL.Bindings.IPropertyIdentifer.TrySetValue(System.Object,System.Object)">
      <summary>Attempts to set the given value to the property pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> in the given parent object.</summary>
      <param name="parent">Object whose property or sub-property pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> should be set.</param>
      <param name="value">Value to be assigned to the property to which this points.</param>
    </member>
    <member name="T:HAL.Bindings.IValueManager">
      <summary>Qualifies an object maintaining a collection of objects.</summary>
    </member>
    <member name="M:HAL.Bindings.IValueManager.AddEntry(System.String,System.Object,System.Boolean)">
      <summary>Adds an entry to this <see cref="T:HAL.Bindings.IValueManager" />.</summary>
      <param name="alias">Entry alias.</param>
      <param name="value">Entry value.</param>
      <param name="override">Whether this will override existing properties stored with a similar alias.</param>
      <returns>
        <c>true</c> if the entry was successfully added.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.AddEntry(HAL.Bindings.IPropertyIdentifer,System.Object,System.Boolean)">
      <summary>Adds an entry to this <see cref="T:HAL.Bindings.IValueManager" />.</summary>
      <param name="key">The key to store the property under.</param>
      <param name="value">The value of the property.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>
        <c>true</c> if the entry was successfully added.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.AddEntry(System.Collections.Generic.KeyValuePair{HAL.Bindings.IPropertyIdentifer,System.Object},System.Boolean)">
      <summary>Adds an entry to this <see cref="T:HAL.Bindings.IValueManager" />.</summary>
      <param name="pair">A key and value pair containing the key to store the property under and the value to assign it.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>
        <c>true</c> if the entry was successfully added.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.SetAlias(System.String)">
      <summary>Sets the alias of this <see cref="T:HAL.Bindings.IValueManager" />.</summary>
      <param name="alias">The new alias for this property manager.</param>
    </member>
    <member name="M:HAL.Bindings.IValueManager.Merge(HAL.Bindings.IValueManager,System.Boolean)">
      <summary>Merges the properties contained herein with those of the other object.</summary>
      <param name="manager">The manager whose properties should be merged into this manager.</param>
      <param name="override">If <c>true</c> values present in this manager will be overwritten by duplicate keys in the incoming manager.</param>
    </member>
    <member name="M:HAL.Bindings.IValueManager.GetValue(HAL.Bindings.IPropertyIdentifer)">
      <summary>Get the value of a key, from a specified key.</summary>
      <param name="key">Key alias to search in the state dictionary.</param>
      <returns>Returns the value corresponding to the specified key, or null if the key was not found.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.GetValue(System.String)">
      <summary>Returns a state value from this object or its children using a '.' separated Tag.</summary>
      <remarks>i.e: Joint1.Angle will return Angle from child object Joint1.</remarks>
      <param name="tag">Tag to be measured.</param>
      <returns>Returns a value if the tag was found. Null otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.GetValue``1(HAL.Bindings.IPropertyIdentifer)">
      <summary>Get the value of a key, from a specified key.</summary>
      <param name="key">Key alias to search in the state dictionary.</param>
      <returns>Returns the value corresponding to the specified key, or null if the key was not found.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.GetValue``1(System.String)">
      <summary>Get the value of a key, from a specified key alias.</summary>
      <param name="alias">Key alias to search in the state dictionary.</param>
      <returns>Returns the value corresponding to the specified key, or null if the key was not found.</returns>
    </member>
    <member name="M:HAL.Bindings.IValueManager.SetValue(System.String,System.Object)">
      <summary>Updates the value of an attribute based on its name.</summary>
      <param name="alias">The name of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Bindings.IValueManager.SetValue(System.Collections.Generic.KeyValuePair{HAL.Bindings.IPropertyIdentifer,System.Object})">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="pair">A KeyValuePair containing the name of the attribute and a new value for it.</param>
    </member>
    <member name="M:HAL.Bindings.IValueManager.SetValue(HAL.Bindings.IPropertyIdentifer,System.Object)">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="key">The key of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Bindings.IValueManager.GetKey(System.String)">
      <summary>Gets a key whose alias or full name matches the given string.</summary>
      <param name="key">The name or alias to search for.</param>
      <returns>A <see cref="T:HAL.Bindings.IPropertyIdentifer" /> that corresponds to the given key or null if nothing is found.</returns>
    </member>
    <member name="P:HAL.Bindings.IValueManager.Item(System.String)">
      <summary>
             Extends the reach of the indexer operator to access StateDictionary values directly from the state using the key alias as the access key.
             Used: 
             object someValue = someState[someKey];
            </summary>
      <param name="key">The key to find.</param>
    </member>
    <member name="T:HAL.Bindings.MultiPropertyIdentifer">
      <summary>Stores multiple property identifiers.</summary>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.#ctor(System.String,HAL.Bindings.IValueManager,HAL.Bindings.IPropertyIdentifer[])">
      <summary>Creates a key with an alias.</summary>
      <param name="alias">Name for the key.</param>
      <param name="manager">Manager in which this custom property is stored.</param>
      <param name="properties">Initial properties.</param>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.Alias">
      <summary>Name of the key.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.Description">
      <summary>Description of property.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.CanWrite">
      <summary>Gets a value indicating whether the property can be written.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.Custom">
      <summary>Gets a value indicating whether the property is a custom property and therefore not tied to the property of a class.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.PropertyType">
      <summary>Returns the <c>Type</c> of the property being pointed to by this key.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.Manager">
      <summary>If this is a custom property, the Property manager in which it is contained.</summary>
    </member>
    <member name="P:HAL.Bindings.MultiPropertyIdentifer.IsBindable">
      <summary>Defines whether this identifier can be used to bind its target.</summary>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.Equals(HAL.Bindings.IPropertyIdentifer)">
      <summary>Compares this <see cref="T:HAL.Bindings.PropertyStack" /> to a given <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="other">The key to compare to this stack.</param>
      <returns>
        <c>true</c> if this stack has only a single item and it is equal to the given key, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.Equals(System.String)">
      <summary>Compares a <see cref="T:HAL.Bindings.IPropertyIdentifer" /> to a string.</summary>
      <param name="other">The string to compare to.</param>
      <returns>Whether the alias of this key is equal to the given string.</returns>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.Equals(System.Guid)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.GetValue(System.Object)">
      <summary>Gets the current value of the property of a given object pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="parent">The object from which the value pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> should be retrieved.</param>
    </member>
    <member name="M:HAL.Bindings.MultiPropertyIdentifer.TrySetValue(System.Object,System.Object)">
      <summary>Attempts to set the given value to the property pointed to by this <see cref="T:HAL.Bindings.PropertyKey" /> in the given parent object.</summary>
      <param name="parent">The object who's property or sub-property pointed to by this <see cref="T:HAL.Bindings.PropertyKey" /> should be set.</param>
      <param name="value">The value to be assigned to the property to which this points.</param>
    </member>
    <member name="T:HAL.Bindings.PrimitiveBindingContainer`1">
      <summary>Encapsulates a value to allow it to be referenced and therefore bind UI changes.</summary>
      <typeparam name="T">The type of value to bind.</typeparam>
    </member>
    <member name="P:HAL.Bindings.PrimitiveBindingContainer`1.Value">
      <summary>The value to be referenced.</summary>
    </member>
    <member name="T:HAL.Bindings.PropertyKey">
      <summary>Key used to define the path to a property and give it an alias.</summary>
    </member>
    <member name="F:HAL.Bindings.PropertyKey.RootKey">
      <summary>Generic key that represents a root property key. This should be used in place of null in most cases.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.#ctor(System.String,HAL.Bindings.IValueManager)">
      <summary>Creates a key with an alias.</summary>
      <param name="alias">Name for the key.</param>
      <param name="manager">Manager in which this custom property is stored.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.#ctor(HAL.Identifier,HAL.Bindings.IValueManager)">
      <summary>Creates a key with an alias.</summary>
      <param name="alias">Name for the key.</param>
      <param name="manager">Manager in which this custom property is stored.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.#ctor(System.Reflection.PropertyInfo)">
      <summary>Creates a key.</summary>
      <param name="info">Property of the parent object to which this key points.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.#ctor(HAL.Bindings.PropertyKey)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The key to clone.</param>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.Alias">
      <summary>Name of the key.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.Info">
      <summary>The property of the parent object to which this key points.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.Description">
      <summary>Description of property.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.CanWrite">
      <summary>Gets a value indicating whether the property can be written.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.Custom">
      <summary>Gets a value indicating whether the property is a custom property and therefore not tied to the property of a class.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.PropertyType">
      <summary>Returns the <c>Type</c> of the property being pointed to by this key.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.Manager">
      <summary>If this is a custom property, the Property manager in which it is contained.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyKey.IsBindable">
      <summary>Defines whether this identifier can be used to bind its target.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(HAL.Bindings.PropertyKey)">
      <summary>Compares one <see cref="T:HAL.Bindings.PropertyKey" /> to another.</summary>
      <param name="other">The key to compare to.</param>
      <returns>
             If this is a custom property,
             whether the alias of this key is equal to the alias of the other, 
             otherwise whether the Info of this key is equal to the Info of the other. 
            </returns>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(HAL.Bindings.IPropertyIdentifer)">
      <summary>Compares this <see cref="T:HAL.Bindings.PropertyStack" /> to a given <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="other">The key to compare to this stack.</param>
      <returns>
        <c>true</c> if this stack has only a single item and it is equal to the given key, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(System.String)">
      <summary>Compares a <see cref="T:HAL.Bindings.PropertyKey" /> to a string.</summary>
      <param name="other">The string to compare to.</param>
      <returns>Whether the alias of this key is equal to the given string.</returns>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(System.Guid)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.PropertyKey.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.PropertyKey.StartsWith(System.String)">
      <summary>Checks whether the alias of this starts with the given string.</summary>
      <param name="other">The string to compare to.</param>
      <returns>Whether the alias of this starts with the given string.</returns>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.GetValue(System.Object)">
      <summary>Gets the current value of the property of a given object pointed to by this <see cref="T:HAL.Bindings.PropertyKey" />.</summary>
      <param name="parent">The object from which the value pointed to by this <see cref="T:HAL.Bindings.PropertyKey" /> should be retrieved.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.TryGetValue(System.Object@,System.Object)">
      <summary>Attempts to get the current value of the property of a given object pointed to by this <see cref="T:HAL.Bindings.PropertyKey" />.</summary>
      <param name="parent">The object from which the value pointed to by this <see cref="T:HAL.Bindings.PropertyKey" /> should be retrieved.</param>
      <param name="value">Retrieved value.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.TrySetValue(System.Object,System.Object)">
      <summary>Attempts to set the given value to the property pointed to by this <see cref="T:HAL.Bindings.PropertyKey" /> in the given parent object.</summary>
      <param name="parent">The object who's property or sub-property pointed to by this <see cref="T:HAL.Bindings.PropertyKey" /> should be set.</param>
      <param name="value">The value to be assigned to the property to which this points.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.PropertyKey.op_Implicit(HAL.Bindings.PropertyKey)~System.Reflection.PropertyInfo">
      <summary>Converts a <see cref="T:HAL.Bindings.PropertyKey" /> to <c>PropertyInfo</c> by extracting the Info property within. If the key is custom and therefore does not have a valid Info property null is returned.</summary>
      <param name="key">The <see cref="T:HAL.Bindings.PropertyKey" /> to be converted to a <c>PropertyInfo</c>.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyKey.op_Implicit(System.Reflection.PropertyInfo)~HAL.Bindings.PropertyKey">
      <summary>Converts a <c>PropertyInfo</c> to <see cref="T:HAL.Bindings.PropertyKey" /> by wrapping it as the Info property.</summary>
      <param name="info">The <c>PropertyInfo</c> to be wrapped in a <see cref="T:HAL.Bindings.PropertyKey" />.</param>
    </member>
    <member name="T:HAL.Bindings.PropertyStack">
      <summary>Maintains a stack of <see cref="T:HAL.Bindings.IPropertyIdentifer" />s describing a single property or nested properties.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.#ctor(HAL.Bindings.IPropertyIdentifer[])">
      <summary>Creates a new <see cref="T:HAL.Bindings.PropertyStack" /> with the given <see cref="T:HAL.Bindings.IPropertyIdentifer" />(s) as the initial stack.</summary>
      <param name="keys">The keys to add to the stack.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.#ctor(System.String)">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.#ctor(System.String[])">
      <summary>Default constructor.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.CanRead">
      <summary>Gets a boolean indicating whether the final property can be read.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.CanWrite">
      <summary>Gets a boolean indicating whether the final property can be written.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.PropertyType">
      <summary>Gets the <c>Type</c> of the final property in the stack.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Single">
      <summary>Determines whether this stack points to a top level property and therefore only contains a single property key.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Custom">
      <summary>Gets a value indicating whether the property is a custom property and therefore not tied to the property of a class.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.FullName">
      <summary>A concatenation of the aliases of each sub-property.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Alias">
      <summary>The name given to this property stack.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Description">
      <summary>Description of property.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Manager">
      <summary>For any custom properties, the Property manager in which they are contained.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.Host">
      <summary>The object in which this has been created and which should be used if no parent is given for a get or set.</summary>
    </member>
    <member name="P:HAL.Bindings.PropertyStack.IsBindable">
      <summary>Defines whether this identifier can be used to bind its target.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Add(HAL.Bindings.IPropertyIdentifer[])">
      <summary>Adds one or more <see cref="T:HAL.Bindings.IPropertyIdentifer" />s to the PropertyStack.</summary>
      <param name="keys">The keys to add to the stack.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.RemoveTo(HAL.Bindings.IPropertyIdentifer)">
      <summary>Removes all properties from the end up to the given key.</summary>
      <param name="key">The key from which the stack should be cut.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.RemoveLast">
      <summary>Removes the last property in the stack.</summary>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.GetValue(System.Object)">
      <summary>Gets the current value of the property of a given object pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="parent">The object from which the value pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> should be retrieved.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.TrySetValue(System.Object,System.Object)">
      <summary>Attempts to set the given value to the property pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> in the given parent object.</summary>
      <param name="parent">Object whose property or sub-property pointed to by this <see cref="T:HAL.Bindings.IPropertyIdentifer" /> should be set.</param>
      <param name="value">Value to be assigned to the property to which this points.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(HAL.Bindings.IPropertyIdentifer)">
      <summary>Compares this <see cref="T:HAL.Bindings.PropertyStack" /> to a given <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="other">The key to compare to this stack.</param>
      <returns>
        <c>true</c> if this stack has only a single item and it is equal to the given key, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(HAL.Bindings.PropertyStack)">
      <summary>Compares this <see cref="T:HAL.Bindings.PropertyStack" /> to a given <see cref="T:HAL.Bindings.PropertyStack" />.</summary>
      <param name="other">The stack to compare to this.</param>
      <returns>
        <c>true</c> if this stack has all the same items as the other, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(System.String)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(System.Guid)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.PropertyStack.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.PropertyStack.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Bindings.PropertyStack.op_Implicit(HAL.Bindings.PropertyKey)~HAL.Bindings.PropertyStack">
      <summary>Converts a <see cref="T:HAL.Bindings.PropertyKey" /> to <see cref="T:HAL.Bindings.PropertyStack" /> by wrapping the key as the only item in a new stack.</summary>
      <param name="key">The <see cref="T:HAL.Bindings.PropertyKey" /> to be converted to a <see cref="T:HAL.Bindings.PropertyStack" />.</param>
    </member>
    <member name="M:HAL.Bindings.PropertyStack.op_Implicit(HAL.Bindings.PropertyStack)~HAL.Bindings.IPropertyIdentifer[]">
      <summary>Converts a <see cref="T:HAL.Bindings.PropertyStack" /> to an array of <see cref="T:HAL.Bindings.IPropertyIdentifer" />s.</summary>
      <param name="stack">The <see cref="T:HAL.Bindings.PropertyStack" /> to be converted to an array of <see cref="T:HAL.Bindings.IPropertyIdentifer" />s.</param>
    </member>
    <member name="T:HAL.Catalog.Catalog`2">
      <summary>Catalog exposing strongly typed items from multiple repositories.</summary>
      <typeparam name="TItem">Type of object classifying this catalog's content.</typeparam>
      <typeparam name="T">Type of catalog content.</typeparam>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="P:HAL.Catalog.Catalog`2.Items">
      <summary>Items of the catalog.</summary>
    </member>
    <member name="P:HAL.Catalog.Catalog`2.Repositories">
      <summary>Repositories of the catalog.</summary>
    </member>
    <member name="P:HAL.Catalog.Catalog`2.ItemDictionary">
      <summary>Cache for quick access to repository's items.</summary>
    </member>
    <member name="P:HAL.Catalog.Catalog`2.Tags">
      <inheritdoc />
    </member>
    <member name="M:HAL.Catalog.Catalog`2.Add(HAL.Catalog.CatalogRepository{`0,`1})">
      <summary>Adds a repository.</summary>
      <param name="repository">Repository to add.</param>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.AddRange(System.Collections.Generic.IEnumerable{HAL.Catalog.CatalogRepository{`0,`1}})">
      <summary>Adds a collection of repositories.</summary>
      <param name="repositories">Repositories to add.</param>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.Remove(HAL.Catalog.CatalogRepository{`0,`1})">
      <summary>Removes a repository.</summary>
      <param name="repository">Repository to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.RemoveRange(System.Collections.Generic.IEnumerable{HAL.Catalog.CatalogRepository{`0,`1}})">
      <summary>Removes a collection of repository.</summary>
      <param name="repositories">Repositories to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.Retrieve(`0)">
      <summary>Retrieves an item listed in this catalog.</summary>
      <param name="item">Item to retrieve.</param>
      <returns>
        <c>true</c> if the item was successfully retrieved.</returns>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.Retrieve(System.String)">
      <summary>Retrieves an item listed in this catalog.</summary>
      <param name="itemId">Id of item to retrieve.</param>
      <returns>
        <c>true</c> if the item was successfully retrieved.</returns>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.AddItem(`0)">
      <summary>Adds a single item.</summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:HAL.Catalog.Catalog`2.Store(HAL.Catalog.CatalogRepository{`0,`1},`0,`1,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="repository">Repository in which to store the item.</param>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.CatalogRepository`2">
      <summary>Repository storing strongly typed items for a catalog.</summary>
      <typeparam name="TItem">Type of object classifying this repository's content.</typeparam>
      <typeparam name="T">Type of repository content.</typeparam>
    </member>
    <member name="M:HAL.Catalog.CatalogRepository`2.#ctor(System.String,System.String,HAL.Catalog.Items.Attributes.Tags.ITagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="alias">Repository alias.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.CatalogRepository`2.Load(`0)">
      <summary>Loads the payload of the given item.</summary>
      <param name="item">The item to load.</param>
      <returns>The item represented by the given catalog item.</returns>
    </member>
    <member name="M:HAL.Catalog.CatalogRepository`2.Load(System.String)">
      <summary>Loads the payload of the given item.</summary>
      <param name="itemId">Id of the item to load.</param>
      <returns>The item represented by the given catalog item.</returns>
    </member>
    <member name="M:HAL.Catalog.CatalogRepository`2.Load``1(System.String)">
      <summary>Loads the payload of the given item.</summary>
      <param name="itemId">Id of the item to load.</param>
      <returns>The item represented by the given catalog item.</returns>
    </member>
    <member name="M:HAL.Catalog.CatalogRepository`2.Store(`0,`1,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item"> Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.Extensions.Extension">
      <summary>Prepares an extension file structure for serialization.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.Extension.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.Extension.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Prepares an extension file structure for serialization.</summary>
      <param name="payloadFiles">Files that make up the content of this item.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.Extension.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
      <summary>Prepares an extension file structure for serialization.</summary>
      <param name="payloadFiles">Files that make up the content of this item.</param>
      <param name="clientSpecificFiles">Files exclusive to specific clients or frameworks in the for [client,files]</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.Extension.Clone">
      <summary>Clones the current item.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.Extension.RootDirectory">
      <summary>Root directory for payload files. If not included, directory structure will be flattened.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.Extension.PayloadFiles">
      <summary>Files to include in the extension.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.Extension.ClientSpecificFiles">
      <summary>Files exclusive to specific clients or frameworks in the for [client,files].</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.Extension.PrepareFiles">
      <summary>Prepares the listed files for serialization.</summary>
      <returns>Directory in which the files have been prepared.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.Extension.PrepareFiles(System.String)">
      <summary>Prepares the listed files for serialization.</summary>
      <param name="preparationDirectory">Directory in which to prepare the files.</param>
      <returns>Directory in which the files have been prepared.</returns>
    </member>
    <member name="T:HAL.Catalog.Extensions.ExtensionCatalog">
      <summary>Catalog of extensions.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.#ctor(HAL.Catalog.Extensions.ExtensionRepository[])">
      <summary> Creates a controller catalog. </summary>
      <param name="repositories">Repositories of the catalog.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.CreateDefault">
      <summary>Asynchronously creates the default catalog with local and remote repositories.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionCatalog.IncludePrerelease">
      <summary>Whether this should return pre-release packages as well as release packages. Defaults to <c>false</c>.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionCatalog.Alerts">
      <summary>
        <see cref="T:HAL.Alerts.Alert" />s related to this object.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionCatalog.Logger">
      <summary>Alert logger.</summary> //todo [Improvement] Merge with Alerts
        </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.FetchAllHeadersAsync">
      <summary>Updates the item collection from the repositories.</summary>
      <returns>Task which is fetching all the headers.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.Add(HAL.Catalog.CatalogRepository{HAL.Catalog.Extensions.ExtensionItem,HAL.Catalog.Extensions.Extension})">
      <summary>Adds a repository.</summary>
      <param name="repository">Repository to add.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.Remove(HAL.Catalog.CatalogRepository{HAL.Catalog.Extensions.ExtensionItem,HAL.Catalog.Extensions.Extension})">
      <summary>Removes a repository.</summary>
      <param name="repository">Repository to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.GetInstalledVersion(System.String)">
      <summary>Retrieves the currently installed version of an item.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>Version of the item installed, <c>null</c> if it is not.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.Exists(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.ExistsAsync(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.GetInfo(System.String)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.GetInfo(System.String,System.Boolean)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <param name="includeDependencies">Whether to populate the items dependency list.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.GetInfoAsync(System.String,System.Boolean,NuGet.Versioning.VersionRange)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <param name="includeDependencies">Whether to populate the items dependency list.</param>
      <param name="versionRange">Version constraints</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.TryInstallAsync(HAL.Catalog.Extensions.ExtensionItem,System.Boolean,System.String,System.Action{System.String,System.Int32,System.Int32})">
      <summary>Attempts to asynchronously install the given item.</summary>
      <param name="item">Item to install.</param>
      <param name="asClient">Whether this item should be installed as a client.</param>
      <param name="downloadPath">Path for temporary downloads.</param>
      <param name="progress">Progress feedback function of the form [Id, InstallingProgress, Dependencies].</param>
      <returns>
        <c>true</c> if the installation was successful.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.TryInstallAsync(System.String)">
      <summary>Attempts to asynchronously install the given item.</summary>
      <param name="id">Unique identifier of the item to install.</param>
      <returns>
        <c>true</c> if the installation was successful.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.TryUninstallAsync(System.String)">
      <summary>Attempts to asynchronously uninstall a framework extension or client.</summary>
      <param name="id">Unique identifier of the item to uninstall.</param>
      <returns>
        <c>true</c> if the uninstallation was successful.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.OverridePreInstallation(System.String,System.Action)">
      <summary>Adds an action to be executed before the installation of an extension item.</summary>
      <param name="repoId">Repository ID of item to override.</param>
      <param name="action">Action to execute.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.OverridePostInstallation(System.String,System.Action)">
      <summary>Adds an action to be executed after the installation of an extension item.</summary>
      <param name="repoId">Repository ID of item to override.</param>
      <param name="action">Action to execute.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.OverridePreUninstallation(System.String,System.Action)">
      <summary>Adds an action to be executed before the uninstallation of an extension item.</summary>
      <param name="repoId">Repository ID of item to override.</param>
      <param name="action">Action to execute.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.OverridePostUninstallation(System.String,System.Action)">
      <summary>Adds an action to be executed after the uninstallation of an extension item.</summary>
      <param name="repoId">Repository ID of item to override.</param>
      <param name="action">Action to execute.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionCatalog.InstallAsClient(System.String)">
      <summary>Defines that an extension item should be installed as a client.</summary>
      <param name="repoId">Repository ID of item to override.</param>
    </member>
    <member name="T:HAL.Catalog.Extensions.ExtensionItem">
      <summary>Represents an extension in a catalog.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Catalog.Extensions.ExtensionItem" /> with the given identity.</summary>
      <param name="id">The identity to give this new item.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.#ctor(HAL.Catalog.Items.ItemIdentifier)">
      <summary>Creates a new <see cref="T:HAL.Catalog.Extensions.ExtensionItem" /> with the given identity.</summary>
      <param name="identity">The identity to give this new item.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Creates a catalog item from basic information.</summary>
      <param name="title">The title of this item.</param>
      <param name="description">The brief description of the item.</param>
      <param name="illustrationPath">The path of the representative graphic.</param>
      <param name="url">The URL of the item.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.#ctor(HAL.Catalog.Extensions.ExtensionItem)">
      <summary>Creates a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" /> from an existing one.</summary>
      <param name="clonee">The item to clone.</param>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.Files">
      <summary>Files installed by this extension.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.Dependencies">
      <summary>Dependencies required by this extension.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.IsExtension">
      <summary>Indicates whether this is an extension to the framework. </summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.IsClient">
      <summary>Indicates whether this is an executable extension to the framework.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.ClientRestrictions">
      <summary>Clients onto which this extension can be installed and run. If none are listed, it is considered portable. </summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.PlatformRestrictions">
      <summary>Platforms onto which this extension can be installed and run. If none are listed, it is considered portable, i.e. cross-platform. </summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.InstalledVersion">
      <summary>Installed version.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.Repository">
      <summary>Repository which contains this.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.HasUpdate">
      <summary>Asserts whether the installed version of this is less than that available.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.IsInstalled">
      <summary>Asserts whether this is installed.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionItem.IsDevelopmentOnly">
      <summary>Whether this item should only be used for development and not installed.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(HAL.Catalog.Extensions.ExtensionItem)~NuGet.Packaging.Core.PackageIdentity">
      <summary>Converts a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" /> to NuGet PackageIdentity.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(NuGet.Packaging.Core.PackageIdentity)~HAL.Catalog.Extensions.ExtensionItem">
      <summary>Converts NuGet PackageIdentity to a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(HAL.Catalog.Extensions.ExtensionItem)~NuGet.Packaging.ManifestMetadata">
      <summary>Converts a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" /> to NuGet ManifestMetadata.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(NuGet.Packaging.ManifestMetadata)~HAL.Catalog.Extensions.ExtensionItem">
      <summary>Converts NuGet ManifestMetadata to a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(NuGet.Packaging.NuspecReader)~HAL.Catalog.Extensions.ExtensionItem">
      <summary>Converts NuGet ManifestMetadata to a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" />.</summary>
      <param name="reader">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(NuGet.Protocol.PackageSearchMetadata)~HAL.Catalog.Extensions.ExtensionItem">
      <summary>Converts NuGet ManifestMetadata to a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionItem.op_Implicit(NuGet.Protocol.LocalPackageSearchMetadata)~HAL.Catalog.Extensions.ExtensionItem">
      <summary>Converts NuGet ManifestMetadata to a <see cref="T:HAL.Catalog.Extensions.ExtensionItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="T:HAL.Catalog.Extensions.ExtensionLoader">
      <summary>Helper methods for loading extensions.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.WindowsCompatibleFrameworks">
      <summary>Frameworks compatible with Microsoft's Windows.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.LinuxCompatibleFrameworks">
      <summary>Frameworks compatible with Linus's Linux.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.MacOSCompatibleFrameworks">
      <summary>Frameworks compatible with Apple's MacOS.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.WindowsIncompatibleFrameworks">
      <summary>Frameworks compatible with Microsoft's Windows.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.LinuxIncompatibleFrameworks">
      <summary>Frameworks compatible with Linus's Linux.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.MacOSIncompatibleFrameworks">
      <summary>Frameworks compatible with Apple's MacOS.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.WindowsLongFormFrameworks">
      <summary>Frameworks compatible with Microsoft's Windows.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionLoader.IsFramework(System.String)">
      <summary>Asserts whether a framework moniker is incompatible with the given OS.</summary>
      <param name="moniker">Framework moniker</param>
      <returns>
        <c>true</c> if the moniker is a know incompatible framework.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionLoader.IsFramework(System.String,HAL.Catalog.Extensions.ExtensionLoader.OS)">
      <summary>Asserts whether a framework moniker is incompatible with the given OS.</summary>
      <param name="moniker">Framework moniker</param>
      <param name="os">Operating system</param>
      <returns>
        <c>true</c> if the moniker is a know incompatible framework.</returns>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionLoader.CurrentCompatibleFrameworks">
      <summary>Gets frameworks compatible with the current OS.</summary>
      <returns>Frameworks compatible with the current OS.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionLoader.CompatibleFrameworks(HAL.Catalog.Extensions.ExtensionLoader.OS)">
      <summary>Gets frameworks compatible with the given OS.</summary>
      <param name="os">OS.</param>
      <returns>Frameworks compatible with the given OS.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionLoader.CurrentIncompatibleFrameworks">
      <summary>Gets frameworks incompatible with the current OS.</summary>
      <returns>Frameworks incompatible with the current OS.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionLoader.IncompatibleFrameworks(HAL.Catalog.Extensions.ExtensionLoader.OS)">
      <summary>Gets frameworks incompatible with the given OS.</summary>
      <param name="os">OS.</param>
      <returns>Frameworks incompatible with the given OS.</returns>
    </member>
    <member name="T:HAL.Catalog.Extensions.ExtensionRepository">
      <summary>Manages framework extensions.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.#ctor(System.String,System.String,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository. </param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionRepository.Default">
      <summary>Default repository for extensions and clients for the HAL framework.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.CreateDefault(NuGet.Common.ILogger)">
      <summary>Default repository for extensions and clients for the HAL framework.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.ExtensionRepository.NuGetHome">
      <summary>NuGet Home repository for dependencies.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.GetCurrentVersion(System.String)">
      <summary>Retrieves the current version of an item.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>Latest version of the item stored in this repository.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.GetInstalledVersion(System.String)">
      <summary>Retrieves the currently installed version of an item.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>Version of the item installed, <c>null</c> if it is not.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.Exists(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.ExistsAsync(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.GetInfo(System.String)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.GetInfo(System.String,System.Boolean)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <param name="includeDependencies">Whether to populate the items dependency list.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.GetInfoAsync(System.String,System.Boolean,NuGet.Versioning.VersionRange)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <param name="includeDependencies">Whether to populate the items dependency list.</param>
      <param name="versionRange">Version constraints</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.Store(HAL.Catalog.Extensions.ExtensionItem,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item"> Item details.</param>
      <param name="payloadFiles">Files that make up the content of this item.</param>
      <param name="clientSpecificFiles">Files exclusive to specific clients or frameworks in the for [client,files]</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.Store(HAL.Catalog.Extensions.ExtensionItem,HAL.Catalog.Extensions.Extension,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item"> Item details.</param>
      <param name="payload">Payload that make up the content of this item.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.ExtensionRepository.Load(HAL.Catalog.Extensions.ExtensionItem)">
      <summary>[NotImplemented]</summary>
    </member>
    <member name="T:HAL.Catalog.Extensions.HAL_InstallationConfiguration">
      <summary>Maintains the configuration of an installation.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.HAL_InstallationConfiguration.Components">
      <summary>Installed components.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.HAL_InstallationConfiguration.Repositories">
      <summary>Configured repositories.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.HAL_InstallationConfiguration.ExtensionRepositories">
      <summary>Installation repositories.</summary>
    </member>
    <member name="P:HAL.Catalog.Extensions.HAL_InstallationConfiguration.Instance">
      <summary>Current installation configuration.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.AddExtensionRepository(HAL.Catalog.Extensions.ExtensionRepository)">
      <summary>Adds an extension repository.</summary>
      <param name="repository">Repository to be added.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.RemoveExtensionRepository(HAL.Catalog.Extensions.ExtensionRepository)">
      <summary>Removes an extension repository.</summary>
      <param name="repository">Repository to be removed.</param>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.Validate(System.String)">
      <summary>Ensures that this configuration matches the installation on the current machine.</summary>
      <param name="installationPath">Path to installation directory.</param>
      <returns>
        <c>true</c> if the configuration is correct, otherwise corrects the configuration.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.Write">
      <summary>Writes out the configuration file to its default path.</summary>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.GetRedundantDependencies">
      <summary>Searches for all installed components which are no longer required by any clients or extensions.</summary>
      <returns>List of extension items that can safely be uninstalled.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.GetExtensions(System.String)">
      <summary>Searches for all installed extensions which can be loaded.</summary>
      <param name="client">Client loading the extensions.</param>
      <returns>List of extension items and dependencies.</returns>
    </member>
    <member name="M:HAL.Catalog.Extensions.HAL_InstallationConfiguration.GetLoadableExtensionFiles(System.String,System.Boolean)">
      <summary>Searches for all loadable files for installed extensions.</summary>
      <param name="client">Client loading the extensions.</param>
      <param name="absolutePaths">Whether to return absolute or relative paths to the files.</param>
      <returns>List of files to load.</returns>
    </member>
    <member name="T:HAL.Catalog.ICatalog">
      <summary>Qualifies a catalog maintaining HAL content.</summary>
    </member>
    <member name="P:HAL.Catalog.ICatalog.Tags">
      <summary>Content tags.</summary>
    </member>
    <member name="T:HAL.Catalog.ICataloguable">
      <summary>Qualifies items that can be listed in a <see cref="T:HAL.Catalog.ICatalog" />.</summary>
    </member>
    <member name="T:HAL.Catalog.ICatalogWidget">
      <summary>Qualifies a <see cref="T:HAL.Catalog.ICatalog" /> widget.</summary>
    </member>
    <member name="M:HAL.Catalog.ICatalogWidget.Show">
      <summary>Displays this <see cref="T:HAL.Catalog.ICatalogWidget" /> to the user.</summary>
    </member>
    <member name="M:HAL.Catalog.ICatalogWidget.Hide">
      <summary>Hides this <see cref="T:HAL.Catalog.ICatalogWidget" /> to the user.</summary>
    </member>
    <member name="T:HAL.Catalog.InfoItem">
      <summary>Base class for items displaying minimal information.</summary>
    </member>
    <member name="M:HAL.Catalog.InfoItem.#ctor">
      <summary>Creates an empty information item.</summary>
    </member>
    <member name="M:HAL.Catalog.InfoItem.#ctor(System.String,System.String,System.String)">
      <summary>Creates an information item from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="illustrationPath">Item illustration path.</param>
    </member>
    <member name="M:HAL.Catalog.InfoItem.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String)">
      <summary>Creates an information item from detailed information.</summary>
      <param name="identifier">Item title.</param>
      <param name="description">Item description.</param>
      <param name="illustrationPath">Item illustration path.</param>
    </member>
    <member name="M:HAL.Catalog.InfoItem.#ctor(HAL.Catalog.InfoItem)">
      <summary>Creates an information item from an existing <see cref="T:HAL.Catalog.InfoItem" />.</summary>
      <param name="clonee">The item to clone.</param>
    </member>
    <member name="P:HAL.Catalog.InfoItem.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Catalog.InfoItem.Id">
      <summary>Object's unique identifier.</summary>
    </member>
    <member name="P:HAL.Catalog.InfoItem.Title">
      <summary>Item title.</summary>
    </member>
    <member name="P:HAL.Catalog.InfoItem.Description">
      <summary>Brief item description.</summary>
    </member>
    <member name="P:HAL.Catalog.InfoItem.IllustrationPath">
      <summary>Item illustration path.</summary>
    </member>
    <member name="P:HAL.Catalog.InfoItem.Tags">
      <summary>Item tags.</summary>
    </member>
    <member name="P:HAL.Catalog.InfoItem.TagTitles">
      <summary>Serialization-friendly property to manage both known and unknown object tags.</summary>
    </member>
    <member name="F:HAL.Catalog.InfoItem._tagTitles">
      <summary>Serialization-friendly property to manage both known and unknown object tags.</summary>
    </member>
    <member name="M:HAL.Catalog.InfoItem.Equals(HAL.Catalog.InfoItem)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.InfoItem.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.InfoItem.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.InfoItem.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Catalog.InfoItem.ToString">
      <summary>Creates a human readable string from this object.</summary>
      <returns>A string representation of this.</returns>
    </member>
    <member name="T:HAL.Catalog.INuGetRepository">
      <summary>Qualifies a NuGet Repository.</summary>
    </member>
    <member name="P:HAL.Catalog.INuGetRepository.IsConnected">
      <summary>Indicates whether the repository is connected to its endpoint.</summary>
    </member>
    <member name="P:HAL.Catalog.INuGetRepository.NumResultsPerPage">
      <summary>Number of results to return per page.</summary>
    </member>
    <member name="P:HAL.Catalog.INuGetRepository.TypeFilter">
      <summary>Type of result to return.</summary>
    </member>
    <member name="P:HAL.Catalog.INuGetRepository.SearchTerm">
      <summary>Term to search for.</summary>
    </member>
    <member name="P:HAL.Catalog.INuGetRepository.IncludePrerelease">
      <summary>Indicates whether searches should return pre-release packages as well as release packages. Defaults to <c>false</c>.</summary>
    </member>
    <member name="M:HAL.Catalog.INuGetRepository.CancelSearch">
      <summary>Cancels any ongoing searches.</summary>
    </member>
    <member name="M:HAL.Catalog.INuGetRepository.TryConnectAsync">
      <summary>Attempts to connect to the repository if the connection is not already live.</summary>
    </member>
    <member name="T:HAL.Catalog.IRepository">
      <summary> Qualifies a repository. </summary>
    </member>
    <member name="P:HAL.Catalog.IRepository.URI">
      <summary>Repository URI.</summary>
    </member>
    <member name="P:HAL.Catalog.IRepository.IsRemote">
      <summary>
        <c>false</c> if this repository is located on the current machine, <c>true</c> otherwise.</summary>
    </member>
    <member name="P:HAL.Catalog.IRepository.Access">
      <summary>Access <see cref="T:HAL.Catalog.Permission" /> for this <see cref="T:HAL.Catalog.CatalogRepository`2" />.</summary>
    </member>
    <member name="P:HAL.Catalog.IRepository.Items">
      <summary>Items currently available.</summary>
    </member>
    <member name="M:HAL.Catalog.IRepository.GetCurrentVersion(System.String)">
      <summary>Retrieves the current version of an item.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>Latest version of the item stored in this repository.</returns>
    </member>
    <member name="M:HAL.Catalog.IRepository.Exists(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.IRepository.FetchAllHeadersAsync">
      <summary>Updates the item collection from the repository.</summary>
      <returns>Task which is fetching all the headers.</returns>
    </member>
    <member name="M:HAL.Catalog.IRepository.GetInfo(System.String)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.IRepository.AddItem(HAL.Catalog.Items.CatalogItem)">
      <summary>Adds a single item.</summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:HAL.Catalog.IRepository.AddItems(System.Collections.Generic.List{HAL.Catalog.Items.CatalogItem})">
      <summary>Adds multiple items.</summary>
      <param name="items">Items to add.</param>
    </member>
    <member name="M:HAL.Catalog.IRepository.RemoveItem(HAL.Catalog.Items.CatalogItem)">
      <summary>Removes a single item.</summary>
      <param name="item">Item to remove.</param>
    </member>
    <member name="M:HAL.Catalog.IRepository.RemoveItems(System.Collections.Generic.List{HAL.Catalog.Items.CatalogItem})">
      <summary>Removes multiple items.</summary>
      <param name="items">Items to remove.</param>
    </member>
    <member name="M:HAL.Catalog.IRepository.Load``1(System.String)">
      <summary>Loads the payload of the given item.</summary>
      <param name="itemId">Id of the item to load.</param>
      <returns>The item represented by the given catalog item.</returns>
    </member>
    <member name="M:HAL.Catalog.IRepository.Clear">
      <summary>Removes all items from the cache.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.Attributes.Badge">
      <summary>Badge.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.Attributes.Tags.ITagGraph">
      <summary>Qualifies a <see cref="T:HAL.Graphs.IGraph" /> of <see cref="T:HAL.Catalog.Items.Attributes.Tags.Tag" />s.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.ITagGraph.Tags">
      <summary>Tags.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.ITagGraph.AddTags(System.Collections.Generic.IEnumerable{HAL.Catalog.Items.Attributes.Tags.Tag})">
      <summary>Adds a list of potentially related tags to this graph.</summary>
      <param name="tags">Tags to be added.</param>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.ITagGraph.AddTags(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Adds a list of potentially related tags to this graph.</summary>
      <remarks>New tags will be generated if they do not exist in the graph.</remarks>
      <param name="tagTitles">Titles of the tags to be added.</param>
      <returns>Equivalent tags.</returns>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.ITagGraph.UpdateTags(HAL.Catalog.InfoItem,System.Boolean)">
      <summary>Updates all of the tags within the given item by matching the title to fully fledged tags.</summary>
      <param name="item">Item whose tags should be updated.</param>
      <param name="force">Force the update.</param>
    </member>
    <member name="T:HAL.Catalog.Items.Attributes.Tags.MeasurementTag">
      <summary>Measurement tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.MeasurementTag.#ctor">
      <summary>Creates an empty tag.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.Attributes.Tags.Tag">
      <summary>Tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.#ctor">
      <summary>Creates an empty tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.#ctor(HAL.Catalog.Items.Attributes.Tags.Tag[],System.String,System.String,System.String[],System.String,System.String)">
      <summary>Creates a tag from detailed information.</summary>
      <param name="parents">Parent tags.</param>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="synonyms">Item synonyms.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.Tag.Synonyms">
      <summary>Tag synonyms.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.Tag.Parents">
      <summary>Parent tags.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.Equals(System.String)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.Equals(HAL.Catalog.Items.Attributes.Tags.Tag)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.Filter(System.String)">
      <summary>Filters an object based on a text input.</summary>
      <param name="input">Filtering text.</param>
      <returns>True if this object is matching the text filter constraint.</returns>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.Tag.ToString">
      <summary>Creates a human readable string from this object.</summary>
      <returns>A string representation of this.</returns>
    </member>
    <member name="T:HAL.Catalog.Items.Attributes.Tags.TopicTag">
      <summary>Topic tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.TopicTag.#ctor">
      <summary>Creates an empty tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.TopicTag.#ctor(System.String,System.String,System.String[],System.String,System.String)">
      <summary>Creates a tag from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="synonyms">Item synonyms.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TopicTag.Provider">
      <summary>Provider tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TopicTag.Operation">
      <summary>Process tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TopicTag.Positioner">
      <summary>Positioner tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TopicTag.Manipulator">
      <summary>Manipulator tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TopicTag.Tool">
      <summary>Tool tag.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.Attributes.Tags.TypeTag">
      <summary>Type tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.TypeTag.#ctor">
      <summary>Creates an empty tag.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.Attributes.Tags.TypeTag.#ctor(System.String,System.String,System.String[],System.String,System.String)">
      <summary>Creates a tag from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="synonyms">Item synonyms.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Part">
      <summary>Part tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Mechanism">
      <summary>Mechanism tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Controller">
      <summary>Sensor tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Sensor">
      <summary>Sensor tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Procedure">
      <summary>Procedure tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Client">
      <summary>Client tag.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.Attributes.Tags.TypeTag.Extension">
      <summary>Extension tag.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.CatalogItem`1">
      <summary>Catalog item.</summary>
      <typeparam name="T">Item content type.</typeparam>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem`1.#ctor(System.String,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a catalog item from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem`1.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a new <see cref="T:HAL.Catalog.Items.CatalogItem" /> with the given identity.</summary>
      <param name="identity">Item identifier.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem`1.#ctor(HAL.Catalog.Items.CatalogItem)">
      <summary>Creates a <see cref="T:HAL.Catalog.Items.CatalogItem" /> by cloning an existing one.</summary>
      <param name="clonee">The item to clone.</param>
    </member>
    <member name="T:HAL.Catalog.Items.CatalogItem">
      <summary>Catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.#ctor(System.String,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a catalog item from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a new <see cref="T:HAL.Catalog.Items.CatalogItem" /> with the given identity.</summary>
      <param name="identity">Item identifier.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.#ctor(HAL.Catalog.Items.CatalogItem)">
      <summary>Creates a <see cref="T:HAL.Catalog.Items.CatalogItem" /> by cloning an existing one.</summary>
      <param name="clonee">The item to clone.</param>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.IsFullyLoaded">
      <summary>Indicates whether this item has been fully loaded and is not just a header.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Extension">
      <summary>Returns the extension used for storing this catalog item in a repository.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Version">
      <summary>Version.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Repository">
      <summary>Repository which contains this.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Authors">
      <summary>Authors.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Owners">
      <summary>Owners.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.LicenseUrl">
      <summary>URL of the license.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.RequiresLicenseAcceptance">
      <summary>Whether a license needs to be accepted before install.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.URL">
      <summary>Project URL.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Summary">
      <summary>Extended summary.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.ReleaseNotes">
      <summary>Release notes for this version.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Copyright">
      <summary>Copyright notice.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.TagTitles">
      <summary>Serialization-friendly property to manage both known and unknown object tags.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.CatalogItem.Type">
      <summary>Type.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(HAL.Catalog.Items.CatalogItem)~NuGet.Packaging.Core.PackageIdentity">
      <summary>Converts a <see cref="T:HAL.Catalog.Items.CatalogItem" /> to NuGet PackageIdentity.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(NuGet.Packaging.Core.PackageIdentity)~HAL.Catalog.Items.CatalogItem">
      <summary>Converts NuGet PackageIdentity to a <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(HAL.Catalog.Items.CatalogItem)~NuGet.Packaging.ManifestMetadata">
      <summary>Converts a <see cref="T:HAL.Catalog.Items.CatalogItem" /> to NuGet ManifestMetadata.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(NuGet.Packaging.ManifestMetadata)~HAL.Catalog.Items.CatalogItem">
      <summary>Converts NuGet ManifestMetadata to a <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(NuGet.Packaging.NuspecReader)~HAL.Catalog.Items.CatalogItem">
      <summary>Converts NuGet ManifestMetadata to a <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="reader">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(NuGet.Protocol.PackageSearchMetadata)~HAL.Catalog.Items.CatalogItem">
      <summary>Converts NuGet PackageSearchMetadata to a <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.op_Implicit(NuGet.Protocol.LocalPackageSearchMetadata)~HAL.Catalog.Items.CatalogItem">
      <summary>Converts NuGet PackageSearchMetadata to a <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="existingItem">The item details to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.Equals(HAL.Catalog.Items.CatalogItem)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Items.CatalogItem.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:HAL.Catalog.Items.ICatalogItemWidget">
      <summary>Qualifies a catalog item widget.</summary>
    </member>
    <member name="P:HAL.Catalog.Items.ICatalogItemWidget.Item">
      <summary>Catalog item associated with this widget.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.ICatalogItemWidget`1">
      <summary>Qualifies a catalog item widget specific to an item type.</summary>
      <typeparam name="TItem">Item type.</typeparam>
    </member>
    <member name="P:HAL.Catalog.Items.ICatalogItemWidget`1.ItemInstance">
      <summary>Catalog item instance associated with this widget.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.ItemIdentifier">
      <summary>Identifies an item in a repository.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.ItemIdentifier.#ctor(System.String)">
      <summary>Creates an item identifier.</summary>
      <param name="alias">Alias.</param>
    </member>
    <member name="M:HAL.Catalog.Items.ItemIdentifier.#ctor(System.String,System.Guid,System.String)">
      <summary>Creates an item identifier.</summary>
      <param name="alias">Alias.</param>
      <param name="guid">GUID.</param>
      <param name="repoId">The unique identifier for this item in a format readable by its host repository.</param>
    </member>
    <member name="M:HAL.Catalog.Items.ItemIdentifier.#ctor(System.String,System.String)">
      <summary>Creates an item identifier.</summary>
      <param name="alias">Alias.</param>
      <param name="repoId">The unique identifier for this item in a format readable by its host repository.</param>
    </member>
    <member name="M:HAL.Catalog.Items.ItemIdentifier.#ctor(HAL.Catalog.Items.ItemIdentifier)">
      <summary>Creates an item identifier from an existing one.</summary>
      <param name="clonee">The identifier to be cloned.</param>
    </member>
    <member name="P:HAL.Catalog.Items.ItemIdentifier.RepositoryId">
      <summary>The unique identifier for this item in a format readable by its host repository.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.ItemIdentifier.Equals(HAL.Catalog.Items.ItemIdentifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" />parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Items.ItemIdentifier.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="T:HAL.Catalog.LocalCatalogRepository`2">
      <summary>Local repository storing strongly typed items for a catalog.</summary>
      <typeparam name="TItem">Type of object classifying this repository's content.</typeparam>
      <typeparam name="T">Type of repository content.</typeparam>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.#ctor(System.String,System.String,HAL.Catalog.Items.Attributes.Tags.ITagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="alias">Repository alias.</param>
      <param name="uri">Local or remote location of the repository. </param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="P:HAL.Catalog.LocalCatalogRepository`2.IsRemote">
      <summary>
        <c>false</c> if this repository is located on the current machine, <c>true</c> otherwise.</summary>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.GetCurrentVersion(System.String)">
      <summary>Retrieves the current version of the item represented by the given identifier.</summary>
      <param name="id">The unique identifier of the item.</param>
      <returns>The latest version of the item stored in this repository.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.Exists(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.FetchAllHeadersAsync">
      <summary>Updates the item collection from the repository.</summary>
      <returns>An awaitable task which is fetching all the headers.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.FetchHeadersAsync(System.Int32,System.String[])">
      <summary>[Not Implemented] Returns the available items the best match the search strings.</summary>
      <param name="num">Maximum number of items to return. Defaults to <c>int.MaxValue</c> and returns all relevant items.</param>
      <param name="searchTerms">Strings to search for.</param>
      <returns>A list of items that match the given criteria.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.GetInfo(System.String)">
      <summary>Retrieves a complete set of information about the item represented by the given identifier.</summary>
      <param name="id">The unique identifier of the item to obtain more information about.</param>
      <returns>A complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.Load(`0)">
      <summary>Get an item in this repository.</summary>
      <param name="item">Item to look for.</param>
      <returns>Retrieved item, if any.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalCatalogRepository`2.Store(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">The item details.</param>
      <param name="payloadFiles">The files that make up the content of this item.</param>
      <param name="overwrite">If <c>true</c>, this will overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">If <c>true</c>, this will automatically increment the version number of the catalog item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.NuGetCatalogRepository`2">
      <summary>Repository storing strongly typed items in a NuGet repository.</summary>
      <typeparam name="TItem">Type of object classifying this repository's content.</typeparam>
      <typeparam name="T">Type of repository content.</typeparam>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.#ctor(System.String,System.String,HAL.Catalog.LocalCatalogRepository{`0,`1},HAL.Catalog.Items.Attributes.Tags.TypeTag,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository. </param>
      <param name="downloadRepository">Repository in which to store downloads.</param>
      <param name="typeFilter">Type of result to return.</param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.#ctor(System.Boolean,System.String,System.String,HAL.Catalog.LocalCatalogRepository{`0,`1},HAL.Catalog.Items.Attributes.Tags.TypeTag,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="skipSetup">Skip setup step.</param>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository. </param>
      <param name="downloadRepository">Repository in which to store downloads.</param>
      <param name="typeFilter">Type of result to return.</param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.IsConnected">
      <summary>Indicates whether the repository is connected to its endpoint.</summary>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.IsRemote">
      <summary>
        <c>false</c> if this repository is located on the current machine, <c>true</c> otherwise.</summary>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.CanPush">
      <summary>Asserts that the repository can push packages.</summary>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.NumResultsPerPage">
      <summary>Number of results to return per page.</summary>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.TypeFilter">
      <summary>Type of result to return.</summary>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.SearchTerm">
      <summary>Term to search for.</summary>
    </member>
    <member name="P:HAL.Catalog.NuGetCatalogRepository`2.IncludePrerelease">
      <summary>Indicates whether searches should return pre-release packages as well as release packages. Defaults to <c>false</c>.</summary>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.CancelSearch">
      <summary>Cancels any ongoing searches.</summary>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.TryConnectAsync">
      <summary>Attempts to connect to the repository if the connection is not already live.</summary>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.GetCurrentVersion(System.String)">
      <summary>Retrieves the current version of an item.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>Latest version of the item stored in this repository.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.Exists(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.FetchAllHeadersAsync">
      <summary>Updates the item collection from the repository.</summary>
      <returns>Task which is fetching all the headers.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.FetchHeadersAsync(System.Int32,System.String[])">
      <summary>Returns the available items that best match the search strings.</summary>
      <param name="num">Maximum number of items to return. Defaults to <c>int.MaxValue</c> and returns all relevant items.</param>
      <param name="searchTerms">Strings to search for.</param>
      <returns>Items that match the given criteria.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.FetchNextHeadersAsync">
      <summary> Returns the next collection of available items that best match the search strings. </summary>
      <returns> A list of items that match the given criteria. </returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.GetInfo(System.String)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.GetPackageMetadata(System.String)">
      <summary>Finds the metadata of a package.</summary>
      <param name="id">Id</param>
      <returns>All package metadata</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.Load(`0)">
      <summary>Loads the payload of the given item.</summary>
      <param name="item">The item to load.</param>
      <returns>The item represented by the given catalog item.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.Store(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item"> Item details.</param>
      <param name="payloadFiles">Files that make up the content of this item.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="M:HAL.Catalog.NuGetCatalogRepository`2.DownloadPackage(`0,System.String)">
      <summary>Downloads the given item and unpacks it into the destination directory.</summary>
      <param name="item">Item to download.</param>
      <param name="destination">Destination directory in which to unpack the downloaded package.</param>
      <returns>Download resource result.</returns>
    </member>
    <member name="T:HAL.Catalog.Permission">
      <summary>Permission options.</summary>
    </member>
    <member name="F:HAL.Catalog.Permission.ReadOnly">
      <summary>Read only.</summary>
    </member>
    <member name="F:HAL.Catalog.Permission.ReadAndWrite">
      <summary>Read and write.</summary>
    </member>
    <member name="T:HAL.Catalog.Repository`1">
      <summary>Base repository.</summary>
      <typeparam name="TItem">Type of object classifying this repository's content.</typeparam>
    </member>
    <member name="M:HAL.Catalog.Repository`1.#ctor(System.String,System.String,HAL.Catalog.Items.Attributes.Tags.ITagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="alias">Alias.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="P:HAL.Catalog.Repository`1.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.URI">
      <summary>Repository URI.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.IsRemote">
      <summary>
        <c>false</c> if this repository is located on the current machine, <c>true</c> otherwise.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.Access">
      <summary>Access <see cref="T:HAL.Catalog.Permission" /> for this <see cref="T:HAL.Catalog.Repository`1" />.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.ItemDictionary">
      <summary>Cache for quick access to repository's items. Stored as lower case item id, item.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.Items">
      <summary>Items currently available.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.Tags">
      <summary>Tags.</summary>
    </member>
    <member name="P:HAL.Catalog.Repository`1.Alerts">
      <summary>
        <see cref="T:HAL.Alerts.Alert" />s related to this object.</summary>
    </member>
    <member name="M:HAL.Catalog.Repository`1.GetCurrentVersion(System.String)">
      <summary>Retrieves the current version of an item.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>Latest version of the item stored in this repository.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.GetCurrentVersion(`0)">
      <summary>Retrieves the current version of an item.</summary>
      <param name="item">Item.</param>
      <returns>Latest version of the item stored in this repository.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.NextVersion(`0)">
      <summary>Calculates the next version for a given item.</summary>
      <param name="item">Item.</param>
      <returns>Incremented version for the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Store(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item"> Item details.</param>
      <param name="payloadFiles">Files that make up the content of this item.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>
        <c>true</c> if the item was stored successfully.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.FetchAllHeadersAsync">
      <summary>Updates the item collection from the repository.</summary>
      <returns>Task which is fetching all the headers.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.FetchHeadersAsync(System.Int32,System.String[])">
      <summary>Returns the available items that best match the search strings.</summary>
      <param name="num">Maximum number of items to return. Defaults to <c>int.MaxValue</c> and returns all relevant items.</param>
      <param name="searchTerms">Strings to search for.</param>
      <returns>Items that match the given criteria.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Exists(System.String)">
      <summary>Verifies whether an item with the given identifier exists.</summary>
      <param name="id">Unique identifier of the item.</param>
      <returns>
        <c>true</c> if the item exists.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.GetInfo(System.String)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.HAL#Catalog#IRepository#GetInfo(System.String)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="id">Unique identifier of the item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.GetInfo(`0)">
      <summary>Retrieves a complete set of information about an item.</summary>
      <param name="item">Item to obtain more information about.</param>
      <returns>Complete set of information about the item.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.HAL#Catalog#IRepository#AddItem(HAL.Catalog.Items.CatalogItem)">
      <summary>Adds a single item.</summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.AddItem(`0)">
      <summary>Adds a single item.</summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.HAL#Catalog#IRepository#AddItems(System.Collections.Generic.List{HAL.Catalog.Items.CatalogItem})">
      <summary>Adds multiple items.</summary>
      <param name="items">Items to add.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.AddItems(System.Collections.Generic.List{`0})">
      <summary>Adds multiple items.</summary>
      <param name="items">Items to add.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.HAL#Catalog#IRepository#RemoveItem(HAL.Catalog.Items.CatalogItem)">
      <summary>Removes a single item.</summary>
      <param name="item">Item to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.RemoveItem(`0)">
      <summary>Removes a single item.</summary>
      <param name="item">Item to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.HAL#Catalog#IRepository#RemoveItems(System.Collections.Generic.List{HAL.Catalog.Items.CatalogItem})">
      <summary>Removes multiple items.</summary>
      <param name="items">Items to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.RemoveItems(System.Collections.Generic.List{`0})">
      <summary>Removes multiple items.</summary>
      <param name="items">Items to remove.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Load``1(System.String)">
      <summary>Loads the payload of the given item.</summary>
      <param name="itemId">Id of the item to load.</param>
      <returns>The item represented by the given catalog item.</returns>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Clear">
      <summary>Removes all items from the cache.</summary>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(System.String)">
      <summary>Indicates whether the current object is equal to the given string via its URI.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">A string to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(System.Uri)">
      <summary>Indicates whether the current object is equal to the given string via its URI.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">A Uri to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(HAL.Catalog.Repository{`0})">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(HAL.Catalog.IRepository)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.Repository`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Catalog.Version">
      <summary>Custom implementation of SemVer.</summary>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.String)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y-alpha</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
      <param name="releaseLabel">Single or dot ('.') separated prerelease label</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z-alpha.1.2</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
      <param name="releaseLabels">Release labels that have been split by the dot separator</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
      <param name="patch">x.y.Z</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z-alpha</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
      <param name="patch">x.y.Z</param>
      <param name="releaseLabel">Single or dot ('.') separated prerelease label</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z-alpha.1.2</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
      <param name="patch">x.y.Z</param>
      <param name="releaseLabels">Release labels that have been split by the dot separator</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z.R</summary>
      <param name="major">X.y.z.r</param>
      <param name="minor">x.Y.z.r</param>
      <param name="patch">x.y.Z.r</param>
      <param name="revision">x.y.z.R</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z.R-alpha.1.2</summary>
      <param name="major">X.y.z.r</param>
      <param name="minor">x.Y.z.r</param>
      <param name="patch">x.y.Z.r</param>
      <param name="revision">x.y.z.R</param>
      <param name="releaseLabel">Single or dot ('.') separated prerelease label</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> X.Y.Z.R-alpha.1.2</summary>
      <param name="major">X.y.z</param>
      <param name="minor">x.Y.z</param>
      <param name="patch">x.y.Z</param>
      <param name="revision">x.y.z.R</param>
      <param name="releaseLabels">Prerelease labels</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Version,System.String)">
      <summary>Internal constructor.</summary>
      <param name="version">Version</param>
      <param name="releaseLabel">Full release label</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Internal constructor.</summary>
      <param name="version">Version</param>
      <param name="releaseLabels">Release labels</param>
    </member>
    <member name="M:HAL.Catalog.Version.#ctor(HAL.Catalog.Version)">
      <summary>Creates a <see cref="T:HAL.Catalog.Version" /> from an existing <see cref="T:HAL.Catalog.Version" /></summary>
      <param name="version">Version to clone.</param>
    </member>
    <member name="P:HAL.Catalog.Version.Major">
      <summary>Major version X (X.y.z)</summary>
    </member>
    <member name="P:HAL.Catalog.Version.Minor">
      <summary>Minor version Y (x.Y.z)</summary>
    </member>
    <member name="P:HAL.Catalog.Version.Patch">
      <summary>Patch version Z (x.y.Z)</summary>
    </member>
    <member name="P:HAL.Catalog.Version.Revision">
      <summary>Revision version R (x.y.z.R)</summary>
    </member>
    <member name="P:HAL.Catalog.Version.ReleaseLabels">
      <summary>A collection of pre-release labels attached to the version.</summary>
    </member>
    <member name="P:HAL.Catalog.Version.Release">
      <summary>The full pre-release label for the version.</summary>
    </member>
    <member name="P:HAL.Catalog.Version.IsPrerelease">
      <summary>True if pre-release labels exist for the version.</summary>
    </member>
    <member name="M:HAL.Catalog.Version.ToString">
      <summary>Get the normalized string.</summary>
    </member>
    <member name="M:HAL.Catalog.Version.ToString(System.Int32)">
      <summary>Get the normalized string with an obligatory number of parts.</summary>
    </member>
    <member name="M:HAL.Catalog.Version.GetHashCode">
      <summary>Hash code</summary>
    </member>
    <member name="M:HAL.Catalog.Version.CompareTo(System.Object)">
      <summary>Object compare.</summary>
    </member>
    <member name="M:HAL.Catalog.Version.CompareTo(HAL.Catalog.Version)">
      <summary>Compare to another HAL_Version.</summary>
    </member>
    <member name="M:HAL.Catalog.Version.Equals(System.Object)">
      <summary>Equals</summary>
    </member>
    <member name="M:HAL.Catalog.Version.Equals(HAL.Catalog.Version)">
      <summary>Equals</summary>
    </member>
    <member name="M:HAL.Catalog.Version.op_Equality(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Equals</summary>
    </member>
    <member name="M:HAL.Catalog.Version.op_Inequality(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Not equal</summary>
    </member>
    <member name="M:HAL.Catalog.Version.op_LessThan(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Less than</summary>
    </member>
    <member name="M:HAL.Catalog.Version.op_LessThanOrEqual(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Less than or equal</summary>
    </member>
    <member name="M:HAL.Catalog.Version.op_GreaterThan(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Greater than</summary>
    </member>
    <member name="M:HAL.Catalog.Version.op_GreaterThanOrEqual(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Greater than or equal</summary>
    </member>
    <member name="M:HAL.Catalog.Version.Parse(System.String)">
      <summary>Parses the given value to interpret it as a <see cref="T:HAL.Catalog.Version" />.</summary>
      <param name="value">The value string to parse.</param>
      <returns>A <see cref="T:HAL.Catalog.Version" /> equivalent to the input string or null if no equivalence could be found.</returns>
    </member>
    <member name="M:HAL.Catalog.Version.TryParse(System.String,HAL.Catalog.Version@)">
      <summary>Parses the given value to interpret it as a <see cref="T:HAL.Catalog.Version" />.</summary>
      <param name="value">The value string to parse.</param>
      <param name="version">A <see cref="T:HAL.Catalog.Version" /> equivalent to the input string  or null if no equivalence could be found.</param>
      <returns>
        <c>true</c> if an equivalence between the string and a <see cref="T:HAL.Catalog.Version" /> was found, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(HAL.Catalog.Version)~NuGet.Versioning.SemanticVersion">
      <summary>Converts a <see cref="T:HAL.Catalog.Version" /> to a strict Semantic Version.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(NuGet.Versioning.SemanticVersion)~HAL.Catalog.Version">
      <summary>Converts a strict Semantic Version to a <see cref="T:HAL.Catalog.Version" />.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(HAL.Catalog.Version)~NuGet.Versioning.NuGetVersion">
      <summary>Converts a <see cref="T:HAL.Catalog.Version" /> to a complete NuGet Version.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(NuGet.Versioning.NuGetVersion)~HAL.Catalog.Version">
      <summary>Converts a complete NuGet Version to a <see cref="T:HAL.Catalog.Version" />.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(HAL.Catalog.Version)~NuGet.Protocol.Core.Types.VersionInfo">
      <summary>Converts a <see cref="T:HAL.Catalog.Version" /> to a complete NuGet Version.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(NuGet.Protocol.Core.Types.VersionInfo)~HAL.Catalog.Version">
      <summary>Converts a complete NuGet Version to a <see cref="T:HAL.Catalog.Version" />.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="M:HAL.Catalog.Version.op_Implicit(System.Version)~HAL.Catalog.Version">
      <summary>Converts a <see cref="T:System.Version" /> to a complete <see cref="T:HAL.Catalog.Version" />.</summary>
      <param name="existingVersion">The version to convert.</param>
    </member>
    <member name="T:HAL.Catalog.VersionComparer">
      <summary>Compares two <see cref="T:HAL.Catalog.Version" />s.</summary>
    </member>
    <member name="M:HAL.Catalog.VersionComparer.Equals(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Determines if both versions are equal.</summary>
    </member>
    <member name="M:HAL.Catalog.VersionComparer.CompareVersions(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Compares the given versions using the VersionComparison mode.</summary>
    </member>
    <member name="M:HAL.Catalog.VersionComparer.GetHashCode(HAL.Catalog.Version)">
      <summary>Gives a hash code based on the normalized version string.</summary>
    </member>
    <member name="M:HAL.Catalog.VersionComparer.Compare(HAL.Catalog.Version,HAL.Catalog.Version)">
      <summary>Compare versions.</summary>
    </member>
    <member name="F:HAL.Catalog.VersionComparer.Default">
      <summary>A default comparer that compares metadata as strings.</summary>
    </member>
    <member name="T:HAL.Collections.CollectionEvent">
      <summary>Extended <see cref="T:HAL.Events.Trigger" /> specific to observable collections.</summary>
    </member>
    <member name="T:HAL.Collections.CollectionEventArguments">
      <summary>Extension of the <see cref="T:HAL.Events.Arguments" /> class which carries information specific to changes in observable collections.</summary>
    </member>
    <member name="M:HAL.Collections.CollectionEventArguments.#ctor(HAL.Collections.CollectionOperation)">
      <summary>Base constructor for parameterless events.</summary>
      <param name="action">The nature of the change to the collection. See <see cref="T:HAL.Collections.CollectionOperation" /> for options.</param>
    </member>
    <member name="M:HAL.Collections.CollectionEventArguments.#ctor(HAL.Collections.CollectionOperation,System.Object)">
      <summary>Constructor with a single item for use when an object in the collection has been changed.</summary>
      <param name="action">The nature of the change to the collection. See <see cref="T:HAL.Collections.CollectionOperation" /> for options.</param>
      <param name="changedItem">The item that has been modified.</param>
    </member>
    <member name="M:HAL.Collections.CollectionEventArguments.#ctor(HAL.Collections.CollectionOperation,System.Collections.IList)">
      <summary>Constructor with a list of new items for mass addition.</summary>
      <param name="action">The nature of the change to the collection. See <see cref="T:HAL.Collections.CollectionOperation" /> for options.</param>
      <param name="newItems">The items that have been added.</param>
    </member>
    <member name="M:HAL.Collections.CollectionEventArguments.#ctor(HAL.Collections.CollectionOperation,System.Object,System.Object)">
      <summary>Constructor with a pair of objects for use when an item is replaced.</summary>
      <param name="action">The nature of the change to the collection. See <see cref="T:HAL.Collections.CollectionOperation" /> for options.</param>
      <param name="newItem">The item which is now in the collection.</param>
      <param name="oldItem">The item that is no longer in the collection.</param>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.Sender">
      <summary>The object that created the event.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.Action">
      <summary>The nature of the change to the collection. See <see cref="T:HAL.Collections.CollectionOperation" /> for options.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.NewItems">
      <summary>A list of items that are in the collection and have in some way been modified, generally added.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.OldItems">
      <summary>A list of items that are no longer in the collection have in some way been modified, generally removed or replaced.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.NewItem">
      <summary>An item that is in the collection and has in some way been modified, generally added.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.OldItem">
      <summary>An item that is no longer in the collection and has in some way been modified, generally removed.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.NewIndex">
      <summary>The new index of an item that has moved in the collection.</summary>
    </member>
    <member name="P:HAL.Collections.CollectionEventArguments.OldIndex">
      <summary>The old index of an item that has moved in the collection.</summary>
    </member>
    <member name="T:HAL.Collections.CollectionOperation">
      <summary>Collection modification options.</summary>
    </member>
    <member name="F:HAL.Collections.CollectionOperation.Add">
      <summary>One or more items were added to the collection.</summary>
    </member>
    <member name="F:HAL.Collections.CollectionOperation.Remove">
      <summary>One or more items were removed from the collection.</summary>
    </member>
    <member name="F:HAL.Collections.CollectionOperation.Replace">
      <summary>One or more items were replaced in the collection.</summary>
    </member>
    <member name="F:HAL.Collections.CollectionOperation.Move">
      <summary>One or more items were moved within the collection.</summary>
    </member>
    <member name="F:HAL.Collections.CollectionOperation.Reset">
      <summary>The content of the collection changed dramatically.</summary>
    </member>
    <member name="T:HAL.Collections.ObservableDictionary`2">
      <summary>Implementation of the <see cref="T:System.Collections.IDictionary" /> interface which calls events whenever a change is made.</summary>
      <typeparam name="TKey">The key type.</typeparam>
      <typeparam name="TValue">The value type.</typeparam>
    </member>
    <member name="P:HAL.Collections.ObservableDictionary`2.Dictionary">
      <summary>The underlying container for the data in the dictionary.</summary>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Copy constructor.</summary>
      <param name="dictionary">The dictionary to copy.</param>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Constructor with a custom <see cref="T:System.Collections.IEqualityComparer" /> implementation to use when comparing keys.</summary>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.#ctor(System.Int32)">
      <summary>Constructor with a defined initial capacity.</summary>
      <param name="capacity">The initial capacity.</param>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Copy constructor with a custom <see cref="T:System.Collections.IEqualityComparer" /> implementation to use when comparing keys.</summary>
      <param name="dictionary">The dictionary to copy.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Constructor with a defined initial capacity and a custom <see cref="T:System.Collections.IEqualityComparer" /> implementation to use when comparing keys.</summary>
      <param name="capacity">The initial capacity.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:HAL.Collections.ObservableDictionary`2.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:HAL.Collections.ObservableDictionary`2.Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:HAL.Collections.ObservableDictionary`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:HAL.Collections.ObservableDictionary`2.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:HAL.Collections.ObservableDictionary`2.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Adds an existing dictionary to this one.</summary>
      <param name="items">The items to add to this dictionary.</param>
    </member>
    <member name="F:HAL.Collections.ObservableDictionary`2.CollectionChanged">
      <summary>The event triggered when this collection changes.</summary>
    </member>
    <member name="F:HAL.Collections.ObservableDictionary`2.PropertyChanged">
      <summary> The event triggered when a property of this collection changes.</summary>
    </member>
    <member name="M:HAL.Collections.ObservableDictionary`2.OnPropertyChanged(System.String)">
      <summary>The method invoked when a property of this collection changes.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Events.Arguments">
      <summary>
        <see cref="T:HAL.Events.Trigger" /> arguments.</summary>
    </member>
    <member name="M:HAL.Events.Arguments.#ctor">
      <summary>Default <see cref="T:HAL.Events.Arguments" /> constructor.</summary>
    </member>
    <member name="M:HAL.Events.Arguments.#ctor(HAL.Identifier)">
      <summary>Creates a <see cref="T:HAL.Events.Arguments" /> with a given identifier.</summary>
      <param name="id">Arguments identifier.</param>
    </member>
    <member name="P:HAL.Events.Arguments.Identity">
      <summary>Identity of these <see cref="T:HAL.Events.Arguments" />.</summary>
    </member>
    <member name="T:HAL.Events.Listener">
      <summary>Combines <see cref="T:HAL.Events.Trigger" />s and the methods that they should trigger.</summary>
    </member>
    <member name="M:HAL.Events.Listener.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Events.Listener.#ctor(HAL.Events.Trigger)">
      <summary>Constructor with a defined event.</summary>
      <param name="e">The <see cref="T:HAL.Events.Trigger" /> that this <see cref="T:HAL.Events.Listener" /> listens to.</param>
    </member>
    <member name="M:HAL.Events.Listener.#ctor(HAL.Events.Trigger,HAL.Events.Trigger.Handler)">
      <summary> Constructor with a defined event and handler.</summary>
      <param name="e">The <see cref="T:HAL.Events.Trigger" /> that this <see cref="T:HAL.Events.Listener" /> listens to.</param>
      <param name="handler">The <see cref="T:HAL.Events.Trigger.Handler" /> that should be executed when the event triggers.</param>
    </member>
    <member name="P:HAL.Events.Listener.Event">
      <summary>The event that will trigger the handler.</summary>
    </member>
    <member name="P:HAL.Events.Listener.EventHandler">
      <summary>The delegate method that will be called upon the triggering of the event.</summary>
    </member>
    <member name="M:HAL.Events.Listener.Subscribe">
      <summary>Subscribes the existing handler to the existing event.</summary>
      <returns>Handler successfully subscribed to event.</returns>
    </member>
    <member name="M:HAL.Events.Listener.Subscribe(HAL.Events.Trigger,HAL.Events.Trigger.Handler)">
      <summary>Sets the Event of this to the given event and then subscribes the given handler to the event.</summary>
      <param name="e">The event.</param>
      <param name="method">The handler to be subscribed to the event.</param>
      <returns>Handler successfully subscribed to event.</returns>
    </member>
    <member name="M:HAL.Events.Listener.Subscribe(HAL.Events.Trigger.Handler)">
      <summary>Subscribes the given handler to the existing event.</summary>
      <param name="method">The handler to be subscribed to the event.</param>
      <returns>Handler successfully subscribed to event.</returns>
    </member>
    <member name="M:HAL.Events.Listener.Unsubscribe">
      <summary>Unsubscribes the existing handler to the existing event.</summary>
      <returns>Handler successfully unsubscribed from event.</returns>
    </member>
    <member name="M:HAL.Events.Listener.Unsubscribe(HAL.Events.Trigger.Handler)">
      <summary>Subscribes the given handler to the existing event.</summary>
      <param name="method">The handler to be subscribed to the event.</param>
      <returns>Handler successfully subscribed to event.</returns>
    </member>
    <member name="M:HAL.Events.Listener.Unsubscribe(HAL.Events.Trigger,HAL.Events.Trigger.Handler)">
      <summary>Unsubscribes the given handler from an event.</summary>
      <param name="e">The event.</param>
      <param name="method">The handler to be subscribed to the event.</param>
      <returns>Handler successfully subscribed to event.</returns>
    </member>
    <member name="T:HAL.Events.PropertyTrigger">
      <summary>Extension of the <see cref="T:HAL.Events.Trigger" /> class with additions for events created by properties changing.</summary>
    </member>
    <member name="T:HAL.Events.PropertyTriggerArguments">
      <summary>Arguments sent with a property changed event.</summary>
    </member>
    <member name="M:HAL.Events.PropertyTriggerArguments.#ctor(System.String)">
      <summary>Default constructor with the alias of the property that has changed.</summary>
      <param name="propertyAlias">The alias of the property that changed.</param>
    </member>
    <member name="P:HAL.Events.PropertyTriggerArguments.PropertyAlias">
      <summary>The alias of that property that has changed.</summary>
    </member>
    <member name="T:HAL.Events.Trigger">
      <summary>Wrapper class for an event and its handler.</summary>
    </member>
    <member name="E:HAL.Events.Trigger.Triggered">
      <summary>The event that will be triggered and should therefore be subscribed to.</summary>
    </member>
    <member name="P:HAL.Events.Trigger.EventInitialised">
      <summary>Checks whether the event is eligible to be triggered i.e. it has delegates subscribed to it and is therefore not null.</summary>
    </member>
    <member name="M:HAL.Events.Trigger.OnTriggered(System.Object,HAL.Events.Arguments)">
      <summary>Called when <see cref="E:HAL.Events.Trigger.Triggered" />.</summary>
      <param name="sender">The object that triggered the event.</param>
      <param name="e">The arguments of the event.</param>
      <returns>Successful execution of the delegate.</returns>
    </member>
    <member name="T:HAL.Graphs.IGraph">
      <summary>Qualifies a graph.</summary>
    </member>
    <member name="T:HAL.Graphs.IGraphConnection">
      <summary>Qualifies an edge linking two vertices of an <see cref="T:HAL.Graphs.IGraph" />.</summary>
    </member>
    <member name="P:HAL.Graphs.IGraphConnection.Ordinal">
      <summary>Index defining the position of this connection in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Graphs.IGraphConnection.IsDefaultRootConnection">
      <summary>Whether this is an automatically generated root connection.</summary>
    </member>
    <member name="T:HAL.Graphs.IGraphConnection`2">
      <summary>Qualifies an edge linking two vertices of an <see cref="T:HAL.Graphs.IGraph" />.</summary>
      <typeparam name="TVertex">Type of vertices linked by this connection.</typeparam>
      <typeparam name="TSelf">Type of this connection.</typeparam>
    </member>
    <member name="M:HAL.Graphs.IGraphConnection`2.CloneEdge">
      <summary>Clones this <see cref="T:HAL.Graphs.IGraphConnection" />.</summary>
      <returns>Cloned connection.</returns>
    </member>
    <member name="M:HAL.Graphs.IGraphConnection`2.CloneEdgeTo(`0,`0,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>Cloned connection between specified source and target vertices.</returns>
    </member>
    <member name="T:HAL.Graphs.IGraphItem">
      <summary>Qualifies a <see cref="T:HAL.Graphs.IGraph" /> vertex.</summary>
    </member>
    <member name="T:HAL.Graphs.IGraphItem`1">
      <summary>Qualifies a <see cref="T:HAL.Graphs.IGraph" /> vertex of a given type.</summary>
      <typeparam name="TSelf">Vertex type.</typeparam>
    </member>
    <member name="T:HAL.Helpers.AsyncHelpers">
      <summary>Helpers for asynchronous methods.</summary>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})">
      <summary>Execute's an async Task[T] method which has a void return value synchronously</summary>
      <param name="task">Task[T] method to execute</param>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary> Execute's an async Task[T] method which has a T return type synchronously </summary>
      <typeparam name="T">Return Type</typeparam>
      <param name="task">Task[T] method to execute</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.TryRunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary> Execute's an async Task[T] method which has a T return type synchronously </summary>
      <typeparam name="T">Return Type</typeparam>
      <param name="task">Task[T] method to execute</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.CompleteWith(System.Threading.Tasks.Task,System.Action,System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskScheduler)">
      <summary>Registers a UI thread handler for when the specified task successfully finishes execution.</summary>
      <param name="task">The task to monitor for successful completion.</param>
      <param name="action">The action to take when the task has successfully completed, in the context of the UI thread.</param>
      <param name="token">Cancellation token.</param>
      <param name="scheduler">The task scheduler to associate with the continuation task and to use for its execution. Leave empty to keep the current context scheduler.</param>
      <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.CompleteWith``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskScheduler)">
      <summary>Registers a UI thread handler for when the specified task successfully finishes execution and returns a result.</summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <param name="task">The task to monitor for successful completion.</param>
      <param name="action">The action to take when the task has successfully completed, in the context of the UI thread. The argument to the action is the return value of the task.</param>
      <param name="token">Cancellation token.</param>
      <param name="scheduler">The task scheduler to associate with the continuation task and to use for its execution. Leave empty to keep the current context scheduler.</param>
      <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.FailWith(System.Threading.Tasks.Task,System.Action{System.Exception},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskScheduler)">
      <summary>Registers a UI thread handler for when the specified task becomes faulted.</summary>
      <param name="task">The task to monitor for faulting.</param>
      <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
      <param name="token">Cancellation token.</param>
      <param name="scheduler">The task scheduler to associate with the continuation task and to use for its execution. Leave empty to keep the current context scheduler.</param>
      <returns>The continuation created to handle faulting. This is normally ignored.</returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.FailWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskScheduler)">
      <summary>Registers a UI thread handler for when the specified task becomes faulted.</summary>
      <param name="task">The task to monitor for faulting.</param>
      <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
      <param name="token">Cancellation token.</param>
      <param name="scheduler">The task scheduler to associate with the continuation task and to use for its execution. Leave empty to keep the current context scheduler.</param>
      <returns>The continuation created to handle faulting. This is normally ignored.</returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.CancelWith(System.Threading.Tasks.Task,System.Action,System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskScheduler)">
      <summary>Registers a UI thread handler for when the specified task is canceled.</summary>
      <param name="task">The task to monitor for cancellation.</param>
      <param name="action">The action to take when the task is canceled, in the context of the UI thread.</param>
      <param name="token">Cancellation token.</param>
      <param name="scheduler">The task scheduler to associate with the continuation task and to use for its execution. Leave empty to keep the current context scheduler.</param>
      <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
    </member>
    <member name="M:HAL.Helpers.AsyncHelpers.CancelWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskScheduler)">
      <summary>Registers a UI thread handler for when the specified task is canceled.</summary>
      <param name="task">The task to monitor for cancellation.</param>
      <param name="action">The action to take when the task is canceled, in the context of the UI thread.</param>
      <param name="token">Cancellation token.</param>
      <param name="scheduler">The task scheduler to associate with the continuation task and to use for its execution. Leave empty to keep the current context scheduler.</param>
      <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
    </member>
    <member name="T:HAL.Helpers.CollectionHelpers">
      <summary>Helper methods for manipulating collections.</summary>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.AddIfUnique``1(System.Collections.Generic.IList{``0},``0)">
      <summary>Adds an object to a <see cref="T:System.Collections.Generic.IList`1" /> if, and only if, it is not already contained in the list.</summary>
      <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> to add the item to.</param>
      <param name="item">The item to be added.</param>
      <typeparam name="T">The type of item contained in the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <returns>
        <c>true</c> if successful.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.GetPowerSet``1(System.Collections.Generic.IList{``0})">
      <summary>Gets the power set of a <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <typeparam name="T">Type of the <see cref="T:System.Collections.Generic.IList`1" /> items.</typeparam>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" /> from which to compute the power set.</param>
      <returns>Power set of the <see cref="T:System.Collections.Generic.IList`1" />, as the set of all the subsets of the <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.GetSimilarLength``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
      <summary>Forces a <see cref="T:System.Collections.Generic.List`1" /> to be of the same length than this <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="toMatch">
        <see cref="T:System.Collections.Generic.List`1" /> to match.</param>
      <param name="updated">
        <see cref="T:System.Collections.Generic.List`1" /> to modify.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> of similar length. If values were missing, the last one available was duplicated.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.CloneSimilarLength``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
      <summary>Forces a <see cref="T:System.Collections.Generic.List`1" /> to be cloned to the same length than this <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="toMatch">
        <see cref="T:System.Collections.Generic.List`1" /> to match.</param>
      <param name="updated">
        <see cref="T:System.Collections.Generic.List`1" /> to modify.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> of similar length. If values were missing, the last one available was cloned.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.ConcatUnique``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two enumerables by only adding items from the second that are not in the first.</summary>
      <param name="first">First enumerable.</param>
      <param name="second">Second enumerable.</param>
      <returns>Enumerable with all elements of first and those of second that were not already in first.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.ContentEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
      <summary>Equality test between two list of equatable items.</summary>
      <typeparam name="T">Item type.</typeparam>
      <param name="first">First list.</param>
      <param name="second">Second list.</param>
      <returns>Whether the first list content equals the second list content.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.ContentEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean})">
      <summary>Equality test between two list of equatable items.</summary>
      <typeparam name="T">Item type.</typeparam>
      <param name="first">First list.</param>
      <param name="second">Second list.</param>
      <param name="predicate">Compare function.</param>
      <returns>Whether the first list content equals the second list content.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.ContentEquals``1(``0[],``0[],System.Func{``0,``0,System.Boolean})">
      <summary>Equality test between two arrays of equatable items.</summary>
      <typeparam name="T">Item type.</typeparam>
      <param name="first">First array.</param>
      <param name="second">Second array.</param>
      <param name="predicate">Compare function.</param>
      <returns>Whether the first array content equals the second array content.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.ContentEquals(System.Collections.IList,System.Collections.IList)">
      <summary>Compares the content of two lists.</summary>
      <param name="compared">List to compare.</param>
      <param name="toCompareWith">Second list to compare with.</param>
      <returns>Whether both lists are similar.</returns>
    </member>
    <member name="M:HAL.Helpers.CollectionHelpers.GetNext``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean@,System.Boolean)">
      <summary>Returns the next item available in an indexed collection of items.</summary>
      <typeparam name="T">Item type.</typeparam>
      <param name="collection">Collection of items.</param>
      <param name="index">Current index from which the next item must be found.</param>
      <param name="reachedEnd">Whether the end of the collection was reached.</param>
      <param name="loop">Whether a looped indexing is tolerated. In this mode, the next item after the last item will be the first item.</param>
      <returns>Next item, if any.</returns>
    </member>
    <member name="T:HAL.Helpers.DebugHelpers">
      <summary>Debug helpers.</summary>
    </member>
    <member name="M:HAL.Helpers.DebugHelpers.WriteLine(System.Type,System.String,System.String)">
      <summary>Publishes an automatic call log in the debug console mentioning the method name and call origin.</summary>
      <param name="callingType">Calling type.</param>
      <param name="prefix">Prefix.</param>
      <param name="caller">Calling method.</param>
    </member>
    <member name="T:HAL.Helpers.DocumentationHelpers">
      <summary>Retrieves XML documentation from types and members.</summary>
    </member>
    <member name="M:HAL.Helpers.DocumentationHelpers.GetXmlDocumentation(System.Reflection.MemberInfo)">
      <summary>Retrieves the documentation of a specified member.</summary>
      <param name="member">Member to find in the documentation.</param>
      <returns>Content of the documentation for the member.</returns>
    </member>
    <member name="M:HAL.Helpers.DocumentationHelpers.GetXmlDocumentation(System.Reflection.MemberInfo,System.Xml.Linq.XDocument)">
      <summary>Retrieves the documentation of a specified member.</summary>
      <param name="member">Member to find in the documentation.</param>
      <param name="document">Documentation.</param>
      <returns>Content of the documentation for the member.</returns>
    </member>
    <member name="M:HAL.Helpers.DocumentationHelpers.GetXmlDocumentation(System.Reflection.ParameterInfo)">
      <summary>Retrieves the documentation of a specified parameter.</summary>
      <param name="parameter">Parameter or return value to find in the documentation.</param>
      <returns>Content of the documentation for the parameter.</returns>
    </member>
    <member name="M:HAL.Helpers.DocumentationHelpers.GetXmlDocumentation(System.Reflection.ParameterInfo,System.Xml.Linq.XDocument)">
      <summary>Retrieves the documentation of a specified parameter.</summary>
      <param name="parameter">Parameter or return value to find in the documentation.</param>
      <param name="document">Documentation.</param>
      <returns>Content of the documentation for the parameter.</returns>
    </member>
    <member name="T:HAL.Helpers.DynamicHelpers">
      <summary>Helper methods for manipulating dynamic objects.</summary>
    </member>
    <member name="M:HAL.Helpers.DynamicHelpers.TypeCast(System.Object,System.Type)">
      <summary>Casts an object to the type given.</summary>
      <param name="object">The object to be cast.</param>
      <param name="target">The type to which the object should be cast.</param>
      <returns>The object as a targetType if possible, null otherwise.</returns>
    </member>
    <member name="M:HAL.Helpers.DynamicHelpers.TryTypeCast(System.Object,System.Type,System.Object@)">
      <summary>Casts an object to the type given.</summary>
      <param name="object">The object to be cast.</param>
      <param name="target">The type to which the object should be cast.</param>
      <param name="result">The object as a targetType if possible, null otherwise.</param>
      <returns>
        <c>true</c> if the cast was successfully executed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Helpers.DynamicHelpers.Cast``1(System.Object)">
      <summary>Attempts an explicit conversion of an object to a specified type.</summary>
      <typeparam name="T">Target type.</typeparam>
      <param name="object">Object to be converted.</param>
      <returns>Converted object.</returns>
    </member>
    <member name="T:HAL.Helpers.HashCombiner">
      <summary>Combines the hashes of objects to create compound hashes.</summary>
    </member>
    <member name="P:HAL.Helpers.HashCombiner.CombinedHash">
      <summary>The complete hash of all the input values.</summary>
      <returns>An hash code for the collection of values added.</returns>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.Add(System.Collections.IEnumerable)">
      <summary>Adds a sequence of objects to this.</summary>
      <param name="objects">The sequence of objects to add.</param>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.op_Implicit(HAL.Helpers.HashCombiner)~System.Int32">
      <summary>Converts this to an integer by returning the complete hash of all the input values.</summary>
      <returns>An hash code for the collection of values added.</returns>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.Add(System.Int32)">
      <summary>Adds an integer to this combiner.</summary>
      <param name="integer">The integer to add.</param>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.Add(System.String)">
      <summary>Adds a string to this combiner.</summary>
      <param name="string">The string to add.</param>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.Add(System.Object)">
      <summary>Adds an object to this combiner.</summary>
      <param name="object">The object to add.</param>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.Add``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Adds an object of type TValue to this combiner with a custom comparer to get its individual hash code.</summary>
      <typeparam name="TValue">The type of object to add.</typeparam>
      <param name="value">The value to add.</param>
      <param name="comparer">The custom comparer which will generate the hash code for the value.</param>
    </member>
    <member name="M:HAL.Helpers.HashCombiner.Start">
      <summary>Default setup. Use to create a new <see cref="T:HAL.Helpers.HashCombiner" />.</summary>
      <returns>A fully initialized <see cref="T:HAL.Helpers.HashCombiner" />.</returns>
    </member>
    <member name="T:HAL.Helpers.NetworkHelpers">
      <summary>Helpers for network operations.</summary>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.IsNullable``1(``0)">
      <summary>Determines if an object is nullable.</summary>
      <typeparam name="T">Object type.</typeparam>
      <param name="obj">Object to analyze.</param>
      <returns>True if the object is nullable.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.IsNullable(System.Type)">
      <summary>Determines if a type is nullable.</summary>
      <param name="type">Type to analyze.</param>
      <returns>True if the type is nullable.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.GetImplementingTypes(System.Type,System.Reflection.Assembly)">
      <summary>Gets an IEnumerable of Type which contains all the Types which implement a given Type.</summary>
      <param name="type">Type to search for.</param>
      <param name="assembly">Assembly to search in.</param>
      <returns>Types which implement type.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.IsBasedOnGeneric(System.Type,System.Type)">
      <summary>Tests whether a type implements a specified generic type.</summary>
      <param name="toCheck">Type to test.</param>
      <param name="generic">Generic type.</param>
      <returns>Whether the type implements the generic type.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.GetItemType(System.Collections.IEnumerable,System.Type@)">
      <summary>Retrieves the item type of an enumerable collection.</summary>
      <param name="enumerable">Enumerable collection.</param>
      <param name="type">Enumerable collection type.</param>
      <returns>Item type. <see cref="T:System.Object" /> will be returned as default if the analysis fails.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.GetConstructableImplementingTypes(System.Type,System.Reflection.Assembly)">
      <summary>Gets an IEnumerable of Type which contains all the Types which implement a given Type and can be constructed i.e. are not interfaces or abstract etc.</summary>
      <param name="type">The type to search for.</param>
      <param name="assembly">Assembly to search in.</param>
      <returns>The Types which implement type and are constructible.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.GetFirstConstructableImplementingTypes(System.Type,System.Reflection.Assembly)">
      <summary>Gets an IEnumerable of Type which contains all the Types which implement a given Type and can be constructed i.e. are not interfaces or abstract etc.</summary>
      <param name="type">The type to search for.</param>
      <param name="assembly">Assembly to search in.</param>
      <returns>First detected type which implement type and are constructible, if any.</returns>
    </member>
    <member name="M:HAL.Helpers.ReflectionHelpers.SetPropertyAttributeField``1(System.Object,System.String,System.String,System.Object,System.Boolean)">
      <summary>Sets a field of an attribute placed on a property.</summary>
      <param name="instance">Instance in which the property should be searched.</param>
      <param name="propertyName">Property name.</param>
      <param name="attributeFieldName">Attribute field name.</param>
      <param name="value">Attribute field value.</param>
      <param name="silent">Whether this method should hide its exception and return silently.</param>
    </member>
    <member name="T:HAL.Helpers.SerializationHelpers">
      <summary>Helper methods for serializing and deserializing objects.</summary>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.AddConverter(Newtonsoft.Json.JsonConverter)">
      <summary>Adds a new converter to the default serialization settings.</summary>
      <param name="converter">Converter to be added.</param>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.RenameFile(System.String,System.String,System.String,System.String)">
      <summary>Renames a file.</summary>
      <param name="path">Path to existing file.</param>
      <param name="newName">New file name.</param>
      <param name="oldName">Old file name.</param>
      <param name="extension">File extension.</param>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeObject(System.String,System.String,System.Object,System.String)">
      <summary>Serializes an object as a JSON file at the specified location with default settings.</summary>
      <param name="name">File name.</param>
      <param name="folderPath">Path of the folder in which to store the file.</param>
      <param name="objectToSerialize">The object to serialize.</param>
      <param name="extension">Extension of the resulting file.</param>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeObject(System.Object)">
      <summary>Serializes and object.</summary>
      <param name="objectToSerialize">The object to serialize.</param>
      <returns>Resulting bytes.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeObjectToString(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>Serializes and object.</summary>
      <param name="objectToSerialize">The object to serialize.</param>
      <param name="serializationSettings">The serialization settings to be used during the serialization. Defaults will be used if null is provided.</param>
      <returns>Resulting string.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeAndCompressObject(System.String,System.String,System.Object,System.String)">
      <summary>Serializes an object as a JSON file at the specified location.</summary>
      <param name="name">File name.</param>
      <param name="folderPath">Path of the folder in which to store the file.</param>
      <param name="objectToSerialize">The object to serialize.</param>
      <param name="extension">Extension of the resulting file.</param>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.Deserialize``1(System.Byte[],Newtonsoft.Json.JsonSerializerSettings)">
      <summary>Deserializes data.</summary>
      <typeparam name="T">Desired output type.</typeparam>
      <param name="data">Data to deserialize.</param>
      <param name="deserializationSettings">The serialization settings to be used during the serialization. Defaults will be used if null is provided.</param>
      <returns>Deserialized object.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>Deserializes a JSON file to a generic type.</summary>
      <param name="path">Path of the file to deserialize.</param>
      <param name="deserializationSettings">The serialization settings to be used during the serialization. Defaults will be used if null is provided.</param>
      <returns>Deserialized object.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeJsonString``1(System.String)">
      <summary>Deserializes a JSON string to a generic type with default settings.</summary>
      <param name="text">Json string to deserialize.</param>
      <returns>Deserialized object.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeCompressedJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>Deserializes a JSON file to a generic type.</summary>
      <param name="path">Path of the file to deserialize.</param>
      <param name="deserializationSettings">The serialization settings to be used during the serialization. Defaults will be used if null is provided.</param>
      <returns>Deserialized object.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeCatalogItem(System.String,HAL.Catalog.Items.CatalogItem)">
      <summary>Serializes a component item at a specified path.</summary>
      <param name="path">Serialization path.</param>
      <param name="item">Item to be serialized.</param>
      <returns>
        <c>true</c>if the serialization of both the header and content file was successful.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeCatalogItem(System.String,HAL.Catalog.Items.CatalogItem,System.Byte[]@)">
      <summary>Serializes a component item at a specified path.</summary>
      <param name="path">Serialization path.</param>
      <param name="item">Item to be serialized.</param>
      <param name="data">Serialized data.</param>
      <returns>
        <c>true</c>if the serialization of both the header and content file was successful.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeCatalogItem``1(System.String)">
      <summary>Deserializes a catalog item file.</summary>
      <typeparam name="TItem">Item type.</typeparam>
      <param name="path">File path.</param>
      <returns>Deserialized value.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeCatalogItem(System.String)">
      <summary>Deserializes a catalog item file.</summary>
      <param name="path">File path.</param>
      <returns>Deserialized value.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeCatalogItem``2(System.String,``0,``1)">
      <summary>Serializes a component item and its value at a specified path.</summary>
      <typeparam name="TItem">Item type.</typeparam>
      <typeparam name="T">Value type.</typeparam>
      <param name="path">Serialization path.</param>
      <param name="item">Item to be serialized.</param>
      <param name="value">Item value.</param>
      <returns>
        <c>true</c>if the serialization of both the header and content file was successful.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeCatalogItemContent``2(``0,System.String)">
      <summary>Deserializes a catalog item file.</summary>
      <typeparam name="TItem">Item type.</typeparam>
      <typeparam name="T">Item content type.</typeparam>
      <param name="path">Location.</param>
      <param name="item">Item to deserialize.</param>
      <returns>Deserialized value.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeCatalogItem``2(System.String,``1@)">
      <summary>Deserializes a catalog item file.</summary>
      <typeparam name="TItem">Item type.</typeparam>
      <typeparam name="T">Item content type.</typeparam>
      <param name="path">File path.</param>
      <param name="content">Item content.</param>
      <returns>Deserialized value.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeCatalogItem``1(System.String,``0@)">
      <summary>Deserializes a catalog item file.</summary>
      <typeparam name="T">Item content type.</typeparam>
      <param name="path">File path.</param>
      <param name="content">Item content.</param>
      <returns>Deserialized value.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.SerializeInstallationConfiguration(System.String,HAL.Catalog.Extensions.HAL_InstallationConfiguration)">
      <summary>Serializes an installation configuration.</summary>
      <param name="path">Serialization path.</param>
      <param name="configuration">Configuration to be serialized.</param>
      <returns>
        <c>true</c>if the serialization of both the header and content file was successful.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.DeserializeInstallationConfiguration(System.String)">
      <summary>Deserializes an installation configuration.</summary>
      <param name="path">Configuration path.</param>
      <returns>Deserialized configuration.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.IsFileLocked(System.String)">
      <summary>Checks whether a file is currently locked by another process or program.</summary>
      <param name="file">File path.</param>
      <returns>Whether the file is locked.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.IsFileLocked(System.IO.FileInfo)">
      <summary>Checks whether a file is currently locked by another process or program.</summary>
      <param name="file">File path.</param>
      <returns>Whether the file is locked.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.GetInterfacesAndSelf(System.Type)">
      <summary>Get all interfaces implemented by the incoming type as well as the type itself if it is an interface.</summary>
      <param name="type">Type.</param>
      <returns>Interfaces implemented by the incoming type.</returns>
    </member>
    <member name="M:HAL.Helpers.SerializationHelpers.GetDictionaryKeyValueTypes(System.Type)">
      <summary>Gets the types of the Keys and Values of a Dictionary type.</summary>
      <param name="type">Dictionary type.</param>
      <returns>Key value pair with the types of the Keys and Values.</returns>
    </member>
    <member name="T:HAL.Helpers.StringConvention">
      <summary>Casing and string concatenation options. These can be combined but conflicting cases will override each other, and may produce unpredictable results.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Unset">
      <summary>Unset.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Upper">
      <summary>Refers to having all of the characters in a string in capitals e.g. <c>UPPER CASE LOOKS LIKE THIS</c>.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Lower">
      <summary>Refers to having all of the characters in a string in lower case e.g. <c>lower case looks like this</c>.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Sentence">
      <summary>Refers to having the first character of a string in capitals e.g. <c>Sentence case looks like this in London.</c></summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Start">
      <summary>Refers to having the first character of each word in a string in capitals e.g. <c>Start Case Looks Like This</c>. Sometimes also referred to as Title Case although Title Case sometimes maintains semantic rules e.g. non-capitalization of 'the' in English.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Concatenation">
      <summary>Refers to the concatenation of words by removing all spaces (' '), hyphens ('-') and underscores ('_') e.g. <c>Concatenationlookslikethis</c>.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Pascal">
      <summary>Refers to the concatenation of words by Capitalizing the first letter of each e.g. <c>PascalCaseLooksLikeThis</c>. Sometimes also referred to as Upper Camel Case.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Camel">
      <summary>Refers to the concatenation of words by Capitalizing the first letter of each bar the first letter which is kept small e.g. <c>camelCaseLooksLikeThis</c>. Sometimes also referred to as lower Camel Case.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Snake">
      <summary>Refers to the concatenation of words by replacing spaces (' ') and hyphens ('-')  with underscores ('_') e.g. <c>Snake_case_looks_like_this</c>.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Kebab">
      <summary> Refers to the concatenation of words by replacing spaces (' ') and underscores ('_') with hyphens ('-') e.g. <c>Kebab-case-looks-like-this</c>.</summary>
    </member>
    <member name="F:HAL.Helpers.StringConvention.Unconcatenate">
      <summary> Refers to the unconcatenation of words by replacing case changes with spaces e.g. <c>Unconcatenate Case Look Like This</c>.</summary>
    </member>
    <member name="T:HAL.Helpers.StringHelpers">
      <summary>Helper methods for manipulating strings.</summary>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToStringFromAlias(HAL.IIdentifiable,System.String,System.Boolean)">
      <summary>Generates a string representation for an identified object using its alias and type.</summary>
      <param name="objectToName">Object to extract a string description from.</param>
      <param name="typeName">Explicit type name to give to the object.</param>
      <param name="hideTypeIfNamed">If true, only keeps the alias of the object if it is valid.</param>
      <returns>Generated string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.TypeToString(System.Boolean,System.String,System.String)">
      <summary>Converts an object to a descriptive string in the {TypeName} ({Value}) format.</summary>
      <param name="isValid">Validity of the object.</param>
      <param name="typeName">Name of the object type.</param>
      <param name="value">Value to be displayed in the object description. If no value is passed, only the type will be displayed.</param>
      <returns>Object as a string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.RemoveHalPrefix(System.String)">
      <summary>Removes *_ prefix from a string.</summary>
      <param name="string">String to process.</param>
      <returns>Cleaned string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ApplyStringConvention(System.String,HAL.Helpers.StringConvention)">
      <summary>Changes the casing and spacing of a string.</summary>
      <param name="string">String to process.</param>
      <param name="convention">The convention to be applied to the string.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToUpperCase(System.String)">
      <summary>Changes the casing of a string to have all characters in capitals e.g. <c>UPPER CASE LOOKS LIKE THIS</c>.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToUpperCase(System.Object)">
      <summary>Changes the casing of the string representation of an object to have all characters in capitals e.g. <c>UPPER CASE LOOKS LIKE THIS</c>.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToLowerCase(System.String)">
      <summary>Changes the casing of a string to have all characters in lower case e.g. <c>lower case looks like this</c>.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToLowerCase(System.Object)">
      <summary>Changes the casing of the string representation of an object to have all characters in lower case e.g. <c>lower case looks like this</c>.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToSentenceCase(System.String)">
      <summary>Changes the casing of a string to have the first character of a string in capitals e.g. <c>Sentence case looks like this</c>.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToSentenceCase(System.Object)">
      <summary>Changes the casing of the string representation of an object to have the first character of a string in capitals e.g. <c>Sentence case looks like this</c>.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToStartCase(System.String)">
      <summary>Changes the casing of a string to have the first character of each word in a string in capitals e.g. <c>Start Case Looks Like This</c>. Sometimes also referred to as Title Case although Title Case sometimes maintains semantic rules e.g. non-capitalization of 'the' in English.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToStartCase(System.Object)">
      <summary>Changes the casing of the string representation of an object to have the first character of each word in a string in capitals e.g. <c>Start Case Looks Like This</c>. Sometimes also referred to as Title Case although Title Case sometimes maintains semantic rules e.g. non-capitalization of 'the' in English.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToPascalCase(System.String)">
      <summary>Changes the casing and spacing of a string through the concatenation of words by Capitalizing the first letter of each e.g. <c>PascalCaseLooksLikeThis</c>. Sometimes also referred to as Upper Camel Case.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToPascalCase(System.Object)">
      <summary>Changes the casing and spacing of the string representation of an object through the concatenation of words by Capitalizing the first letter of each e.g. <c>PascalCaseLooksLikeThis</c>. Sometimes also referred to as Upper Camel Case.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToCamelCase(System.String)">
      <summary>Changes the casing and spacing of a string through the concatenation of words by Capitalizing the first letter of each bar the first letter which is kept small e.g. <c>camelCaseLooksLikeThis</c>. Sometimes also referred to as lower Camel Case.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToCamelCase(System.Object)">
      <summary>Changes the casing and spacing of the string representation of an object through the concatenation of words by Capitalizing the first letter of each bar the first letter which is kept small e.g. <c>camelCaseLooksLikeThis</c>. Sometimes also referred to as lower Camel Case.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToConcatenated(System.String)">
      <summary>Refers to the concatenation of words by removing all spaces (' '), hyphens ('-') and underscores ('_') e.g. <c>Concatenationlookslikethis</c>.</summary>
      <param name="string">String to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ToConcatenated(System.Object)">
      <summary>Refers to the concatenation of words by removing all spaces (' '), hyphens ('-') and underscores ('_') e.g. <c>Concatenationlookslikethis</c>.</summary>
      <param name="obj">Object to process.</param>
      <returns>The reformatted string.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.FirstCharToUpper(System.String)">
      <summary>Converts the first character of a string to upper case.</summary>
      <param name="string">The string to be modified.</param>
      <returns>The original string with the first character in upper case.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.FirstCharToLower(System.String)">
      <summary>Converts the first character of a string to lower case.</summary>
      <param name="string">The string to be modified.</param>
      <returns>The original string with the first character in lower case.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.RemoveEscapedQuotes(System.String)">
      <summary>Removes extraneous escape characters from a string. These are occasionally added when converting verbatim strings back and forth.</summary>
      <param name="string">The string to be modified.</param>
      <returns>The original string with corrected escape sequences.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.GetDescription(System.Enum)">
      <summary>Retrieves the <see cref="T:HAL.Reflection.Attributes.EnumDescriptionAttribute" /> defined on an <see cref="T:System.Enum" /> variable. If the entry is not marked, a standard string representation will be returned. </summary>
      <param name="analyzed">The <see cref="T:System.Enum" /> whose description we're after.</param>
      <returns>String representation of the value.</returns>
    </member>
    <member name="M:HAL.Helpers.StringHelpers.ContainsChar(System.String,System.Char)">
      <summary>Tests whether a character is contained in a string.</summary>
      <param name="string">Containing string.</param>
      <param name="character">Character to test.</param>
      <returns>Whether the character was found.</returns>
    </member>
    <member name="T:HAL.ICloneable`1">
      <summary>Qualifies an object that can be cloned. A clone is defined as a shallow copy of the original object.</summary>
      <typeparam name="T">Clone type.</typeparam>
    </member>
    <member name="M:HAL.ICloneable`1.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Identified">
      <summary>Base implementation of <see cref="T:HAL.IIdentifiable" />.</summary>
    </member>
    <member name="M:HAL.Identified.#ctor">
      <summary>Creates an anonymous <see cref="T:HAL.Identified" /> object.</summary>
    </member>
    <member name="M:HAL.Identified.#ctor(System.String)">
      <summary>Creates an <see cref="T:HAL.Identified" /> object with a given alias.</summary>
      <param name="alias">Object alias.</param>
    </member>
    <member name="P:HAL.Identified.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="M:HAL.Identified.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Identified.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Identified.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Identified.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Identified.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.Identified" /> object.</summary>
    </member>
    <member name="T:HAL.Identifier">
      <summary>Generic identifier, enabling objects to be processed by HAL.</summary>
    </member>
    <member name="M:HAL.Identifier.#ctor(System.String)">
      <summary>New identifier with a specific alias.</summary>
      <param name="alias">Alias.</param>
    </member>
    <member name="M:HAL.Identifier.#ctor(System.String,System.Guid)">
      <summary>New identifier from scratch, using a specific alias and a specific GUID</summary>
      <param name="alias">Alias.</param>
      <param name="guid">GUID.</param>
    </member>
    <member name="P:HAL.Identifier.Alias">
      <summary>Alias.</summary>
    </member>
    <member name="P:HAL.Identifier.GUID">
      <summary>GUID.</summary>
    </member>
    <member name="M:HAL.Identifier.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>NAME:GUID</returns>
    </member>
    <member name="M:HAL.Identifier.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref alias="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Identifier.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:HAL.Identifier.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Identifier.Clone">
      <summary>Clones this identifier.</summary>
      <returns>Cloned identifier.</returns>
    </member>
    <member name="M:HAL.Identifier.Clone(System.Boolean)">
      <summary>Clones this identifier.</summary>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>Cloned identifier.</returns>
    </member>
    <member name="M:HAL.Identifier.op_Equality(HAL.Identifier,HAL.Identifier)">
      <summary>Indicates whether objects of the same type are equal.</summary>
      <returns>true if the two objects are equal otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:HAL.Identifier.op_Inequality(HAL.Identifier,HAL.Identifier)">
      <summary>Indicates whether objects of the same type are not equal.</summary>
      <returns>false if the two objects are equal otherwise, true.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="T:HAL.IFilterable`1">
      <summary>Qualifies a filterable object.</summary>
      <typeparam name="T">Filtering type.</typeparam>
    </member>
    <member name="M:HAL.IFilterable`1.Filter(`0)">
      <summary>Filters an object based on a specified input.</summary>
      <param name="input">Filtering input.</param>
      <returns>True if this object matches the filter predicate.</returns>
    </member>
    <member name="T:HAL.IFilterable">
      <summary>Qualifies a filterable object.</summary>
    </member>
    <member name="T:HAL.IIdentifiable">
      <summary>Qualifies an object that can be identified.</summary>
    </member>
    <member name="P:HAL.IIdentifiable.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="T:HAL.INested">
      <summary>Qualifies an object which can be nested,</summary>
    </member>
    <member name="M:HAL.INested.GetNestedItems">
      <summary>Retrieves items nested in this one.</summary>
      <returns>Nested items, if any.</returns>
    </member>
    <member name="T:HAL.ISortable`1">
      <summary>Qualifies a sortable object.</summary>
      <typeparam name="T">Type being sorted.</typeparam>
    </member>
    <member name="P:HAL.ISortable`1.Sort">
      <summary>Generates the sorting weight of this object.</summary>
    </member>
    <member name="T:HAL.ISortable">
      <summary>Qualifies a sortable object.</summary>
    </member>
    <member name="P:HAL.ISortable.SortingWeight">
      <summary>Sorting weight.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.BackgroundAttribute">
      <summary>Marks a method as eligible to run in a background thread.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.BackgroundAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Creates a background method attribute.</summary>
      <param name="workEnablingParameterName">Name of the boolean parameter toggling the background work execution.</param>
      <param name="cancellationTokenParameterName">Name of the cancellation token parameter.</param>
      <param name="progressReporterParameterName">Name of the progress reporter parameter.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.BackgroundAttribute.WorkEnablingParameterName">
      <summary>Name of the boolean parameter toggling the background work execution.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.BackgroundAttribute.CancellationTokenParameterName">
      <summary>Name of the cancellation token parameter.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.BackgroundAttribute.ProgressReporterParameterName">
      <summary>Name of the progress reporter parameter.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.CachedAttribute">
      <summary>Marks a class or method parameter as cached.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.DefaultAttribute">
      <summary>Marks a property with a default value.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.DefaultAttribute.#ctor(System.Object)">
      <summary>Creates a property default value attribute.</summary>
      <param name="value">Default value to be attached to this property.</param>
    </member>
    <member name="M:HAL.Reflection.Attributes.DefaultAttribute.#ctor(System.Type,System.String)">
      <summary>Creates a property default value attribute.</summary>
      <param name="type">Type containing the runtime default value retrieval method.</param>
      <param name="method">Name of the method to be invoked in order to retrieve the value.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.DefaultAttribute.Value">
      <summary>Parameter default value.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.DefaultAttribute.IsCompiled">
      <summary>Whether this attribute specifies a compiled default value.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.DefaultAttribute.MethodType">
      <summary>Type containing the runtime default value retrieval method.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.DefaultAttribute.MethodName">
      <summary>Name of the method to be invoked in order to retrieve the value.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.DefaultAttribute.Method">
      <summary>Method to retrieve the default value of the parameter.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.DefaultAttribute.ResolveDefaultValueMethod">
      <summary>Resolves the default value retrieval method.</summary>
      <returns>Whether the method was found.</returns>
    </member>
    <member name="M:HAL.Reflection.Attributes.DefaultAttribute.GetRuntimeDefaultValue(System.Object@)">
      <summary>Retrieves a default value a runtime using the specified retrieval method..</summary>
      <returns>Retrieved value.</returns>
    </member>
    <member name="T:HAL.Reflection.Attributes.EnumDescriptionAttribute">
      <summary>Marks an <see cref="T:System.Enum" /> entry with a <see cref="T:System.String" /> description retrievable via GetDescription().</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.EnumDescriptionAttribute.#ctor(System.String)">
      <summary>Describe.</summary>
      <param name="description">Description.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.EnumDescriptionAttribute.Description">
      <summary>Description.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.FromCatalogAttribute">
      <summary>Marks a property as retrieved from a preset catalog.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.FromCatalogAttribute.#ctor(System.String[])">
      <summary>Creates a property catalog preset fetcher attribute.</summary>
      <param name="tags">Tags to be used to pre-filter catalog results, if any.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.FromCatalogAttribute.Tags">
      <summary>Tags to be used to pre-filter catalog results, if any.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.FunctionAttribute">
      <summary>Marks a method as accessible from HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function description.</summary>
      <param name="id">Description identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="T:HAL.Reflection.Attributes.FunctionCategoryAttribute">
      <summary>Marks a method as accessible from HAL client user interfaces via a specific category.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionCategoryAttribute.#ctor(System.String)">
      <summary>Creates a new category attribute.</summary>
      <param name="id">Identity.</param>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionCategoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new category attribute.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="T:HAL.Reflection.Attributes.FunctionSetAttribute">
      <summary>Marks a method as accessible from HAL client user interfaces, as part of a set of similar methods.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionSetAttribute.#ctor(System.String)">
      <summary>Creates a new function set description.</summary>
      <param name="id">Description identity.</param>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionSetAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Creates a new function set description.</summary>
      <param name="id">Description identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
      <param name="parentId">Parent function set identity, if any.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.FunctionSetAttribute.Parent">
      <summary>Parent function set identity, if any.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.FunctionSubcategoryAttribute">
      <summary>Marks a method as accessible from HAL client user interfaces via a specific subcategory.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionSubcategoryAttribute.#ctor(System.String)">
      <summary>Creates a new subcategory attribute.</summary>
      <param name="id">Identity.</param>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionSubcategoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new subcategory attribute.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="T:HAL.Reflection.Attributes.FunctionSuiteAttribute">
      <summary>Marks a method as accessible from HAL client user interfaces, as part of a suite of related methods.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionSuiteAttribute.#ctor(System.String)">
      <summary>Creates a new function suite description.</summary>
      <param name="id">Description identity.</param>
    </member>
    <member name="M:HAL.Reflection.Attributes.FunctionSuiteAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function suite description.</summary>
      <param name="id">Description identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="T:HAL.Reflection.Attributes.HiddenAttribute">
      <summary>Marks a property as hidden.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.IdentifiableSignatureAttribute">
      <summary>Signature attribute.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.IdentifiableSignatureAttribute.#ctor(System.String)">
      <summary>Creates a new signature attribute.</summary>
      <param name="id">Identity.</param>
    </member>
    <member name="M:HAL.Reflection.Attributes.IdentifiableSignatureAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new signature attribute.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.IdentifiableSignatureAttribute.Id">
      <summary>Identity.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.IdentifiableSignatureAttribute.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:HAL.Reflection.Attributes.RenderedAttribute">
      <summary>Marks a property as rendered.</summary>
    </member>
    <member name="T:HAL.Reflection.Attributes.SignatureAttribute">
      <summary>Signature attribute.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.SignatureAttribute.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new signature attribute.</summary>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="P:HAL.Reflection.Attributes.SignatureAttribute.Name">
      <summary>Name.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.SignatureAttribute.Nickname">
      <summary>Nickname.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.SignatureAttribute.Description">
      <summary>Description.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.SignatureAttribute.Order">
      <summary>Order.</summary>
    </member>
    <member name="P:HAL.Reflection.Attributes.SignatureAttribute.Icon">
      <summary>Icon.</summary>
    </member>
    <member name="M:HAL.Reflection.Attributes.SignatureAttribute.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:HAL.Reflection.IIdentifiableSignature">
      <summary>Qualifies the identifiable signature of a UI-participating object.</summary>
    </member>
    <member name="P:HAL.Reflection.IIdentifiableSignature.Id">
      <summary>Identity.</summary>
    </member>
    <member name="T:HAL.Reflection.ISignature">
      <summary>Qualifies the signature of a UI-participating object.</summary>
    </member>
    <member name="P:HAL.Reflection.ISignature.Name">
      <summary>Name.</summary>
    </member>
    <member name="P:HAL.Reflection.ISignature.Nickname">
      <summary>Nickname.</summary>
    </member>
    <member name="P:HAL.Reflection.ISignature.Description">
      <summary>Description.</summary>
    </member>
    <member name="P:HAL.Reflection.ISignature.Order">
      <summary>Order.</summary>
    </member>
    <member name="P:HAL.Reflection.ISignature.Icon">
      <summary>Icon.</summary>
    </member>
    <member name="T:HAL.Resources.AlertTopics">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Argument">
      <summary>
              Looks up a localized string similar to Argument.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Configuration">
      <summary>
              Looks up a localized string similar to Configuration.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Control">
      <summary>
              Looks up a localized string similar to Control.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Hardware">
      <summary>
              Looks up a localized string similar to Hardware.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Licensing">
      <summary>
              Looks up a localized string similar to Licensing.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Linguistics">
      <summary>
              Looks up a localized string similar to Linguistics.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Modeling">
      <summary>
              Looks up a localized string similar to Modeling.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Motion">
      <summary>
              Looks up a localized string similar to Motion.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Operational">
      <summary>
              Looks up a localized string similar to Operational.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Operator">
      <summary>
              Looks up a localized string similar to Operator.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Process">
      <summary>
              Looks up a localized string similar to Process.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Program">
      <summary>
              Looks up a localized string similar to Program.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Signal">
      <summary>
              Looks up a localized string similar to Signal.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Simulation">
      <summary>
              Looks up a localized string similar to Simulation.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Solving">
      <summary>
              Looks up a localized string similar to Solving.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.System">
      <summary>
              Looks up a localized string similar to System.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.Unknown">
      <summary>
              Looks up a localized string similar to Unknown.
            </summary>
    </member>
    <member name="P:HAL.Resources.AlertTopics.User">
      <summary>
              Looks up a localized string similar to User.
            </summary>
    </member>
    <member name="T:HAL.Resources.Common">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.Common.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Common.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Common.RootAlias">
      <summary>
              Looks up a localized string similar to Root.
            </summary>
    </member>
    <member name="T:HAL.Resources.FileExt">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Controller">
      <summary>
              Looks up a localized string similar to controller.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.InstallerConfiguration">
      <summary>
              Looks up a localized string similar to config.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Language">
      <summary>
              Looks up a localized string similar to lang.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.LanguageComponent">
      <summary>
              Looks up a localized string similar to langcomp.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.LanguageSettings">
      <summary>
              Looks up a localized string similar to langsettings.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.License">
      <summary>
              Looks up a localized string similar to lic.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Log">
      <summary>
              Looks up a localized string similar to log.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Mechanism">
      <summary>
              Looks up a localized string similar to mecha.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Part">
      <summary>
              Looks up a localized string similar to part.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Payload">
      <summary>
              Looks up a localized string similar to haldata.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Procedure">
      <summary>
              Looks up a localized string similar to proc.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Sensor">
      <summary>
              Looks up a localized string similar to sensor.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Session">
      <summary>
              Looks up a localized string similar to hal.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.SessionSettings">
      <summary>
              Looks up a localized string similar to settings.
            </summary>
    </member>
    <member name="P:HAL.Resources.FileExt.Tag">
      <summary>
              Looks up a localized string similar to tag.
            </summary>
    </member>
    <member name="T:HAL.Resources.Folders">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Catalog">
      <summary>
              Looks up a localized string similar to Catalog.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Controllers">
      <summary>
              Looks up a localized string similar to Controllers.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Extensions">
      <summary>
              Looks up a localized string similar to Extensions.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Mechanisms">
      <summary>
              Looks up a localized string similar to Mechanisms.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Parts">
      <summary>
              Looks up a localized string similar to Parts.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Procedures">
      <summary>
              Looks up a localized string similar to Procedures.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Sensor">
      <summary>
              Looks up a localized string similar to Sensors.
            </summary>
    </member>
    <member name="P:HAL.Resources.Folders.Tags">
      <summary>
              Looks up a localized string similar to Tags.
            </summary>
    </member>
    <member name="T:HAL.Resources.HAL_InstallationPaths">
      <summary>Helpers for maintaining installation paths across platforms.</summary>
    </member>
    <member name="P:HAL.Resources.HAL_InstallationPaths.SharedInstallationFolder">
      <summary> Shared installation path. </summary>
    </member>
    <member name="P:HAL.Resources.HAL_InstallationPaths.UserInstallationFolder">
      <summary> User installation path. </summary>
    </member>
    <member name="P:HAL.Resources.HAL_InstallationPaths.ExtensionInstallationDirectory">
      <summary>Installation directory for extensions to the framework.</summary>
    </member>
    <member name="M:HAL.Resources.HAL_InstallationPaths.GetTemporaryDirectory">
      <summary>Installation directory for extensions to the framework.</summary>
    </member>
    <member name="M:HAL.Resources.HAL_InstallationPaths.GetUniqueTemporaryDirectory">
      <summary>Gets a unique subdirectory of the temporary directory.</summary>
    </member>
    <member name="P:HAL.Resources.HAL_InstallationPaths.ItemExtensions">
      <summary>The file extension options for all catalog items.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.Converter`2">
      <summary>Converts a HAL item to/from another compatible item.</summary>
      <typeparam name="THAL">HAL type. </typeparam>
      <typeparam name="T">Compatible type. </typeparam>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.#ctor">
      <summary>Creates a converter.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.Converter`2.CanConvertTo">
      <summary>Indicates if this converter can convert to a HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.Converter`2.CanConvertFrom">
      <summary>Indicates if this converter can convert from a HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.Converter`2.HalType">
      <summary>HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.Converter`2.ConvertedType">
      <summary>Converted type.</summary>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.Convert(System.Object,System.Object@,System.Boolean)">
      <summary>Converts an object using this converter.</summary>
      <param name="item">Item to convert.</param>
      <param name="result">Converted item if successful, original item otherwise.</param>
      <param name="toHAL">Whether the conversion should be attempted to HAL types or from HAL types.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.ToHAL(`1)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <remarks> For better performances, it is usually better to call the To static method. </remarks>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.FromHAL(`0)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <remarks> For better performances, it is usually better to call the From static method. </remarks>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.InstanceTo(System.Object)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.InstanceFrom(System.Object)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.To(System.Object,System.Type)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <param name="itemType">Item type.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.From(System.Object,System.Type)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <param name="itemType">Item type.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.To(System.Object)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.Converter`2.From(System.Object)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="T:HAL.Runtime.Converters.ConverterManager">
      <summary>Helper class maintaining compatibility between HAL types and client types.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.ConverterManager.ConverterTypes">
      <summary>Registered types of converters.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.ConverterManager.To">
      <summary>Enumerates supported conversions to HAL types.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.ConverterManager.From">
      <summary>Enumerates supported conversions from HAL types.</summary>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.Add(System.Type)">
      <summary>Initializes a converter instance from its type, and adds it to the converter manager.</summary>
      <param name="converterType">Converter type.</param>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.Add(HAL.Runtime.Converters.IConverter)">
      <summary>Adds a converter.</summary>
      <param name="converter">Converter to be added.</param>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.Remove(HAL.Runtime.Converters.IConverter)">
      <summary>Removes a converter.</summary>
      <param name="converter">Converter to be removed.</param>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.Convert(System.Object,System.Object@,HAL.Runtime.Converters.IConverter@,System.Boolean,System.Reflection.TypeInfo,System.Boolean)">
      <summary>Attempts to convert an item using available converters.</summary>
      <param name="item">Item to convert.</param>
      <param name="converted">Converted item if successful, original item otherwise.</param>
      <param name="converter">Successful converter, if any.</param>
      <param name="toHAL">If true, forces conversion to HAL types. Forces conversion from HAL types otherwise.</param>
      <param name="hint">Desired type hint.</param>
      <param name="updateHint">Whether the hint type should be updated to attempt to simply the conversion. The original hint type will be kept otherwise.</param>
      <returns>Whether the conversion was successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.UpdateHint(System.Reflection.TypeInfo)">
      <summary>Hint conversion, called before first conversion attempts. </summary>
      <param name="hint">Current hint type.</param>
      <returns>Modified hint type.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.CustomConverter(System.Object@,System.Object@,HAL.Runtime.Converters.IConverter@,System.Boolean,System.Type@,System.Reflection.TypeInfo@)">
      <summary>Attempts to convert an item using a custom conversion strategy. This method is called in the last attempt to convert the item before using <see cref="M:HAL.Runtime.Converters.ConverterManager.ConvertFromBaseTypes(System.Object,System.Object@,HAL.Runtime.Converters.IConverter@,System.Boolean,System.Type,System.Reflection.TypeInfo)" />.</summary>
      <param name="item">Item to convert.</param>
      <param name="converted">Converted item if successful, original item otherwise.</param>
      <param name="converter">Successful converter, if any.</param>
      <param name="toHAL">If true, forces conversion to HAL types. Forces conversion from HAL types otherwise.</param>
      <param name="from">Type from which to start the conversion.</param>
      <param name="hint">Desired type hint.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.ConvertFromBaseTypes(System.Object,System.Object@,HAL.Runtime.Converters.IConverter@,System.Boolean,System.Type,System.Reflection.TypeInfo)">
      <summary>Attempts to convert an item recursively on its base types using available converters.</summary>
      <param name="item">Item to convert.</param>
      <param name="converted">Converted item if successful, original item otherwise.</param>
      <param name="converter">Successful converter, if any.</param>
      <param name="toHAL">If true, forces conversion to HAL types. Forces conversion from HAL types otherwise.</param>
      <param name="from">Type from which to start the conversion.</param>
      <param name="hint">Desired type hint.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.ConvertToEnum(System.Object,System.Object@,System.Reflection.TypeInfo)">
      <summary>Attempts to convert an item to a specified <see cref="T:System.Enum" /> type.</summary>
      <param name="item">Item to convert.</param>
      <param name="converted">Converted item if successful, original item otherwise.</param>
      <param name="hint">Desired type hint.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.ConverterManager.DoConvert(System.Object,System.Type,System.Object@,HAL.Runtime.Converters.IConverter@,System.Boolean,System.Type)">
      <summary>Attempts to convert an item using available converters.</summary>
      <param name="item">Item to convert.</param>
      <param name="from">Type from which to start the conversion.</param>
      <param name="converted">Converted item if successful, original item otherwise.</param>
      <param name="converter">Successful converter, if any.</param>
      <param name="toHAL">If true, forces conversion to HAL types. Forces conversion from HAL types otherwise.</param>
      <param name="hint">Desired type hint.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.Runtime.Converters.IConverter">
      <summary>Qualifies a type converter between a HAL type and another compatible type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.IConverter.CanConvertTo">
      <summary>Indicates if this converter can convert to a HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.IConverter.CanConvertFrom">
      <summary>Indicates if this converter can convert from a HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.IConverter.HalType">
      <summary>HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.IConverter.ConvertedType">
      <summary>Converted type.</summary>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverter.Convert(System.Object,System.Object@,System.Boolean)">
      <summary>Converts an object using this converter.</summary>
      <param name="item">Item to convert.</param>
      <param name="result">Converted item if successful, original item otherwise.</param>
      <param name="toHAL">Whether the conversion should be attempted to HAL types or from HAL types.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.Runtime.Converters.IConverter`2">
      <summary>Converts a HAL item to/from another compatible item.</summary>
      <typeparam name="THAL">HAL type. </typeparam>
      <typeparam name="T">Compatible type. </typeparam>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverter`2.InstanceTo(System.Object)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverter`2.InstanceFrom(System.Object)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverter`2.ToHAL(`1)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverter`2.FromHAL(`0)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="T:HAL.Runtime.Converters.IConverterManager">
      <summary>Qualifies a class maintaining compatibility between HAL types and client types.</summary>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverterManager.Add(System.Type)">
      <summary>Initializes a converter instance from its type, and adds it to the converter manager.</summary>
      <param name="converterType">Converter type.</param>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverterManager.Remove(HAL.Runtime.Converters.IConverter)">
      <summary>Removes a converter.</summary>
      <param name="converter">Converter to be removed.</param>
    </member>
    <member name="M:HAL.Runtime.Converters.IConverterManager.Convert(System.Object,System.Object@,HAL.Runtime.Converters.IConverter@,System.Boolean,System.Reflection.TypeInfo,System.Boolean)">
      <summary>Attempts to convert an item using available converters.</summary>
      <param name="item">Item to convert.</param>
      <param name="converted">Converted item if successful, original item otherwise.</param>
      <param name="converter">Successful converter, if any.</param>
      <param name="toHAL">If true, forces conversion to HAL types. Forces conversion from HAL types otherwise.</param>
      <param name="hint">Desired type hint.</param>
      <param name="updateHint">Whether the hint type should be updated to attempt to simply the conversion. The original hint type will be kept otherwise.</param>
      <returns>Whether the conversion was successful.</returns>
    </member>
    <member name="T:HAL.Runtime.Converters.NeutralConverter`1">
      <summary>Neutral converter.</summary>
      <typeparam name="T">Type not necessitating conversion. </typeparam>
    </member>
    <member name="P:HAL.Runtime.Converters.NeutralConverter`1.CanConvertTo">
      <summary>Indicates if this converter can convert to a HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.NeutralConverter`1.CanConvertFrom">
      <summary>Indicates if this converter can convert from a HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.NeutralConverter`1.HalType">
      <summary>HAL type.</summary>
    </member>
    <member name="P:HAL.Runtime.Converters.NeutralConverter`1.ConvertedType">
      <summary>Converted type.</summary>
    </member>
    <member name="M:HAL.Runtime.Converters.NeutralConverter`1.Convert(System.Object,System.Object@,System.Boolean)">
      <summary>Converts an object using this converter.</summary>
      <param name="item">Item to convert.</param>
      <param name="result">Converted item if successful, original item otherwise.</param>
      <param name="toHAL">Whether the conversion should be attempted to HAL types or from HAL types.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.NeutralConverter`1.InstanceTo(System.Object)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.NeutralConverter`1.InstanceFrom(System.Object)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.NeutralConverter`1.ToHAL(`0)">
      <summary>Converts an item to a compatible HAL item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="M:HAL.Runtime.Converters.NeutralConverter`1.FromHAL(`0)">
      <summary>Converts a HAL item to a compatible item.</summary>
      <param name="item">Item to convert.</param>
      <returns>Converted item.</returns>
    </member>
    <member name="T:HAL.Runtime.Converters.BooleanConverter">
      <summary>Boolean converter.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.DateTimeConverter">
      <summary>DateTime converter.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.DoubleConverter">
      <summary>Double converter.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.GuidConverter">
      <summary>GUID converter.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.ObjectConverter">
      <summary>Object converter.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.IntegerConverter">
      <summary>Integer converter.</summary>
    </member>
    <member name="T:HAL.Runtime.Converters.StringConverter">
      <summary>String converter.</summary>
    </member>
    <member name="T:HAL.SettingsBase">
      <summary>Base settings class to be derived for specific settings groups.</summary>
    </member>
    <member name="M:HAL.SettingsBase.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:HAL.SettingsBase.#ctor(HAL.SettingsBase)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to be cloned.</param>
    </member>
    <member name="M:HAL.SettingsBase.#ctor(HAL.Identifier)">
      <summary>Identified constructor.</summary>
      <param name="identifier">Identifier.</param>
    </member>
    <member name="P:HAL.SettingsBase.Identity">
      <inheritdoc />
    </member>
    <member name="P:HAL.SettingsBase.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="P:HAL.SettingsBase.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="E:HAL.SettingsBase.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.SettingsBase.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.SettingsBase.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.SettingsBase.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.SettingsBase.Equals(HAL.SettingsBase)">
      <inheritdoc />
    </member>
    <member name="M:HAL.SettingsBase.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.SettingsBase.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:HAL.Tasks.BackgroundProgress">
      <summary>Background task progress.</summary>
    </member>
    <member name="M:HAL.Tasks.BackgroundProgress.#ctor">
      <summary>Creates a new normalized progress reporter.</summary>
    </member>
    <member name="M:HAL.Tasks.BackgroundProgress.ReportProgress(System.Double)">
      <summary>Reports a progress change.</summary>
      <param name="progressIncrement">The value of the updated progress.</param>
    </member>
    <member name="T:HAL.Tasks.MultiStageProgress">
      <summary>Base implementation of a multi-stage progress reporter.</summary>
    </member>
    <member name="M:HAL.Tasks.MultiStageProgress.#ctor(HAL.Identifier)">
      <summary>Creates a new multi-stage progress reporter.</summary>
    </member>
    <member name="T:HAL.Tasks.NormalizedProgress">
      <summary>Base implementation of a normalized progress reporter.</summary>
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.#ctor(HAL.Identifier,System.Double,System.Double)">
      <summary>Creates a new normalized progress reporter.</summary>
      <param name="identity">Progress identity.</param>
      <param name="window">Total progress window.</param>
      <param name="value">Initial progress value.</param>
    </member>
    <member name="P:HAL.Tasks.NormalizedProgress.Identity">
      <summary>Progress identity.</summary>
    </member>
    <member name="P:HAL.Tasks.NormalizedProgress.Value">
      <summary>Current progress value.</summary>
    </member>
    <member name="P:HAL.Tasks.NormalizedProgress.Window">
      <summary>Total progress window.</summary>
    </member>
    <member name="P:HAL.Tasks.NormalizedProgress.Progress">
      <summary>Normalized progress.</summary>
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.Reset">
      <summary>Resets the progress to 0.</summary>
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.ResizeWindow(System.Double)">
      <summary>Resizes the progress window to a specified value.</summary>
      <param name="window">New progress window.</param>
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.Report(System.Double)">
      <summary>Reports a progress change.</summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.OnReport(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Tasks.NormalizedProgress.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:HAL.Web.API">
      <summary>Collection of methods that interact with the web server via its API.</summary>
    </member>
    <member name="P:HAL.Web.API.CurrentUser">
      <summary>If a user has been authenticated, this contains their current information.</summary>
    </member>
    <member name="P:HAL.Web.API.LastResponse">
      <summary>Last status code received from a message sent through this API.</summary>
    </member>
    <member name="M:HAL.Web.API.#cctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Web.API.AuthenticateUserAsync(System.String,System.String,System.Boolean)">
      <summary>Authenticates a user on the server.</summary>
      <param name="email">The user's email address.</param>
      <param name="password">The user's password.</param>
      <param name="rememberMe">If <c>true</c> a refresh token will be issued to keep the user logged in for longer.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and the user that has been authenticated.</returns>
    </member>
    <member name="M:HAL.Web.API.AuthenticateUserAsync(HAL.Web.User.IVM_SecureLogin)">
      <summary>Authenticates a user on the server.</summary>
      <param name="model">The details to be used to attempt to authenticate the user.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and the user that has been authenticated.</returns>
    </member>
    <member name="M:HAL.Web.API.AuthenticateUserAsync(HAL.Web.User.IVM_Login)">
      <summary>Authenticates a user on the server.</summary>
      <param name="model">The details to be used to attempt to authenticate the user.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and the user that has been authenticated.</returns>
    </member>
    <member name="M:HAL.Web.API.LogOutAsync">
      <summary>Logs the current user out.</summary>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and an informational message.</returns>
    </member>
    <member name="M:HAL.Web.API.RegisterUserAsync(HAL.Web.User.VM_Register)">
      <summary>Registers the given user.</summary>
      <param name="model">The model of the user to register.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and an informational message.</returns>
    </member>
    <member name="M:HAL.Web.API.GetProfileAsync">
      <summary>Gets the publicly available details of the current user.</summary>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and the user's details.</returns>
    </member>
    <member name="M:HAL.Web.API.CheckOutLicenseAsync(HAL.Web.User.VM_CheckOut)">
      <summary>Checks out a license for a given period of time and locks it on the server.</summary>
      <param name="model">The details to submit to the server.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and an informational message.</returns>
    </member>
    <member name="M:HAL.Web.API.CheckInLicenseAsync(HAL.Web.User.VM_CheckIn)">
      <summary>Checks in a license that has been previously checked out and unlocks it on the server.</summary>
      <param name="model">The details to submit to the server.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and an informational message.</returns>
    </member>
    <member name="M:HAL.Web.API.ReleaseAllLicensesAsync">
      <summary>Checks in all license that are currently in use on this machine and unlocks them on the server.</summary>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and an informational message.</returns>
    </member>
    <member name="M:HAL.Web.API.PostOAuth``1(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Posts an http request with a set of key value pairs to the server as x-www-form-urlencoded data as per the OAuth specification.</summary>
      <typeparam name="T">The type of data to receive from the server.</typeparam>
      <param name="endpoint">The server endpoint that the request should be sent to.</param>
      <param name="payload">The data to post.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and a second requested element in a tuple.</returns>
    </member>
    <member name="M:HAL.Web.API.Post``1(System.String,System.String)">
      <summary>Posts an http request with a string content.</summary>
      <typeparam name="T">The type of data to receive from the server.</typeparam>
      <param name="endpoint">The server endpoint that the request should be sent to.</param>
      <param name="payload">The data to post.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and a second requested element in a tuple.</returns>
    </member>
    <member name="M:HAL.Web.API.Post``1(System.String,System.Object)">
      <summary>Posts an http request with a string content.</summary>
      <typeparam name="T">The type of data to receive from the server.</typeparam>
      <param name="endpoint">The server endpoint that the request should be sent to.</param>
      <param name="payload">The data to post.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and a payload</returns>
    </member>
    <member name="M:HAL.Web.API.Get``1(System.String)">
      <summary>Sends an http Get request to the server.</summary>
      <typeparam name="T">The type of data to receive from the server.</typeparam>
      <param name="endpoint">The server endpoint that the request should be sent to.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and a payload.</returns>
    </member>
    <member name="M:HAL.Web.API.RequestAndParse``1(System.Net.Http.HttpRequestMessage)">
      <summary>Sends an http request to the server.</summary>
      <typeparam name="T">The type of data to receive from the server.</typeparam>
      <param name="request">The request to send.</param>
      <returns>
        <see cref="F:System.Net.HttpStatusCode.OK" /> if everything went smoothly and a payload.</returns>
    </member>
    <member name="T:HAL.Web.Content.DebugLogger">
      <summary>NuGet compatible logger.</summary>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogDebug(System.String)">
      <summary>Logs a debug message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogVerbose(System.String)">
      <summary>Logs a verbose level message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogInformation(System.String)">
      <summary>Logs an informational message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogMinimal(System.String)">
      <summary>Logs a minimal level message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogWarning(System.String)">
      <summary>Logs a warning message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogError(System.String)">
      <summary>Logs an error message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogInformationSummary(System.String)">
      <summary>Logs an information summary message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.Log(NuGet.Common.LogLevel,System.String)">
      <summary>Logs a message.</summary>
      <param name="level">Level of message severity.</param>
      <param name="data">Data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogAsync(NuGet.Common.LogLevel,System.String)">
      <summary>Logs a message asynchronously.</summary>
      <param name="level">Level of message severity.</param>
      <param name="data">Data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.Log(NuGet.Common.ILogMessage)">
      <summary>Logs a message.</summary>
      <param name="message">Message to log.</param>
    </member>
    <member name="M:HAL.Web.Content.DebugLogger.LogAsync(NuGet.Common.ILogMessage)">
      <summary>Logs a message asynchronously.</summary>
      <param name="message">Message to log.</param>
    </member>
    <member name="T:HAL.Web.Content.NuGetUrlBuilder">
      <summary>Utility class for manipulating MyGet URLs.</summary>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.#ctor(System.String)">
      <summary>Creates a builder from a source string.</summary>
      <param name="source">The source string as given by MyGet, including index.json or api/v2.</param>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.GetNuGetPushUrl">
      <summary>Gets the URL to push packages to.</summary>
      <returns>The MyGet push URL.</returns>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.GetSymbolsUrl(NuGet.Packaging.Core.PackageIdentity)">
      <summary>Gets the URL to push symbols packages to.</summary>
      <returns>The MyGet symbols URL.</returns>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.IsHttpUrl(System.String)">
      <summary>Verifies whether a source is an http URL.</summary>
      <param name="source">Source URL.</param>
      <returns>
        <c>true</c> if the source is a valid http URL.</returns>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.IsMyGetUrl(System.String)">
      <summary>Verifies whether a source is a myget compatible URL.</summary>
      <param name="source">Source URL.</param>
      <returns>
        <c>true</c> if the source is a valid myget URL.</returns>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.IsNuGetOrgUrl(System.String)">
      <summary>Verifies whether a source is a nuget compatible URL.</summary>
      <param name="source">Source URL.</param>
      <returns>
        <c>true</c> if the source is a valid nuget URL.</returns>
    </member>
    <member name="M:HAL.Web.Content.NuGetUrlBuilder.IsVSTSUrl(System.String)">
      <summary>Verifies whether a source is a VSTS compatible URL.</summary>
      <param name="source">Source URL.</param>
      <returns>
        <c>true</c> if the source is a valid VSTS URL.</returns>
    </member>
    <member name="T:HAL.Web.Content.PackageEnumerator`1">
      <summary>Enumerates packages in a NuGet repository.</summary>
    </member>
    <member name="M:HAL.Web.Content.PackageEnumerator`1.#ctor(NuGet.Protocol.Core.Types.PackageSearchResource,NuGet.Common.ILogger)">
      <summary>Enumerates packages in a given search location.</summary>
      <param name="packageSearchResource">The resource in which to search.</param>
      <param name="logger">The logger.</param>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumerator`1.NumResultsPerPage">
      <summary>Number of results to return per cycle.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumerator`1.TypeFilter">
      <summary>Type of result to return.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumerator`1.SearchTerm">
      <summary>Term to search for.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumerator`1.IncludePrerelease">
      <summary>Whether this should return pre-release packages as well as release packages. Defaults to <c>false</c>.</summary>
    </member>
    <member name="M:HAL.Web.Content.PackageEnumerator`1.Reset">
      <summary>Resets all of the settings in this enumerator to ready it for a new search.</summary>
    </member>
    <member name="M:HAL.Web.Content.PackageEnumerator`1.GetInitialResult">
      <summary>Initializes a the package enumeration token with the current settings.</summary>
      <returns>Initial result.</returns>
    </member>
    <member name="M:HAL.Web.Content.PackageEnumerator`1.GetPageAsync(HAL.Web.Content.PackageEnumeratorContinuationToken,System.Threading.CancellationToken)">
      <summary>Asynchronously gets a page of results from an ongoing search.</summary>
      <param name="continuationToken">The existing token generated by the previous search result.</param>
      <param name="token">A token to allow the cancellation of this search.</param>
      <returns>Next page of results.</returns>
    </member>
    <member name="T:HAL.Web.Content.PackageEnumeratorContinuationToken">
      <summary>A token enabling the continuation of a partially completed search.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorContinuationToken.SearchTerm">
      <summary>The term that has been searched for.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorContinuationToken.SearchFilters">
      <summary>The filters used in the search.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorContinuationToken.Skip">
      <summary>The number of results that have already been found and should therefore be skipped in the next search.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorContinuationToken.Take">
      <summary>The number of results to be collected in the next search.</summary>
    </member>
    <member name="T:HAL.Web.Content.PackageEnumeratorResult`1">
      <summary>Stores the result of a NuGet package enumeration.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorResult`1.HasMoreResults">
      <summary>Indicates whether the enumerator that generated this result has more results to enumerate.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorResult`1.ContinuationToken">
      <summary>The token to allow the enumerator to continue from where this result left off.</summary>
    </member>
    <member name="P:HAL.Web.Content.PackageEnumeratorResult`1.ItemIdentities">
      <summary>The identities found in this enumeration.</summary>
    </member>
    <member name="T:HAL.Web.Content.PackagePusher">
      <summary>Helper class to facilitate the pushing of packages to a NuGet repository.</summary>
    </member>
    <member name="M:HAL.Web.Content.PackagePusher.#ctor(System.String,NuGet.Common.ILogger)">
      <summary>Creates a package pusher.</summary>
      <param name="pushUrl">The full URL of the server to push the packages to.</param>
      <param name="logger">The logger.</param>
    </member>
    <member name="M:HAL.Web.Content.PackagePusher.PushAsync(System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously pushes a package to the destination in this pusher.</summary>
      <param name="packagePath">The path of the package to push.</param>
      <param name="token">The cancellation token.</param>
      <returns>An awaitable task that will terminate once the push is complete or canceled.</returns>
    </member>
    <member name="T:HAL.Web.Content.HttpPackagePusher">
      <summary>Helper class to facilitate the pushing of packages to a NuGet repository over http.</summary>
    </member>
    <member name="M:HAL.Web.Content.HttpPackagePusher.#ctor(System.String,System.String,NuGet.Protocol.HttpSource,NuGet.Common.ILogger)">
      <summary>Creates a package pusher.</summary>
      <param name="pushUrl">The full URL of the server to push the packages to.</param>
      <param name="destinationApiKey">The API key needed to push the packages if the repository is secured.</param>
      <param name="httpSource">The HttpSource.</param>
      <param name="logger">The logger.</param>
    </member>
    <member name="M:HAL.Web.Content.HttpPackagePusher.PushAsync(System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously pushes a package to the destination in this pusher.</summary>
      <param name="packagePath">The path of the package to push.</param>
      <param name="token">The cancellation token.</param>
      <returns>An awaitable task that will terminate once the push is complete or canceled.</returns>
    </member>
    <member name="M:HAL.Web.Content.HttpPackagePusher.PushAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>Asynchronously pushes a package to the destination in this pusher.</summary>
      <param name="packageStream">The stream of the package to push.</param>
      <param name="token">The cancellation token.</param>
      <returns>An awaitable task that will terminate once the push is complete or canceled.</returns>
    </member>
    <member name="T:HAL.Web.Content.DirectoryPackagePusher">
      <summary>Helper class to facilitate the pushing of packages to a NuGet repository in a directory.</summary>
    </member>
    <member name="M:HAL.Web.Content.DirectoryPackagePusher.#ctor(System.String,NuGet.Common.ILogger)">
      <summary>Creates a package pusher.</summary>
      <param name="pushUrl">The full URL of the server to push the packages to.</param>
      <param name="logger">The logger.</param>
    </member>
    <member name="M:HAL.Web.Content.DirectoryPackagePusher.PushAsync(System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously pushes a package to the destination in this pusher.</summary>
      <param name="packagePath">The path of the package to push.</param>
      <param name="token">The cancellation token.</param>
      <returns>An awaitable task that will terminate once the push is complete or canceled.</returns>
    </member>
    <member name="T:HAL.Web.Content.Packager">
      <summary>Static class to support the creation of NuGet packages.</summary>
    </member>
    <member name="M:HAL.Web.Content.Packager.Package(HAL.Catalog.Items.CatalogItem,System.String,System.String,System.String)">
      <summary>Packages a collection of files within the given <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="item">The item details.</param>
      <param name="directory">Directory containing the files to package.</param>
      <param name="outputDirectory">The directory in which to save the new package. If null, directory is used.</param>
      <param name="extension">The file extension to give the package.</param>
      <returns>The path to the newly saved package file.</returns>
    </member>
    <member name="M:HAL.Web.Content.Packager.Package(HAL.Catalog.Items.CatalogItem,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
      <summary>Packages a collection of files within the given <see cref="T:HAL.Catalog.Items.CatalogItem" />.</summary>
      <param name="item">The item details.</param>
      <param name="files">Paths to the files to package.</param>
      <param name="outputDirectory">The directory in which to save the new package.</param>
      <param name="rootDirectory">Root directory for file structure.</param>
      <param name="extension">The file extension to give the package.</param>
      <returns>The path to the newly saved package file.</returns>
    </member>
    <member name="T:HAL.Web.Content.TextFileLogger">
      <summary>Logs to a specified text file.</summary>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.#ctor(System.String,System.String,System.String)">
      <summary>Creates a file logger.</summary>
      <param name="path">Path to store the file.</param>
      <param name="fileName">Name of the file.</param>
      <param name="extension">File extension. Default to ".log"</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.Log(NuGet.Common.LogLevel,System.String)">
      <summary>Logs a message.</summary>
      <param name="level">Level of message severity.</param>
      <param name="data">Data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogAsync(NuGet.Common.LogLevel,System.String)">
      <summary>Logs a message asynchronously.</summary>
      <param name="level">Level of message severity.</param>
      <param name="data">Data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.Log(NuGet.Common.ILogMessage)">
      <summary>Logs a message.</summary>
      <param name="message">Message to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogAsync(NuGet.Common.ILogMessage)">
      <summary>Logs a message asynchronously.</summary>
      <param name="message">Message to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogDebug(System.String)">
      <summary>Logs a debug message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogVerbose(System.String)">
      <summary>Logs a verbose level message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogInformation(System.String)">
      <summary>Logs an informational message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogMinimal(System.String)">
      <summary>Logs a minimal level message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogWarning(System.String)">
      <summary>Logs a warning message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogError(System.String)">
      <summary>Logs an error message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="M:HAL.Web.Content.TextFileLogger.LogInformationSummary(System.String)">
      <summary>Logs an information summary message.</summary>
      <param name="data">The data to log.</param>
    </member>
    <member name="T:HAL.Web.Licenser">
      <summary>License validation.</summary>
    </member>
    <member name="P:HAL.Web.Licenser.Instance">
      <summary>Instance of the licenser currently running.</summary>
    </member>
    <member name="P:HAL.Web.Licenser.Alerts">
      <summary>
        <see cref="T:HAL.Alerts.Alert" />s related to this object.</summary>
    </member>
    <member name="M:HAL.Web.Licenser.Start(System.Action)">
      <summary>Ensures the license checker has started.</summary>
    </member>
    <member name="M:HAL.Web.Licenser.RefreshLicensesAsync(System.Boolean)">
      <summary>Forces a refresh of the license cache.</summary>
    </member>
    <member name="M:HAL.Web.Licenser.EnsureLicense(System.String)">
      <summary>Ensures that the current user has an active license for the given product.</summary>
      <param name="productId">Product to authorize.</param>
      <returns>Validity response with appropriate parameters.</returns>
    </member>
    <member name="M:HAL.Web.Licenser.UnixTimeStampToDateTime(System.String)">
      <summary>Converts a Unix-style timestamp (seconds past epoch) to DateTime.</summary>
      <param name="unixTimeStamp">Timestamp to convert.</param>
      <returns>Time equivalent of timestamp.</returns>
    </member>
    <member name="M:HAL.Web.Licenser.UnixTimeStampToDateTime(System.Double)">
      <summary>Converts a Unix-style timestamp (seconds past epoch) to DateTime.</summary>
      <param name="unixTimeStamp">Timestamp to convert.</param>
      <returns>Time equivalent of timestamp.</returns>
    </member>
    <member name="M:HAL.Web.Licenser.DateTimeToUnixTimeStamp(System.DateTime)">
      <summary>Converts a DateTime to Unix-style timestamp (seconds past epoch).</summary>
      <param name="time">Time to convert.</param>
      <returns>TimeStamp equivalent of time.</returns>
    </member>
    <member name="T:HAL.Web.ServerResponse`1">
      <summary>Encapsulates a response from a server.</summary>
      <typeparam name="T">Value returned in the response.</typeparam>
    </member>
    <member name="M:HAL.Web.ServerResponse`1.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Web.ServerResponse`1.#ctor(System.Net.HttpStatusCode,`0)">
      <summary>Creates a complete server response.</summary>
      <param name="status">Response status.</param>
      <param name="payload">Response payload.</param>
    </member>
    <member name="P:HAL.Web.ServerResponse`1.Status">
      <summary>Status response from the server.</summary>
    </member>
    <member name="P:HAL.Web.ServerResponse`1.Payload">
      <summary>Payload returned from server.</summary>
    </member>
    <member name="T:HAL.Web.User.IAddress">
      <summary>An address.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.Id">
      <summary>The unique identifier of this address.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.Address1">
      <summary>The first line of the address.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.Address2">
      <summary>The second line of the address.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.Address3">
      <summary>The third line of the address.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.City">
      <summary>The city.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.State">
      <summary>The state/province/borough.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.Country">
      <summary>The country.</summary>
    </member>
    <member name="P:HAL.Web.User.IAddress.PostCode">
      <summary>The postal/zip code.</summary>
    </member>
    <member name="T:HAL.Web.User.Address">
      <summary>An address.</summary>
    </member>
    <member name="M:HAL.Web.User.Address.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.Id">
      <summary>The unique identifier of this address.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.Address1">
      <summary>The first line of the address.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.Address2">
      <summary>The second line of the address.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.Address3">
      <summary>The third line of the address.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.City">
      <summary>The city.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.State">
      <summary>The state/province/borough.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.Country">
      <summary>The country.</summary>
    </member>
    <member name="P:HAL.Web.User.Address.PostCode">
      <summary>The postal/zip code.</summary>
    </member>
    <member name="T:HAL.Web.User.ConfigConverter`2">
      <summary>Forces the deserialization of an object of one type as another type.</summary>
      <typeparam name="I">The type to deserialize.</typeparam>
      <typeparam name="T">The type to convert to during deserialization.</typeparam>
    </member>
    <member name="P:HAL.Web.User.ConfigConverter`2.CanWrite">
      <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.</summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:HAL.Web.User.ConfigConverter`2.CanRead">
      <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.</summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:HAL.Web.User.ConfigConverter`2.CanConvert(System.Type)">
      <summary>Determines whether this instance can convert the specified object type.</summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HAL.Web.User.ConfigConverter`2.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Writes the JSON representation of the object.</summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:HAL.Web.User.ConfigConverter`2.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Reads the JSON representation of the object.</summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:HAL.Web.User.GuidConverter">
      <summary>Deserializes strings to GUIDs.</summary>
    </member>
    <member name="P:HAL.Web.User.GuidConverter.CanWrite">
      <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.</summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:HAL.Web.User.GuidConverter.CanRead">
      <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.</summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:HAL.Web.User.GuidConverter.CanConvert(System.Type)">
      <summary>Determines whether this instance can convert the specified object type.</summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:HAL.Web.User.GuidConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Writes the JSON representation of the object.</summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:HAL.Web.User.GuidConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Reads the JSON representation of the object.</summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:HAL.Web.User.ILicense">
      <summary>Stores the data of license for a given product.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.Key">
      <summary>The key that validates a given product.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.ExpiryUTC">
      <summary>The time that this license expires.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.TimeActivated">
      <summary>If active, the time at which the license was activated, null otherwise.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.State">
      <summary>Current state of the license.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.CheckoutDuration">
      <summary>The amount of time this license has been checked out for.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.NormalizedProductName">
      <summary>The identifier of the product that this license is registered to.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicense.TimeDueBack">
      <summary>Time this license is due to be relinquished.</summary>
    </member>
    <member name="T:HAL.Web.User.License">
      <summary>Stores the data of license for a given product.</summary>
    </member>
    <member name="P:HAL.Web.User.License.Key">
      <summary>The key that validates a given product.</summary>
    </member>
    <member name="P:HAL.Web.User.License.ExpiryUTC">
      <summary>The time that this license expires.</summary>
    </member>
    <member name="P:HAL.Web.User.License.TimeActivated">
      <summary>If active, the time at which the license was activated, null otherwise.</summary>
    </member>
    <member name="P:HAL.Web.User.License.State">
      <summary>Current state of the license.</summary>
    </member>
    <member name="P:HAL.Web.User.License.CheckoutDuration">
      <summary>The amount of time this license has been checked out for.</summary>
    </member>
    <member name="P:HAL.Web.User.License.NormalizedProductName">
      <summary>Human legible unique identifier for the product.</summary>
    </member>
    <member name="P:HAL.Web.User.License.TimeDueBack">
      <summary>Time this license is due to be relinquished.</summary>
    </member>
    <member name="T:HAL.Web.User.ILicenseActivation">
      <summary>Maintains the relationship between a user and an active license.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicenseActivation.User">
      <summary>The user.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicenseActivation.UserId">
      <summary>The unique identifier of the user.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicenseActivation.Organization">
      <summary>The owner organization, if any.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicenseActivation.OrganizationId">
      <summary>The unique identifier of the organization.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicenseActivation.License">
      <summary>The license.</summary>
    </member>
    <member name="P:HAL.Web.User.ILicenseActivation.LicenseKey">
      <summary>The unique identifier of the license.</summary>
    </member>
    <member name="T:HAL.Web.User.LicenseState">
      <summary>The state of a license.</summary>
    </member>
    <member name="F:HAL.Web.User.LicenseState.Locked">
      <summary>Not available due to a lock.</summary>
    </member>
    <member name="F:HAL.Web.User.LicenseState.Available">
      <summary>Available.</summary>
    </member>
    <member name="F:HAL.Web.User.LicenseState.Active">
      <summary>Currently in used.</summary>
    </member>
    <member name="F:HAL.Web.User.LicenseState.CheckedOut">
      <summary>Not available due to a checkout.</summary>
    </member>
    <member name="T:HAL.Web.User.IMembership">
      <summary>Maintains the relationship between a user and an organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IMembership.User">
      <summary>The user.</summary>
    </member>
    <member name="P:HAL.Web.User.IMembership.UserId">
      <summary>The unique identifier of the user.</summary>
    </member>
    <member name="P:HAL.Web.User.IMembership.Organization">
      <summary>The organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IMembership.OrganizationId">
      <summary>The unique identifier of the organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IMembership.Confirmed">
      <summary>
        <c>true</c> if the relationship has been confirmed by an administrator of the organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IMembership.Admin">
      <summary>
        <c>true</c> if the user is an administrator of the organization.</summary>
    </member>
    <member name="M:HAL.Web.User.IMembership.Publish">
      <summary>Simplifies this so that it can be transfered.</summary>
    </member>
    <member name="T:HAL.Web.User.Membership">
      <summary>Maintains the relationship between a user and an organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Membership.User">
      <summary>The user.</summary>
    </member>
    <member name="P:HAL.Web.User.Membership.UserId">
      <summary>The unique identifier of the user.</summary>
    </member>
    <member name="P:HAL.Web.User.Membership.Organization">
      <summary>The organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Membership.OrganizationId">
      <summary>The unique identifier of the organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Membership.Confirmed">
      <summary>
        <c>true</c> if the relationship has been confirmed by an administrator of the organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Membership.Admin">
      <summary>
        <c>true</c> if the user is an administrator of the organization.</summary>
    </member>
    <member name="M:HAL.Web.User.Membership.Publish">
      <summary>Simplifies this so that it can be transfered.</summary>
    </member>
    <member name="T:HAL.Web.User.IOrganization">
      <summary>An organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IOrganization.Id">
      <summary>The unique identifier of this organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IOrganization.Name">
      <summary>The name of this organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IOrganization.Academic">
      <summary>
        <c>true</c> if this is a verified academic institution.</summary>
    </member>
    <member name="P:HAL.Web.User.IOrganization.TagLine">
      <summary>The tag line of this organization.</summary>
    </member>
    <member name="P:HAL.Web.User.IOrganization.Website">
      <summary>The website of this organization.</summary>
    </member>
    <member name="T:HAL.Web.User.Organization">
      <summary>An organization.</summary>
    </member>
    <member name="M:HAL.Web.User.Organization.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="P:HAL.Web.User.Organization.Id">
      <summary>The unique identifier of this organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Organization.Name">
      <summary>The name of this organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Organization.Academic">
      <summary>
        <c>true</c> if this is a verified academic institution.</summary>
    </member>
    <member name="P:HAL.Web.User.Organization.TagLine">
      <summary>The tag line of this organization.</summary>
    </member>
    <member name="P:HAL.Web.User.Organization.Website">
      <summary>The website of this organization.</summary>
    </member>
    <member name="T:HAL.Web.User.IProduct">
      <summary>A product.</summary>
    </member>
    <member name="P:HAL.Web.User.IProduct.Id">
      <summary>The unique identifier of this product.</summary>
    </member>
    <member name="P:HAL.Web.User.IProduct.NormalizedName">
      <summary>Human legible unique identifier for licensing the product.</summary>
    </member>
    <member name="P:HAL.Web.User.IProduct.Name">
      <summary>The name of this product.</summary>
    </member>
    <member name="P:HAL.Web.User.IProduct.TagLine">
      <summary>The brief description of this product.</summary>
    </member>
    <member name="P:HAL.Web.User.IProduct.Website">
      <summary>The website of this product.</summary>
    </member>
    <member name="T:HAL.Web.User.Product">
      <summary>A product.</summary>
    </member>
    <member name="M:HAL.Web.User.Product.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="P:HAL.Web.User.Product.Id">
      <summary>The unique identifier of this product.</summary>
    </member>
    <member name="P:HAL.Web.User.Product.NormalizedName">
      <summary>Human legible unique identifier for licensing the product.</summary>
    </member>
    <member name="P:HAL.Web.User.Product.Name">
      <summary>The name of this product.</summary>
    </member>
    <member name="P:HAL.Web.User.Product.TagLine">
      <summary>The brief description of this product.</summary>
    </member>
    <member name="P:HAL.Web.User.Product.Website">
      <summary>The website of this product.</summary>
    </member>
    <member name="T:HAL.Web.User.IUser">
      <summary>A user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.UserId">
      <summary>The unique identifier of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.UserName">
      <summary>The user name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.FirstName">
      <summary>The first name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.LastName">
      <summary>The last name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Name">
      <summary>The full name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Organizations">
      <summary>The organizations this user is part of.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Academic">
      <summary>
        <c>true</c> if this user is a verified academic.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.AcademicExpiry">
      <summary>Time the user's academic status expires.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Address">
      <summary>The address of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.TagLine">
      <summary>The tag line of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Website">
      <summary>The website of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.ProfilePicture">
      <summary>Link to profile picture.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Licenses">
      <summary>The licenses owned by this user.</summary>
    </member>
    <member name="P:HAL.Web.User.IUser.Email">
      <summary>The email of this user.</summary>
    </member>
    <member name="M:HAL.Web.User.IUser.Publish">
      <summary>Simplifies this so that it can be transferred.</summary>
    </member>
    <member name="T:HAL.Web.User.User">
      <summary>A user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.UserId">
      <summary>The unique identifier of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.UserName">
      <summary>The user name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.FirstName">
      <summary>The first name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.LastName">
      <summary>The last name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Name">
      <summary>The full name of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Organizations">
      <summary>The organizations this user is part of.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Academic">
      <summary>
        <c>true</c> if this user is a verified academic.</summary>
    </member>
    <member name="P:HAL.Web.User.User.AcademicExpiry">
      <summary>Time the user's academic status expires.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Address">
      <summary>The address of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.TagLine">
      <summary>The tag line of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Website">
      <summary>The website of this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.ProfilePicture">
      <summary>Link to profile picture.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Licenses">
      <summary>The licenses currently in use by this user.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Email">
      <summary>Email of this user.</summary>
    </member>
    <member name="M:HAL.Web.User.User.Publish">
      <summary>Simplifies this so that it can be transferred.</summary>
    </member>
    <member name="P:HAL.Web.User.User.Badges">
      <summary>Item badges.</summary>
    </member>
    <member name="M:HAL.Web.User.User.Update(HAL.Web.User.VM_User)">
      <summary>Updates this user with the information in the given model.</summary>
    </member>
    <member name="M:HAL.Web.User.User.RegisterExtensions(HAL.Catalog.Extensions.HAL_InstallationConfiguration)">
      <summary>Registers the current installation configuration for license access.</summary>
      <param name="configuration">Current installation configuration.</param>
    </member>
    <member name="T:HAL.Web.User.ValidityResponse">
      <summary>Maintains the validity status of a license.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_Activate">
      <summary>View model for checking out one or more licenses.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Activate.ProductIds">
      <summary>Products to check out licenses for.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Activate.Client">
      <summary>Client requesting checkout.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_Activate">
      <summary>View model for checking out one or more licenses.</summary>
    </member>
    <member name="M:HAL.Web.User.VM_Activate.#ctor">
      <summary>Default activation view model constructor.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Activate.ProductIds">
      <summary>Products to check out licenses for.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Activate.Client">
      <summary>Client requesting checkout.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_CheckIn">
      <summary>View model for checking-in one or more licenses.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_CheckIn.Keys">
      <summary>The keys to check in.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_CheckIn.Client">
      <summary>Client checking in keys.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_CheckIn">
      <summary>View model for checking-in one or more licenses.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_CheckIn.Keys">
      <summary>The keys to check in.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_CheckIn.Client">
      <summary>Client checking in keys.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_CheckOut">
      <summary>View model for checking out one or more licenses.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_CheckOut.Duration">
      <summary>Amount of time (in minutes) to check the license(s) out for.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_CheckOut">
      <summary>View model for checking out one or more licenses.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_CheckOut.Duration">
      <summary>Amount of time (in minutes) to check the license(s) out for.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_ForgotPassword">
      <summary>View model for forgotten password actions.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_ForgotPassword.Email">
      <summary>User email address.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_ForgotPassword">
      <summary>View model for forgotten password actions.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_ForgotPassword.Email">
      <summary>User email address.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_Login">
      <summary>View model for login actions.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Login.Email">
      <summary>The email address to login.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Login.Password">
      <summary>The password login.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Login.RememberMe">
      <summary>Whether the user will be kept logged in.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_SecureLogin">
      <summary>Secure login View Model.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_SecureLogin.SecurePassword">
      <summary>Encrypted password.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_Login">
      <summary>View model for login actions.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Login.Email">
      <summary>The email address to login.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Login.Password">
      <summary>The password login.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Login.RememberMe">
      <summary>Whether the user will be kept logged in.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Login.SecurePassword">
      <summary>Encrypted password.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_Message">
      <summary>Structure for storing and transferring messages.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Message.Message">
      <summary>The message.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_Message">
      <summary>Structure for storing and transferring messages.</summary>
    </member>
    <member name="M:HAL.Web.User.VM_Message.#ctor(System.String)">
      <summary>Default constructor with a string input.</summary>
      <param name="message">The message to be transferred.</param>
    </member>
    <member name="P:HAL.Web.User.VM_Message.Message">
      <summary>The message.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_Register">
      <summary>View model for user registration actions.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Register.Email">
      <summary>The email address to register.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Register.Password">
      <summary>The password to register with the user.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_Register.ConfirmPassword">
      <summary>The confirmed password to register with the user.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_Register">
      <summary>View model for user registration actions.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Register.Email">
      <summary>The email address to register.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Register.Password">
      <summary>The password to register with the user.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_Register.ConfirmPassword">
      <summary>The confirmed password to register with the user.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_ResetPassword">
      <summary>View model for password reset actions.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_ResetPassword.Email">
      <summary>User email address.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_ResetPassword.Password">
      <summary>The new password.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_ResetPassword.ConfirmPassword">
      <summary>The confirmed new password.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_ResetPassword.Code">
      <summary>Validation code to authorize password reset.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_ResetPassword">
      <summary>View model for password reset actions.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_ResetPassword.Email">
      <summary>User email address.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_ResetPassword.Password">
      <summary>The new password.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_ResetPassword.ConfirmPassword">
      <summary>The confirmed new password.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_ResetPassword.Code">
      <summary>Validation code to authorize password reset.</summary>
    </member>
    <member name="T:HAL.Web.User.IVM_User">
      <summary>View model for storing publicly accessible user information.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.Id">
      <summary>User unique identifier.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.FirstName">
      <summary>The user's first name.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.LastName">
      <summary>The user's last name or surname.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.Organizations">
      <summary>The organizations which the user is a member of.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.Academic">
      <summary>
        <c>true</c> if this user is a verified academic user.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.Address">
      <summary>The user's current address.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.TagLine">
      <summary>The user's status.</summary>
    </member>
    <member name="P:HAL.Web.User.IVM_User.Website">
      <summary>The user's website.</summary>
    </member>
    <member name="T:HAL.Web.User.VM_User">
      <summary>View model for storing publicly accessible user information.</summary>
    </member>
    <member name="M:HAL.Web.User.VM_User.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:HAL.Web.User.VM_User.#ctor(HAL.Web.User.User)">
      <summary>Creates a view model from a complete user model.</summary>
      <param name="user">The user to copy.</param>
    </member>
    <member name="P:HAL.Web.User.VM_User.Id">
      <summary>User unique identifier.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.FirstName">
      <summary>The user's first name.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.LastName">
      <summary>The user's last name or surname.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.Organizations">
      <summary>The organizations which the user is a member of.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.Academic">
      <summary>
        <c>true</c> if this user is a verified academic user.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.Address">
      <summary>The user's current address.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.TagLine">
      <summary>The user's status.</summary>
    </member>
    <member name="P:HAL.Web.User.VM_User.Website">
      <summary>The user's website.</summary>
    </member>
  </members>
</doc>