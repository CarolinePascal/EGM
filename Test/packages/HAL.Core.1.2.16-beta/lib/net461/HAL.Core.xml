<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.Core</name>
  </assembly>
  <members>
    <member name="T:HAL.Alerts.CollisionAlert">
      <summary>Collision alert.</summary>
    </member>
    <member name="M:HAL.Alerts.CollisionAlert.#ctor(HAL.Objects.Parts.Part,HAL.Objects.Parts.Part)">
      <summary>Alerts of a collision between two parts.</summary>
      <param name="partA">First colliding part.</param>
      <param name="partB">Second colliding part.</param>
    </member>
    <member name="T:HAL.Alerts.CommunicationAlert">
      <summary>Alert due to a controller communication issue.</summary>
    </member>
    <member name="M:HAL.Alerts.CommunicationAlert.#ctor">
      <summary>Creates an alert due to a controller communication issue.</summary>
    </member>
    <member name="M:HAL.Alerts.CommunicationAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to a controller communication issue, with a description of this alert.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.CommunicationAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to a controller communication issue, with a description of this alert and its inner cause.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.FileSystemAlert">
      <summary>Alert due to a file system operation issue.</summary>
    </member>
    <member name="M:HAL.Alerts.FileSystemAlert.#ctor">
      <summary>Creates an alert due to a file system operation issue.</summary>
    </member>
    <member name="M:HAL.Alerts.FileSystemAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to a file system operation issue, with a description of this alert.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.FileSystemAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to a file system operation issue, with a description of this alert and its inner cause.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.HAL_InverseSolvingFailedAlert">
      <summary>Alert triggered by an failed inverse kinematic solving.</summary>
    </member>
    <member name="T:HAL.Alerts.JointOutOfRangeAlert">
      <summary>Alert triggered by joints when they reach position limits.</summary>
    </member>
    <member name="M:HAL.Alerts.JointOutOfRangeAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Objects.Joint[])">
      <summary>Creates an alert due to joints reaching their position limits, with a description of this alert.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="joints">Limited joints.</param>
    </member>
    <member name="M:HAL.Alerts.JointOutOfRangeAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Objects.Joint[],HAL.Alerts.Alert)">
      <summary>Creates an alert due to joints reaching their position limits, with a description of this alert and its inner cause.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="joints">Limited joints.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="P:HAL.Alerts.JointOutOfRangeAlert.Joints">
      <summary>Limited joints.</summary>
    </member>
    <member name="T:HAL.Alerts.OutOfReachAlert">
      <summary>Alert triggered by an unreachable target.</summary>
    </member>
    <member name="M:HAL.Alerts.OutOfReachAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to an unreachable target, with a description of this alert.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.OutOfReachAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to an unreachable target, with a description of this alert and its inner cause.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.ProgramLoadingAlert">
      <summary>Alert due to a program loading issue.</summary>
    </member>
    <member name="M:HAL.Alerts.ProgramLoadingAlert.#ctor">
      <summary>Creates an alert due to a program loading issue.</summary>
    </member>
    <member name="M:HAL.Alerts.ProgramLoadingAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String)">
      <summary>Creates an alert due to a program loading issue, with a description of this alert.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="M:HAL.Alerts.ProgramLoadingAlert.#ctor(HAL.Alerts.AlertLevel,System.String,System.String,HAL.Alerts.Alert)">
      <summary>Creates an alert due to a program loading issue, with a description of this alert and its inner cause.</summary>
      <param name="severity">Alert severity.</param>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
      <param name="innerAlert">Inner alert to be included.</param>
    </member>
    <member name="T:HAL.Alerts.SingularityAlert">
      <summary>Alert triggered by a kinematic singularity.</summary>
    </member>
    <member name="T:HAL.Catalog.CatalogManager">
      <summary>Store of strongly-typed catalogs.</summary>
    </member>
    <member name="M:HAL.Catalog.CatalogManager.#ctor">
      <summary>Creates a <see cref="T:HAL.Catalog.CatalogManager" /> with the default repositories.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.Tags">
      <summary>Content tags.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.Procedures">
      <summary>Catalog of <see cref="T:HAL.Procedures.Procedure" />s.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.Parts">
      <summary>Catalog of <see cref="T:HAL.Objects.Parts.Part" />s.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.Mechanisms">
      <summary>Catalog of <see cref="T:HAL.Objects.Mechanisms.Mechanism" />s.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.Controllers">
      <summary>Catalog of <see cref="T:HAL.Control.Controller" />s.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.RemoteInitialized">
      <summary>Whether the remote repositories are initialized.</summary>
    </member>
    <member name="P:HAL.Catalog.CatalogManager.LocalInitialized">
      <summary>Whether the local repositories are initialized.</summary>
    </member>
    <member name="M:HAL.Catalog.CatalogManager.Initalize">
      <summary>Initializes the repositories.</summary>
      <returns>Asynchronous task.</returns>
    </member>
    <member name="M:HAL.Catalog.CatalogManager.InitializeRemote">
      <summary>Initializes the repositories.</summary>
      <returns>Asynchronous task.</returns>
    </member>
    <member name="M:HAL.Catalog.CatalogManager.InitializeLocal">
      <summary>Initializes the repositories.</summary>
      <returns>Asynchronous task.</returns>
    </member>
    <member name="T:HAL.Catalog.ControllerCatalog">
      <summary>Catalog of controllers.</summary>
    </member>
    <member name="M:HAL.Catalog.ControllerCatalog.#ctor(HAL.Catalog.CatalogRepository{HAL.Catalog.Items.ControllerCatalogItem,HAL.Control.Controller}[])">
      <summary> Creates a controller catalog. </summary>
      <param name="repositories">Repositories of the catalog.</param>
    </member>
    <member name="M:HAL.Catalog.ControllerCatalog.CreateDefault">
      <summary>Asynchronously creates the default catalog with local and remote repositories.</summary>
    </member>
    <member name="T:HAL.Catalog.LocalControllerRepository">
      <summary>Local repository of controller.</summary>
    </member>
    <member name="M:HAL.Catalog.LocalControllerRepository.#ctor(System.String,System.String,HAL.Catalog.TagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.LocalControllerRepository.Store(HAL.Catalog.Items.ControllerCatalogItem,HAL.Control.Controller,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.RemoteControllerRepository">
      <summary>Remote repository of controllers.</summary>
    </member>
    <member name="M:HAL.Catalog.RemoteControllerRepository.#ctor(System.String,System.String,HAL.Catalog.LocalControllerRepository,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="downloadRepository">Repository in which to store downloads.</param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.RemoteControllerRepository.CreateDefault">
      <summary>Asynchronously creates the default repository.</summary>
    </member>
    <member name="M:HAL.Catalog.RemoteControllerRepository.Store(HAL.Catalog.Items.ControllerCatalogItem,HAL.Control.Controller,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.Items.ControllerCatalogItem">
      <summary>Controller catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.ControllerCatalogItem.#ctor">
      <summary>Creates an empty controller catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.ControllerCatalogItem.#ctor(System.String,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a controller catalog item from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.ControllerCatalogItem.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a controller catalog item from detailed information.</summary>
      <param name="identity">Item identifier.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="P:HAL.Catalog.Items.ControllerCatalogItem.Extension">
      <summary>Returns the extension of the folder storing this catalog item in a repository.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.MechanismCatalogItem">
      <summary>
        <see cref="T:HAL.Objects.Mechanisms.Mechanism" /> catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.MechanismCatalogItem.#ctor">
      <summary>Creates an unspecified <see cref="T:HAL.Catalog.Items.MechanismCatalogItem" />.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.MechanismCatalogItem.#ctor(System.String,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a <see cref="T:HAL.Catalog.Items.MechanismCatalogItem" /> from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.MechanismCatalogItem.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a <see cref="T:HAL.Catalog.Items.MechanismCatalogItem" /> from detailed information.</summary>
      <param name="identity">Item identifier.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="P:HAL.Catalog.Items.MechanismCatalogItem.Extension">
      <summary>Returns the extension of the folder storing this catalog item in a repository.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.PartCatalogItem">
      <summary>Part catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.PartCatalogItem.#ctor">
      <summary>Creates an empty part catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.PartCatalogItem.#ctor(System.String,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a part catalog item from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.PartCatalogItem.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a part catalog item from detailed information.</summary>
      <param name="identity">Item identifier.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="P:HAL.Catalog.Items.PartCatalogItem.Extension">
      <summary>Returns the extension of the folder storing this catalog item in a repository.</summary>
    </member>
    <member name="T:HAL.Catalog.Items.ProcedureCatalogItem">
      <summary>Procedure catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.ProcedureCatalogItem.#ctor">
      <summary>Creates an empty procedure catalog item.</summary>
    </member>
    <member name="M:HAL.Catalog.Items.ProcedureCatalogItem.#ctor(System.String,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a procedure catalog item from detailed information.</summary>
      <param name="title">Item title.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="M:HAL.Catalog.Items.ProcedureCatalogItem.#ctor(HAL.Catalog.Items.ItemIdentifier,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a procedure catalog item from detailed information.</summary>
      <param name="identity">Item identifier.</param>
      <param name="description">Item description.</param>
      <param name="url">Item URL.</param>
      <param name="illustration">Item illustration path.</param>
      <param name="tags">Item tags.</param>
    </member>
    <member name="P:HAL.Catalog.Items.ProcedureCatalogItem.Extension">
      <summary>Returns the extension of the folder storing this catalog item in a repository.</summary>
    </member>
    <member name="T:HAL.Catalog.MechanismCatalog">
      <summary>Catalog of <see cref="T:HAL.Objects.Mechanisms.Mechanism" />s.</summary>
    </member>
    <member name="M:HAL.Catalog.MechanismCatalog.#ctor(HAL.Catalog.CatalogRepository{HAL.Catalog.Items.MechanismCatalogItem,HAL.Objects.Mechanisms.Mechanism}[])">
      <summary> Creates a mechanism catalog. </summary>
      <param name="repositories">Repositories of the catalog.</param>
    </member>
    <member name="M:HAL.Catalog.MechanismCatalog.CreateDefault">
      <summary>Asynchronously creates the default catalog with local and remote repositories.</summary>
    </member>
    <member name="T:HAL.Catalog.LocalMechanismRepository">
      <summary>Local repository of <see cref="T:HAL.Objects.Mechanisms.Mechanism" />s.</summary>
    </member>
    <member name="M:HAL.Catalog.LocalMechanismRepository.#ctor(System.String,System.String,HAL.Catalog.TagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.LocalMechanismRepository.Load(HAL.Catalog.Items.MechanismCatalogItem)">
      <summary>Get an item in this repository.</summary>
      <param name="item">Item to look for.</param>
      <returns>Retrieved item, if any.</returns>
    </member>
    <member name="M:HAL.Catalog.LocalMechanismRepository.Store(HAL.Catalog.Items.MechanismCatalogItem,HAL.Objects.Mechanisms.Mechanism,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.RemoteMechanismRepository">
      <summary>Remote repository of <see cref="T:HAL.Objects.Mechanisms.Mechanism" />s.</summary>
    </member>
    <member name="M:HAL.Catalog.RemoteMechanismRepository.#ctor(System.String,System.String,HAL.Catalog.LocalMechanismRepository,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="downloadRepository">Repository in which to store downloads.</param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.RemoteMechanismRepository.CreateDefault">
      <summary>Asynchronously creates the default repository.</summary>
    </member>
    <member name="M:HAL.Catalog.RemoteMechanismRepository.Store(HAL.Catalog.Items.MechanismCatalogItem,HAL.Objects.Mechanisms.Mechanism,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.PartCatalog">
      <summary>Catalog of parts.</summary>
    </member>
    <member name="M:HAL.Catalog.PartCatalog.#ctor(HAL.Catalog.CatalogRepository{HAL.Catalog.Items.PartCatalogItem,HAL.Objects.Parts.Part}[])">
      <summary> Creates a part catalog. </summary>
      <param name="repositories">Repositories of the catalog.</param>
    </member>
    <member name="P:HAL.Catalog.PartCatalog.Default">
      <summary>Default catalog for parts with local and remote repositories.</summary>
    </member>
    <member name="M:HAL.Catalog.PartCatalog.CreateDefault">
      <summary>Asynchronously creates the default catalog with local and remote repositories.</summary>
    </member>
    <member name="T:HAL.Catalog.LocalPartRepository">
      <summary>Local repository of parts.</summary>
    </member>
    <member name="M:HAL.Catalog.LocalPartRepository.#ctor(System.String,System.String,HAL.Catalog.TagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="P:HAL.Catalog.LocalPartRepository.Default">
      <summary>Default local repository for parts.</summary>
    </member>
    <member name="M:HAL.Catalog.LocalPartRepository.Store(HAL.Catalog.Items.PartCatalogItem,HAL.Objects.Parts.Part,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.RemotePartRepository">
      <summary>Remote repository of parts.</summary>
    </member>
    <member name="M:HAL.Catalog.RemotePartRepository.#ctor(System.String,System.String,HAL.Catalog.LocalPartRepository,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="downloadRepository">Repository in which to store downloads.</param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.RemotePartRepository.CreateDefault">
      <summary>Asynchrously creates the default repository.</summary>
    </member>
    <member name="M:HAL.Catalog.RemotePartRepository.Store(HAL.Catalog.Items.PartCatalogItem,HAL.Objects.Parts.Part,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.ProcedureCatalog">
      <summary>Catalog of procedures.</summary>
    </member>
    <member name="M:HAL.Catalog.ProcedureCatalog.#ctor(HAL.Catalog.CatalogRepository{HAL.Catalog.Items.ProcedureCatalogItem,HAL.Procedures.Procedure}[])">
      <summary> Creates a procedure catalog. </summary>
      <param name="repositories">Repositories of the catalog.</param>
    </member>
    <member name="P:HAL.Catalog.ProcedureCatalog.Default">
      <summary>Default catalog for procedures with local and remote repositories.</summary>
    </member>
    <member name="M:HAL.Catalog.ProcedureCatalog.CreateDefault">
      <summary>Asynchronously creates the default catalog with local and remote repositories.</summary>
    </member>
    <member name="T:HAL.Catalog.LocalProcedureRepository">
      <summary>Local repository of procedures.</summary>
    </member>
    <member name="M:HAL.Catalog.LocalProcedureRepository.#ctor(System.String,System.String,HAL.Catalog.TagGraph,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="tags">Tags.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.LocalProcedureRepository.Store(HAL.Catalog.Items.ProcedureCatalogItem,HAL.Procedures.Procedure,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.RemoteProcedureRepository">
      <summary>Remote repository of procedures.</summary>
    </member>
    <member name="M:HAL.Catalog.RemoteProcedureRepository.#ctor(System.String,System.String,HAL.Catalog.LocalProcedureRepository,System.String,HAL.Catalog.Permission)">
      <summary>Creates a repository.</summary>
      <param name="name">Repository name.</param>
      <param name="uri">Local or remote location of the repository.</param>
      <param name="downloadRepository">Repository in which to store downloads.</param>
      <param name="apiKey">API key to use to upload packages.</param>
      <param name="access">Access <see cref="T:HAL.Catalog.Permission" /> of the repository.</param>
    </member>
    <member name="M:HAL.Catalog.RemoteProcedureRepository.CreateDefault">
      <summary>Asynchronously creates the default repository.</summary>
    </member>
    <member name="M:HAL.Catalog.RemoteProcedureRepository.Store(HAL.Catalog.Items.ProcedureCatalogItem,HAL.Procedures.Procedure,System.Boolean,System.Boolean)">
      <summary>Packages the given item and its constituent parts into a repository readable pack.</summary>
      <param name="item">Item details.</param>
      <param name="payload">Item to store.</param>
      <param name="overwrite">Whether this should overwrite a package with the same identifier and version.</param>
      <param name="autoVersion">Whether this should automatically increment the version number of the item.</param>
      <returns>Whether the item was stored successfully.</returns>
    </member>
    <member name="T:HAL.Catalog.TagGraph">
      <summary>Tag graph.</summary>
    </member>
    <member name="M:HAL.Catalog.TagGraph.#ctor">
      <summary>Creates a new <see cref="T:HAL.Catalog.TagGraph" />.</summary>
    </member>
    <member name="P:HAL.Catalog.TagGraph.Tags">
      <summary>Tags.</summary>
    </member>
    <member name="P:HAL.Catalog.TagGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="M:HAL.Catalog.TagGraph.UpdateTags(HAL.Catalog.InfoItem,System.Boolean)">
      <summary>Updates all of the tags within the given item by matching the title to fully fledged tags.</summary>
      <param name="item">Item whose tags should be updated.</param>
      <param name="force">Force the update.</param>
    </member>
    <member name="M:HAL.Catalog.TagGraph.AddVertex(HAL.Catalog.Items.Attributes.Tags.Tag)">
      <summary>Adds a vertex to the graph if it does not already exist.</summary>
      <param name="tag">The vertex to add.</param>
      <returns>Successful addition of this vertex.</returns>
    </member>
    <member name="M:HAL.Catalog.TagGraph.RemoveVertex(HAL.Catalog.Items.Attributes.Tags.Tag)">
      <summary>Removes a vertex from the graph if it exists.</summary>
      <param name="tag">The vertex to remove.</param>
      <returns>Successful removal of this vertex.</returns>
    </member>
    <member name="M:HAL.Catalog.TagGraph.AddTags(System.Collections.Generic.IEnumerable{HAL.Catalog.Items.Attributes.Tags.Tag})">
      <summary>Adds a list of potentially related tags to this graph.</summary>
      <param name="tags">Tags to be added.</param>
    </member>
    <member name="M:HAL.Catalog.TagGraph.AddTags(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Adds a list of potentially related tags to this graph.</summary>
      <remarks> New tags will be generated if they do not exist in the graph. </remarks>
      <param name="tagTitles">Titles of the tags to be added.</param>
      <returns>Equivalent tags.</returns>
    </member>
    <member name="M:HAL.Catalog.TagGraph.CreateDefaultEdge(HAL.Catalog.Items.Attributes.Tags.Tag,HAL.Catalog.Items.Attributes.Tags.Tag)">
      <summary>Creates a default implementation of a graph edge.</summary>
      <param name="source">The start vertex of the edge.</param>
      <param name="target">The end vertex of the edge.</param>
      <returns>Resulting edge.</returns>
    </member>
    <member name="M:HAL.Catalog.TagGraph.GetSubGraph(System.Collections.Generic.List{HAL.Catalog.Items.Attributes.Tags.Tag})">
      <summary>Retrieves the graph leading to the given tags.</summary>
      <param name="tags">Tags.</param>
    </member>
    <member name="T:HAL.Catalog.TagRelation">
      <summary>Relation between tags. </summary>
    </member>
    <member name="M:HAL.Catalog.TagRelation.#ctor(HAL.Catalog.Items.Attributes.Tags.Tag,HAL.Catalog.Items.Attributes.Tags.Tag,System.String)">
      <summary>Creates a relation between two tags.</summary>
      <param name="source">Source tag.</param>
      <param name="target">Target tag.</param>
      <param name="name">Relation name.</param>
    </member>
    <member name="E:HAL.Catalog.TagRelation.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Catalog.TagRelation.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="P:HAL.Catalog.TagRelation.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="P:HAL.Catalog.TagRelation.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Catalog.TagRelation.Ordinal">
      <summary>An index defining the position of this in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Catalog.TagRelation.IsDefaultRootConnection">
      <summary>Defines whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Catalog.TagRelation.Source">
      <summary>Gets the source vertex.</summary>
    </member>
    <member name="P:HAL.Catalog.TagRelation.Target">
      <summary>Gets the target vertex.</summary>
    </member>
    <member name="M:HAL.Catalog.TagRelation.CloneEdge">
      <summary>Creates a new connection with all the same properties as the original.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Catalog.TagRelation.CloneEdgeTo(HAL.Catalog.Items.Attributes.Tags.Tag,HAL.Catalog.Items.Attributes.Tags.Tag,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Catalog.TagRelation.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Catalog.TagRelation.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Catalog.TagRelation.Dispose">
      <inheritdoc />
    </member>
    <member name="T:HAL.Communications.Board">
      <summary>Communication board.</summary>
    </member>
    <member name="M:HAL.Communications.Board.#ctor(HAL.Identifier,HAL.Spatial.Body,HAL.Communications.Direction,System.Collections.Generic.List{HAL.Communications.Protocol})">
      <summary>Creates a new <see cref="T:HAL.Communications.Board" />.</summary>
      <param name="identity">Identity of this object.</param>
      <param name="body">Geometrical representation of the object.</param>
      <param name="direction">Supported direction of communication.</param>
      <param name="protocols">Communication protocols supported by this object.</param>
    </member>
    <member name="M:HAL.Communications.Board.AddSocket(HAL.Communications.CommunicationGraph,HAL.Communications.ISocket,HAL.Communications.Protocol,System.String)">
      <summary>Adds a socket mapped to this board.</summary>
      <param name="graph">Communication graph to be modified.</param>
      <param name="socket">Socket to be added.</param>
      <param name="protocol">Communication protocol to be used.</param>
      <param name="mapping">Socket mapping on this board.</param>
      <returns>Resulting bus, from this board to the socket.</returns>
    </member>
    <member name="T:HAL.Communications.BoardState">
      <summary>Stores the state of a communication board.</summary>
    </member>
    <member name="M:HAL.Communications.BoardState.#ctor(HAL.Communications.Board,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Creates a board state from a board instance.</summary>
      <param name="board">Board to analyze.</param>
      <param name="notifications">Notifications to be included to the state.</param>
      <param name="date">Date at which this state was generated.</param>
    </member>
    <member name="P:HAL.Communications.BoardState.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="P:HAL.Communications.BoardState.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Communications.BoardState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Communications.BoardState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Communications.BoardState.ChildStates">
      <summary>Current communication state.</summary>
    </member>
    <member name="P:HAL.Communications.BoardState.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="M:HAL.Communications.BoardState.TryAssign(HAL.Communications.Board)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Communications.BoardState.HAL#Objects#IState{HAL#Communications#ISocket}#TryAssign(HAL.Communications.ISocket)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Communications.BoardState.HAL#Objects#IState#TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Communications.BoardState.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Communications.BoardState.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Communications.BoardState.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Communications.BoardState.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Communications.Bus">
      <summary>Base, abstract implementation of a connection in the communication graph.</summary>
    </member>
    <member name="M:HAL.Communications.Bus.#ctor(HAL.Communications.ISocket,HAL.Communications.ISocket,HAL.Communications.Protocol,HAL.Identifier)">
      <summary>Initializes a new bus between two communicating objects.</summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="protocol">Communication protocol enforced by this bus.</param>
      <param name="identifier">Bus identity.</param>
    </member>
    <member name="M:HAL.Communications.Bus.#ctor(HAL.Communications.Bus)">
      <summary>Creates a bus from an existing one.</summary>
      <param name="clonee">Cloned bus.</param>
    </member>
    <member name="P:HAL.Communications.Bus.Source">
      <summary>Gets the source vertex.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.Target">
      <summary>Gets the target vertex.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.Protocol">
      <summary>Communication protocol enforced by this bus.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.Ordinal">
      <summary>An index defining the position of this in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.IsDefaultRootConnection">
      <summary>Defines whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.Enabled">
      <summary>Defines whether this can pass signals or has been blocked.</summary>
    </member>
    <member name="P:HAL.Communications.Bus.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Communications.Bus.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Communications.Bus.CloneEdge">
      <summary>Creates a new connection with all the same properties as the original.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Communications.Bus.CloneEdgeTo(HAL.Communications.ISocket,HAL.Communications.ISocket,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Communications.Bus.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Communications.Bus.Equals(HAL.Communications.Bus)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Communications.Bus.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Communications.Bus.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="E:HAL.Communications.Bus.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Communications.Bus.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Communications.Bus.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Communications.Bus.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Communications.CommunicatingObject">
      <summary>Physical object with the ability to communicate with others.</summary>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.#ctor(HAL.Identifier,HAL.Spatial.Body,HAL.Communications.Direction,System.Collections.Generic.List{HAL.Communications.Protocol})">
      <summary>Creates a <see cref="T:HAL.Communications.CommunicatingObject" />.</summary>
      <param name="identity">Identity of this object.</param>
      <param name="body">Geometrical representation of the object.</param>
      <param name="direction">Supported direction of communication.</param>
      <param name="protocols">Communication protocols supported by this object.</param>
    </member>
    <member name="P:HAL.Communications.CommunicatingObject.Direction">
      <summary>Supported direction of communication.</summary>
    </member>
    <member name="P:HAL.Communications.CommunicatingObject.Protocols">
      <summary>Communication protocols supported by this socket.</summary>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.HAL#ICloneable{HAL#Communications#ISocket}#Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.GetSocketState">
      <summary>Retrieves the current socket state.</summary>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.EnableCommunications(HAL.Communications.CommunicationGraph,HAL.Communications.Protocol[])">
      <summary>Enables communications for specified protocols.</summary>
      <param name="graph">Graph in which the communications should be enabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.DisableCommunications(HAL.Communications.CommunicationGraph,HAL.Communications.Protocol[])">
      <summary>Disables communications for specified protocols.</summary>
      <param name="graph">Graph in which the communications should be disabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.GetMapping(HAL.Communications.CommunicationGraph)">
      <summary>Obtains the mapping of this socket on its host board.</summary>
      <param name="graph">Host graph.</param>
      <returns>Mapping id.</returns>
    </member>
    <member name="M:HAL.Communications.CommunicatingObject.GetMapping">
      <summary>Obtains the mapping of this socket in the session graph.</summary>
      <returns>Mapping id.</returns>
    </member>
    <member name="T:HAL.Communications.CommunicationGraph">
      <summary>Communication graph, managing the data exchange between communicating objects.</summary>
    </member>
    <member name="P:HAL.Communications.CommunicationGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="P:HAL.Communications.CommunicationGraph.SimulatedSockets">
      <summary>Parts modified during simulation, and corresponding original vertices if any.</summary>
    </member>
    <member name="P:HAL.Communications.CommunicationGraph.SimulatedBuses">
      <summary>Connections modified during simulation, and corresponding original connection if any.</summary>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.CreateDefaultEdge(HAL.Communications.ISocket,HAL.Communications.ISocket)">
      <summary>NOT SUPPORTED</summary>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.RemoveEdge(HAL.Communications.Bus)">
      <summary>Removes the edge from the graph.</summary>
      <param name="edge">Edge to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.Connect(HAL.Communications.ISocket,HAL.Communications.ISocket,HAL.Communications.Protocol,HAL.Communications.Bus@,HAL.Graphs.Persistence)">
      <summary>Connects two objects of the graph.</summary>
      <param name="parent">First object.</param>
      <param name="child">Second object.</param>
      <param name="protocol">Communication protocol.</param>
      <param name="edge">Resulting edge connecting the objects.</param>
      <param name="persistence">Whether this connection is simulated or physical.</param>
      <returns>True if the connection was successful.</returns>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.Disconnect(HAL.Communications.ISocket,System.Collections.Generic.IEnumerable{HAL.Communications.ISocket},System.Collections.Generic.List{HAL.Communications.Bus}@,HAL.Communications.Protocol,HAL.Graphs.Persistence)">
      <summary>Disconnects sockets.</summary>
      <param name="from">Socket to disconnect.</param>
      <param name="to">Specifies the sockets to disconnect from. If null, disconnects from all sockets.</param>
      <param name="edges">Disconnected edges.</param>
      <param name="protocol">If no protocol is specified, all buses between the parent and child will be disconnected.</param>
      <param name="persistence">Whether this disconnection is simulated or physical.</param>
      <returns>True if the disconnection was successful.</returns>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.GetAllBuses(HAL.Communications.ISocket,System.Collections.Generic.IEnumerable{HAL.Communications.ISocket},System.Boolean,HAL.Communications.Protocol[])">
      <summary>Retrieves all buses connected to a socket using specified constraints.</summary>
      <param name="from">Socket to fetch buses from.</param>
      <param name="to">Connected target sockets to restrict the search to. If null, any bus being connected to the first object will be kept.</param>
      <param name="acceptCompatibleProtocols">Whether compatible protocols should be checked.</param>
      <param name="protocols">Restricts the search to these protocols. If no protocol is specified, all buses between the parent and child will be retrieved.</param>
      <returns>Retrieved buses, if any.</returns>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.EnableCommunications(HAL.Communications.ISocket,HAL.Communications.Protocol[])">
      <summary>Enables the communications of a socket for specified protocols.</summary>
      <param name="socket">Socket for which communications should be enabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.DisableCommunications(HAL.Communications.ISocket,HAL.Communications.Protocol[])">
      <summary>Disables the communications of a socket for specified protocols.</summary>
      <param name="socket">Socket for which communications should be enabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.ResetAllSimulatedContent">
      <summary>Resets the simulated content of this graph.</summary>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.ResetSimulatedEdge(HAL.Communications.Bus)">
      <summary>Resets the specified simulated edge of this graph.</summary>
      <param name="bus">Bus to be reset to its original state.</param>
    </member>
    <member name="M:HAL.Communications.CommunicationGraph.ResetSimulatedVertex(HAL.Communications.ISocket)">
      <summary>Resets the specified simulated vertex of this graph.</summary>
      <param name="vertex">Vertex to be reset to its original state.</param>
    </member>
    <member name="T:HAL.Communications.Direction">
      <summary>Denotes the direction in which data flows through a <see cref="T:HAL.Communications.ISocket" />.</summary>
    </member>
    <member name="F:HAL.Communications.Direction.In">
      <summary>Data is received.</summary>
    </member>
    <member name="F:HAL.Communications.Direction.Out">
      <summary>Data is emitted.</summary>
    </member>
    <member name="F:HAL.Communications.Direction.Duplex">
      <summary>Data is both received and emitted.</summary>
    </member>
    <member name="T:HAL.Communications.DirectionDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Communications.DirectionDescriptions.Description(HAL.Communications.Direction)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Communications.ElectricSignal">
      <summary>Electric signal.</summary>
      <summary>Electric signal.</summary>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.#ctor(HAL.Communications.ElectricSignal)">
      <summary>Creates an electric signal from an existing one.</summary>
      <param name="clonee">Cloned electric signal.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.#ctor(HAL.Identifier,HAL.Communications.SignalQuantization,HAL.Communications.Direction,HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Nullable{HAL.Units.Electrical.V})">
      <summary>Creates an electric signal.</summary>
      <param name="identity">Signal identity.</param>
      <param name="quantization">Signal quantization.</param>
      <param name="direction">Signal direction.</param>
      <param name="min">Minimum value of the signal.</param>
      <param name="max">Maximum value of the signal.</param>
      <param name="default">Default value of the signal.</param>
    </member>
    <member name="P:HAL.Communications.ElectricSignal.Quantization">
      <summary>Quantization of the signal.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignal.Default">
      <summary>Default value of the signal.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignal.State">
      <summary>Current value of the signal.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignal.IsValid">
      <summary>True if the object is valid.</summary>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.GetSocketState">
      <summary>Retrieves the current socket state.</summary>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.CreateOutput(HAL.Communications.ElectricSignal@,System.String,HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension,System.Boolean,HAL.Communications.ElectricSignal@)">
      <summary>Creates a digital output signal.</summary>
      <param name="instance">Existing instance of this signal.</param>
      <param name="alias">Signal alias.</param>
      <param name="low">Low state tension of the signal.</param>
      <param name="high">High state tension of the signal.</param>
      <param name="default">Default state of the signal.</param>
      <param name="signal">Digital output signal.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.DigitalInput(HAL.Communications.ElectricSignal@,System.String,HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension,HAL.Communications.ElectricSignal@)">
      <summary>Creates an digital input signal.</summary>
      <param name="instance">Existing instance of this signal.</param>
      <param name="alias">Signal alias.</param>
      <param name="low">Low state tension of the signal.</param>
      <param name="high">High state tension of the signal.</param>
      <param name="signal">Digital input signal.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.AnalogOutput(HAL.Communications.ElectricSignal@,System.String,HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension,HAL.Communications.ElectricSignal@)">
      <summary>Creates an analog output signal.</summary>
      <param name="instance">Existing instance of this signal.</param>
      <param name="alias">Signal alias.</param>
      <param name="min">Minimum value of the signal.</param>
      <param name="max">Maximum value of the signal.</param>
      <param name="default">Default state of the signal.</param>
      <param name="signal">Analog output signal.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignal.AnalogInput(HAL.Communications.ElectricSignal@,System.String,HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension,HAL.Communications.ElectricSignal@)">
      <summary>Creates an analog input signal.</summary>
      <param name="instance">Existing instance of this signal.</param>
      <param name="alias">Signal alias.</param>
      <param name="min">Minimum value of the signal.</param>
      <param name="max">Maximum value of the signal.</param>
      <param name="signal">Analog input signal.</param>
    </member>
    <member name="T:HAL.Communications.ElectricSignalState">
      <summary>Stores a state snapshot of an Electrical Signal.</summary>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.#ctor(HAL.Communications.ElectricSignal,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Creates a state snapshot for the specified Electrical Signal.</summary>
      <param name="signal">Signal to analyze.</param>
      <param name="notifications">Notifications associated with this state.</param>
      <param name="date">Date of the snapshot. Current UTC time will be retrieved if null.</param>
    </member>
    <member name="P:HAL.Communications.ElectricSignalState.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignalState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignalState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignalState.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignalState.Value">
      <summary>Current socket state value.</summary>
    </member>
    <member name="P:HAL.Communications.ElectricSignalState.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.TryAssign(HAL.Communications.ElectricSignal)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.HAL#Objects#IState{HAL#Communications#ISocket}#TryAssign(HAL.Communications.ISocket)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.HAL#Objects#IState#TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.Equals(HAL.Communications.ElectricSignalState)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Communications.ElectricSignalState.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Communications.IBoardState">
      <summary>Qualifies the state of a communication board.</summary>
    </member>
    <member name="P:HAL.Communications.IBoardState.ChildStates">
      <summary>Child states of connected sockets.</summary>
    </member>
    <member name="T:HAL.Communications.ICommunicationGraphEntity">
      <summary>Indicates that this is either an edge or vertex in a communication graph.</summary>
    </member>
    <member name="T:HAL.Communications.ISocket">
      <summary>Qualifies an object with the ability to receive and/or send data.</summary>
    </member>
    <member name="P:HAL.Communications.ISocket.Direction">
      <summary>Supported direction of communication.</summary>
    </member>
    <member name="P:HAL.Communications.ISocket.Protocols">
      <summary>Supported communication protocols.</summary>
    </member>
    <member name="M:HAL.Communications.ISocket.GetSocketState">
      <summary>Retrieves the current socket state.</summary>
    </member>
    <member name="M:HAL.Communications.ISocket.GetMapping(HAL.Communications.CommunicationGraph)">
      <summary>Obtains the mapping of this socket on its host board.</summary>
      <param name="graph">Host graph.</param>
      <returns>Mapping id.</returns>
    </member>
    <member name="M:HAL.Communications.ISocket.GetMapping">
      <summary>Obtains the mapping of this socket in the session graph.</summary>
      <returns>Mapping id.</returns>
    </member>
    <member name="M:HAL.Communications.ISocket.EnableCommunications(HAL.Communications.CommunicationGraph,HAL.Communications.Protocol[])">
      <summary>Enables communications for specified protocols.</summary>
      <param name="graph">Graph in which the communications should be enabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="M:HAL.Communications.ISocket.DisableCommunications(HAL.Communications.CommunicationGraph,HAL.Communications.Protocol[])">
      <summary>Disables communications for specified protocols.</summary>
      <param name="graph">Graph in which the communications should be disabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="T:HAL.Communications.ISocketState">
      <summary>Qualifies the state of a socket.</summary>
    </member>
    <member name="P:HAL.Communications.ISocketState.Value">
      <summary>Current socket state value.</summary>
    </member>
    <member name="T:HAL.Communications.Protocol">
      <summary>Base class for all communication protocols.</summary>
    </member>
    <member name="P:HAL.Communications.Protocol.AcceptedProtocols">
      <summary>Lists the types of protocols that are accepted within this protocol.</summary>
    </member>
    <member name="M:HAL.Communications.Protocol.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Communications.Protocol.IsCompatibleWith(HAL.Communications.Protocol)">
      <summary>Whether this protocol is compatible with a second one.</summary>
      <param name="otherProtocol">Second protocol.</param>
    </member>
    <member name="E:HAL.Communications.Protocol.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Communications.Protocol.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Communications.Protocols.CANopen">
      <summary>The CANopen protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.CCLink">
      <summary>The CCLink protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.ControlNet">
      <summary>The ControlNet protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.DeviceNet">
      <summary>The DeviceNet protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.Electrical">
      <summary>A simple electrical signal.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.EtherCAT">
      <summary>The EtherCAT protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.EtherNetIP">
      <summary>The EtherNet/IP protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.FIPIO">
      <summary>The FIPIO protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.INTERBUS">
      <summary>The INTERBUS protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.Lightbus">
      <summary>The Lightbus protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.Modbus">
      <summary>The Modbus protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.Pneumatic">
      <summary>A simple pneumatic signal.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.PROFIBUS">
      <summary>The PROFIBUS protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.PROFINET">
      <summary>The PROFINET protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.RS232">
      <summary>The RS232 protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.RS485">
      <summary>The RS485 protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.Sercos">
      <summary>The Sercos protocol.</summary>
    </member>
    <member name="T:HAL.Communications.Protocols.USB">
      <summary>The USB protocol.</summary>
    </member>
    <member name="T:HAL.Communications.SignalQuantization">
      <summary>Enumerates signal quantizations supported by HAL.</summary>
    </member>
    <member name="F:HAL.Communications.SignalQuantization.Analog">
      <summary>Analog quantization.</summary>
    </member>
    <member name="F:HAL.Communications.SignalQuantization.Digital">
      <summary>Digital quantization.</summary>
    </member>
    <member name="T:HAL.Communications.SignalQuantizationDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Communications.SignalQuantizationDescriptions.Description(HAL.Communications.SignalQuantization)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Communications.Socket">
      <summary>A base socket implementation which allows the passage of information in a certain protocol.</summary>
    </member>
    <member name="M:HAL.Communications.Socket.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:HAL.Communications.Socket.#ctor(HAL.Communications.Socket)">
      <summary>Creates a socket from an existing one.</summary>
      <param name="clonee">Socket to be cloned.</param>
    </member>
    <member name="M:HAL.Communications.Socket.#ctor(HAL.Identifier,System.Collections.Generic.List{HAL.Communications.Protocol},HAL.Communications.Direction)">
      <summary>Creates a <see cref="T:HAL.Communications.Socket" /> from specified settings.</summary>
      <param name="identifier">Socket identity.</param>
      <param name="protocols">Communication protocols supported by this socket.</param>
      <param name="direction">Socket direction.</param>
    </member>
    <member name="P:HAL.Communications.Socket.Direction">
      <summary>The direction of this socket.</summary>
    </member>
    <member name="P:HAL.Communications.Socket.Protocols">
      <summary>Communication protocols supported by this socket.</summary>
    </member>
    <member name="M:HAL.Communications.Socket.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Communications.Socket.IsCompatibleWith(HAL.Communications.ISocket)">
      <summary>Checks whether this socket can be connected to another communicating object by ensuring their directionality and protocols are compatible.</summary>
      <param name="other">Communicating object to test compatibility with.</param>
    </member>
    <member name="M:HAL.Communications.Socket.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="M:HAL.Communications.Socket.GetSocketState">
      <summary>Retrieves the current socket state.</summary>
    </member>
    <member name="M:HAL.Communications.Socket.GetMapping(HAL.Communications.CommunicationGraph)">
      <summary>Obtains the mapping of this socket on its host board.</summary>
      <param name="graph">Host graph.</param>
      <returns>Mapping id.</returns>
    </member>
    <member name="M:HAL.Communications.Socket.GetMapping">
      <summary>Obtains the mapping of this socket in the session graph.</summary>
      <returns>Mapping id.</returns>
    </member>
    <member name="M:HAL.Communications.Socket.EnableCommunications(HAL.Communications.CommunicationGraph,HAL.Communications.Protocol[])">
      <summary>Enables communications for specified protocols.</summary>
      <param name="graph">Graph in which the communications should be enabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="M:HAL.Communications.Socket.DisableCommunications(HAL.Communications.CommunicationGraph,HAL.Communications.Protocol[])">
      <summary>Disables communications for specified protocols.</summary>
      <param name="graph">Graph in which the communications should be disabled.</param>
      <param name="protocols">Specified protocols to be enabled, all supported protocols if null.</param>
    </member>
    <member name="T:HAL.Control.Controller">
      <summary>Virtual controller.</summary>
      <summary>Base controller implementation.</summary>
    </member>
    <member name="M:HAL.Control.Controller.Place(HAL.Control.Controller@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},HAL.Control.Controller@)">
      <summary>Places a controller in the document.</summary>
      <param name="instance">Existing instance to be modified.</param>
      <param name="alias">Controller alias.</param>
      <param name="location">Controller location.</param>
      <param name="robot">Robot(s) being controlled.</param>
      <param name="procedure">Procedure(s) executed by the controller.</param>
      <param name="signal">Signal(s) mapped to the controller.</param>
      <param name="controller">Controller.</param>
    </member>
    <member name="M:HAL.Control.Controller.Create(HAL.Control.Controller@,System.String,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},HAL.Control.Controller@)">
      <summary>Creates a generic controller.</summary>
      <param name="instance">Existing instance to be modified.</param>
      <param name="alias">Controller alias.</param>
      <param name="robot">Robot(s) being controlled.</param>
      <param name="procedure">Procedure(s) executed by the controller.</param>
      <param name="signal">Signal(s) mapped to the controller.</param>
      <param name="controller">Virtual controller.</param>
    </member>
    <member name="M:HAL.Control.Controller.Create(HAL.Control.Controller@,System.String,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},HAL.Objects.Parts.Part,HAL.Control.Controller@)">
      <summary>Creates a generic controller.</summary>
      <param name="instance">Existing instance to be modified.</param>
      <param name="alias">Controller alias.</param>
      <param name="robot">Robot(s) being controlled.</param>
      <param name="procedure">Procedure(s) executed by the controller.</param>
      <param name="signal">Signal(s) mapped to the controller.</param>
      <param name="body">Controller body.</param>
      <param name="controller">Virtual controller.</param>
    </member>
    <member name="M:HAL.Control.Controller.GetProperties(HAL.Control.Controller,System.Collections.Generic.List{HAL.Control.IControllableObject}@,System.Collections.Generic.IEnumerable{HAL.Procedures.Procedure}@)">
      <summary>Retrieves the properties of a specified controller.</summary>
      <param name="controller">Controller to retrieve properties from.</param>
      <param name="controlled">Objects controlled by this controller.</param>
      <param name="procedures">Procedures executed by this controller.</param>
    </member>
    <member name="M:HAL.Control.Controller.Export(HAL.Control.Controller,HAL.Simulation.Solution,System.String,System.Boolean,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress)">
      <summary>Exports procedures to the controller programming language.</summary>
      <param name="controller">Controller for which the tasks should be exported.</param>
      <param name="solution">Simulation solution.</param>
      <param name="destination">Destination path.</param>
      <param name="export">Triggers the export.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Task progress.</param>
    </member>
    <member name="M:HAL.Control.Controller.Export(HAL.Control.Controller,HAL.Simulation.Solution,System.Collections.Generic.List{HAL.Procedures.Procedure},HAL.Linguistics.Export.DeclarationMode,System.String,System.Boolean,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress)">
      <summary>Exports procedures to the controller programming language.</summary>
      <param name="controller">Controller for which the tasks should be exported.</param>
      <param name="solution">Simulation solution.</param>
      <param name="procedure">Procedures to upload.</param>
      <param name="mode">Declaration mode.</param>
      <param name="destination">Destination path.</param>
      <param name="export">Triggers the export.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Task progress.</param>
    </member>
    <member name="M:HAL.Control.Controller.Upload(HAL.Control.Controller,HAL.Simulation.Solution,System.String,System.Collections.Generic.List{HAL.Procedures.Procedure},System.String,HAL.Linguistics.Export.DeclarationMode,System.Boolean,System.Boolean,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress)">
      <summary>Uploads procedures to a controller.</summary>
      <param name="controller">Destination controller.</param>
      <param name="solution">Simulation solution.</param>
      <param name="networkId">Network identity of the controller (usually the IP address or SSID of the remote controller).</param>
      <param name="procedure">Procedures to upload. Leave empty if all procedures associated with the controller must be uploaded.</param>
      <param name="task">Name of the destination task.</param>
      <param name="mode">Declaration mode.</param>
      <param name="autoRun">Whether the uploaded procedures should be executed automatically after the upload.</param>
      <param name="upload">Triggers the upload.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Task progress.</param>
    </member>
    <member name="M:HAL.Control.Controller.Upload(HAL.Control.Controller,HAL.Simulation.Solution,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress)">
      <summary>Uploads procedures to the controller.</summary>
      <param name="controller">Destination controller.</param>
      <param name="solution">Simulation solution.</param>
      <param name="networkId">Network identity of the controller (usually the IP address or SSID of the remote controller).</param>
      <param name="source">Path to the file or directory to be uploaded.</param>
      <param name="task">Name of the destination task.</param>
      <param name="delete">Whether the file or directory should be deleted once the upload is complete.</param>
      <param name="autoRun">Whether the uploaded procedures should be executed automatically after the upload.</param>
      <param name="upload">Triggers the operation.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Task progress.</param>
    </member>
    <member name="M:HAL.Control.Controller.Backup(HAL.Control.Controller,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress)">
      <summary>Creates a backup of the controller.</summary>
      <param name="controller">Controller.</param>
      <param name="networkId">Network identity of the controller (usually the IP address or SSID of the remote controller).</param>
      <param name="destination">Backup destination directory.</param>
      <param name="alias">Backup alias. Leave empty to use the controller name and date.</param>
      <param name="backup">Triggers the operation.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Task progress.</param>
    </member>
    <member name="M:HAL.Control.Controller.Monitor(HAL.Control.Controller,System.String,System.Boolean,HAL.Control.IControllerState@)">
      <summary>Monitors the state of a controller.</summary>
      <param name="controller">Controller.</param>
      <param name="networkId">Network identity of the controller (usually the IP address or SSID of the remote controller).</param>
      <param name="monitor">Triggers the operation.</param>
      <param name="state">Controller state.</param>
    </member>
    <member name="E:HAL.Control.Controller.StateChanged">
      <summary>Raised if the state of the controller changed.</summary>
    </member>
    <member name="M:HAL.Control.Controller.ClearStepSubscriptions">
      <summary>Removes any subscription to <see cref="E:HAL.Control.Controller.StateChanged" />.</summary>
    </member>
    <member name="M:HAL.Control.Controller.#ctor(HAL.Identifier,System.Collections.Generic.List{HAL.Communications.Protocol},HAL.Spatial.Body)">
      <summary>Creates a new <see cref="T:HAL.Control.Controller" />.</summary>
      <param name="identity">Identity of this object.</param>
      <param name="body">Geometrical representation of the object.</param>
      <param name="protocols">Communication protocols supported by this object.</param>
    </member>
    <member name="M:HAL.Control.Controller.#ctor(HAL.Control.Controller)">
      <summary>Creates a controller from an existing one.</summary>
      <param name="clonee">Existing controller.</param>
    </member>
    <member name="P:HAL.Control.Controller.Alerts">
      <summary>
        <see cref="T:HAL.Alerts.Alert" />s related to this object.</summary>
    </member>
    <member name="P:HAL.Control.Controller.Clock">
      <summary>Controller clock.</summary>
    </member>
    <member name="P:HAL.Control.Controller.Controlled">
      <summary>Objects controlled by this controller.</summary>
    </member>
    <member name="P:HAL.Control.Controller.ProcedureManager">
      <summary>Procedures executed by this controller.</summary>
    </member>
    <member name="P:HAL.Control.Controller.SubsystemManager">
      <summary>Subsystems of this controller.</summary>
    </member>
    <member name="P:HAL.Control.Controller.IsValid">
      <summary>True if the object is valid.</summary>
    </member>
    <member name="M:HAL.Control.Controller.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Control.Controller.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Control.Controller.HAL#ICloneable{HAL#Catalog#ICataloguable}#Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Control.Controller.HAL#ICloneable{HAL#Communications#ISocket}#Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Control.Controller.GetSocketState">
      <summary>Retrieves the current socket state.</summary>
    </member>
    <member name="M:HAL.Control.Controller.Assign(System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure})">
      <summary>Assigns tasks and manipulators to this controller.</summary>
      <param name="controlledObjects">Object(s) to be controlled by this controller, if any.</param>
      <param name="procedures">Procedure(s) to be executed by this controller, if any.</param>
    </member>
    <member name="M:HAL.Control.Controller.EnsureOwnership">
      <summary>Ensures that all subsystems are linked to this controller.</summary>
    </member>
    <member name="M:HAL.Control.Controller.AddControlledObject(HAL.Control.IControllableObject)">
      <summary>Adds a controlled object.</summary>
      <param name="controlled">Object to be added.</param>
    </member>
    <member name="M:HAL.Control.Controller.RemoveControlledObject(HAL.Control.IControllableObject)">
      <summary>Removes a controlled object.</summary>
      <param name="controlled">Object to be removed.</param>
    </member>
    <member name="T:HAL.Control.ControllerEventArguments">
      <summary>Controller event details.</summary>
    </member>
    <member name="M:HAL.Control.ControllerEventArguments.#ctor(HAL.Control.IControllerState)">
      <summary>Creates a new set of event details from the specified controller state.</summary>
      <param name="state">Controller state.</param>
    </member>
    <member name="M:HAL.Control.ControllerEventArguments.#ctor(HAL.Control.Controller)">
      <summary>Creates a new set of event details from the specified controller.</summary>
      <param name="controller">Controller.</param>
    </member>
    <member name="P:HAL.Control.ControllerEventArguments.State">
      <summary>Controller state.</summary>
    </member>
    <member name="T:HAL.Control.ControllerState">
      <summary>Basic implementation of controller state.</summary>
    </member>
    <member name="M:HAL.Control.ControllerState.GetProperties(HAL.Control.IControllerState,HAL.Objects.Mechanisms.IMechanismState[]@,HAL.Communications.IBoardState@,HAL.Alerts.Alert[]@)">
      <summary>Retrieves properties from a joint state.</summary>
      <param name="state">State to extract properties from.</param>
      <param name="mechanism">State(s) of the mechanism(s) controlled by the controller.</param>
      <param name="communication">State of the communication systems managed by the controller.</param>
      <param name="notification">Notifications related to this state.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.#ctor(HAL.Identifier,System.Collections.Generic.IEnumerable{HAL.Objects.Mechanisms.IMechanismState},HAL.Communications.BoardState,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Creates a controller state from specified information.</summary>
      <param name="identity">Controller identity.</param>
      <param name="mechanicalState">Current state of each <see cref="T:HAL.Control.IControllableObject">object</see> being controlled.</param>
      <param name="communicationState">Current communication state.</param>
      <param name="notifications">Notifications.</param>
      <param name="date">Date at which this state was generated.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.#ctor(HAL.Control.Controller,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Creates a controller state from a controller instance.</summary>
      <param name="controller">Controller to analyze.</param>
      <param name="includeMechanicalState">Whether to store the mechanical state of the controller.</param>
      <param name="includeCommunicationState">Whether to store the communication state of the controller.</param>
      <param name="notifications">Notifications to be included to the state.</param>
      <param name="date">Date at which this state was generated.</param>
    </member>
    <member name="P:HAL.Control.ControllerState.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="P:HAL.Control.ControllerState.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Control.ControllerState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Control.ControllerState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Control.ControllerState.MechanicalState">
      <summary>Current state of each <see cref="T:HAL.Control.IControllableObject">object</see> being controlled.</summary>
    </member>
    <member name="P:HAL.Control.ControllerState.CommunicationState">
      <summary>Current communication state.</summary>
    </member>
    <member name="P:HAL.Control.ControllerState.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="M:HAL.Control.ControllerState.TryAssign(HAL.Control.Controller)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.HAL#Objects#IState{HAL#Communications#ISocket}#TryAssign(HAL.Communications.ISocket)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.TryAssign(HAL.Communications.Board)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.HAL#Objects#IState#TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Control.ControllerState.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Control.ControllerState.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Control.ControllerState.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Control.IControllableObject">
      <summary>An object that can be controlled by a <see cref="T:HAL.Control.Controller" />.</summary>
    </member>
    <member name="P:HAL.Control.IControllableObject.Controller">
      <summary>Controller of this object.</summary>
    </member>
    <member name="T:HAL.Control.IController">
      <summary>Qualifies a controller.</summary>
    </member>
    <member name="P:HAL.Control.IController.Controlled">
      <summary>Objects controlled by this controller.</summary>
    </member>
    <member name="P:HAL.Control.IController.ProcedureManager">
      <summary>Procedures executed by this controller.</summary>
    </member>
    <member name="P:HAL.Control.IController.SubsystemManager">
      <summary>Subsystems of this controller.</summary>
    </member>
    <member name="M:HAL.Control.IController.AddControlledObject(HAL.Control.IControllableObject)">
      <summary>Adds a controlled object.</summary>
      <param name="controlled">Object to be added.</param>
    </member>
    <member name="M:HAL.Control.IController.RemoveControlledObject(HAL.Control.IControllableObject)">
      <summary>Removes a controlled object.</summary>
      <param name="controlled">Object to be removed.</param>
    </member>
    <member name="T:HAL.Control.IControllerState">
      <summary>Qualifies a controller state.</summary>
    </member>
    <member name="P:HAL.Control.IControllerState.CommunicationState">
      <summary>Current communication state.</summary>
    </member>
    <member name="P:HAL.Control.IControllerState.MechanicalState">
      <summary>Current state of each <see cref="T:HAL.Control.IControllableObject">object</see> being controlled.</summary>
    </member>
    <member name="T:HAL.Control.IRemoteController">
      <summary>Qualifies a controller remotely accessible.</summary>
    </member>
    <member name="M:HAL.Control.IRemoteController.UpdateNetworkIdentity(System.String)">
      <summary>Attempts to update the network identity of this controller.</summary>
      <param name="hint">Hint used to retrieve an updated network identity, i.e: IP address, SSID, etc.</param>
      <returns>Whether the update was successful.</returns>
    </member>
    <member name="T:HAL.Control.IRemoteController`2">
      <summary>Qualifies a controller remotely accessible via a network identity.</summary>
      <typeparam name="TInfo">Network identity type.</typeparam>
      <typeparam name="TCredentials">User credentials type.</typeparam>
    </member>
    <member name="P:HAL.Control.IRemoteController`2.NetworkIdentity">
      <summary>Identity of this controller on the network.</summary>
    </member>
    <member name="P:HAL.Control.IRemoteController`2.User">
      <summary>User credentials.</summary>
    </member>
    <member name="T:HAL.Control.Subsystems.Communications.IGettableStateController">
      <summary>Qualifies a controller that can report its state.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Communications.IGettableStateController.GetState">
      <summary>Retrieves the state of the controller.</summary>
      <returns>State of the controller.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Communications.ISettableStateController">
      <summary>Qualifies a controller that can have its state set.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Communications.ISettableStateController.TrySetState(HAL.Objects.IState)">
      <summary>Sets the state of the controller.</summary>
      <param name="state">State to assign to the controller.</param>
      <returns>Whether the execution was successful.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.IControllerSubsystem">
      <summary>Qualifies a controller subsystem.</summary>
    </member>
    <member name="P:HAL.Control.Subsystems.IControllerSubsystem.Access">
      <summary>Subsystem access.</summary>
    </member>
    <member name="T:HAL.Control.Subsystems.IControllerSubsytemAccess">
      <summary>Qualifies an authorization to access and configure a controller subsystem.</summary>
    </member>
    <member name="P:HAL.Control.Subsystems.IControllerSubsytemAccess.IsGranted">
      <summary>Whether the access is currently granted.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.IControllerSubsytemAccess.Ensure">
      <summary>Ensures that the access is currently granted.</summary>
      <returns>Success.</returns>
    </member>
    <member name="M:HAL.Control.Subsystems.IControllerSubsytemAccess.Request">
      <summary>Requests the access to a controller subsystem.</summary>
      <returns>Success.</returns>
    </member>
    <member name="M:HAL.Control.Subsystems.IControllerSubsytemAccess.Release">
      <summary>Releases the access to a controller subsystem.</summary>
      <returns>Success.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Procedures.ILoadingCapableController">
      <summary>Qualifies a controller that can have code uploaded to it.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Procedures.ILoadingCapableController.Load(System.String,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,System.String,System.Boolean)">
      <summary>Attempts to load procedures to the controller.</summary>
      <param name="source">Path from which to upload.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="taskName">Target task name, if any.</param>
      <param name="autoRun">Whether the controller procedures should be executed after the loading is complete.</param>
      <returns>Whether the execution was successful.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Procedures.IProcedureExportingController">
      <summary>Qualifies a controller that can export its procedures.</summary>
    </member>
    <member name="P:HAL.Control.Subsystems.Procedures.IProcedureExportingController.SelectedLanguage">
      <summary>Current language.</summary>
    </member>
    <member name="P:HAL.Control.Subsystems.Procedures.IProcedureExportingController.Languages">
      <summary>Languages supported by this controller.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Procedures.IProcedureExportingController.Export(System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,System.String,HAL.Linguistics.Export.DeclarationMode,HAL.Procedures.Procedure[])">
      <summary>Exports controller procedures.</summary>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="destination">Destination path.</param>
      <param name="mode">Declaration mode.</param>
      <param name="procedures">Procedures to be exported.</param>
      <returns>Whether the execution was successful.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Signals.IGettableSignalController">
      <summary>Qualifies a controller that can set its signals' states.</summary>
    </member>
    <member name="P:HAL.Control.Subsystems.Signals.IGettableSignalController.MonitorSignals">
      <summary>Whether to continuously monitor changes.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Signals.IGettableSignalController.GetValue(HAL.Communications.ElectricSignal)">
      <summary>Sets the value of the remote signal linked to the given signal.</summary>
      <param name="signal">Signal to get.</param>
      <returns>Value of the remote signal.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Signals.ISettableSignalController">
      <summary>Qualifies a controller that can set its signals' states.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Signals.ISettableSignalController.SetValue(HAL.Communications.ElectricSignal,HAL.Units.Electrical.V)">
      <summary>Sets the value of the remote signal linked to the given signal.</summary>
      <param name="signal">Signal to set.</param>
      <param name="value">Value to assign.</param>
      <returns>Whether the assignment was successful.</returns>
    </member>
    <member name="M:HAL.Control.Subsystems.Signals.ISettableSignalController.SetValue(HAL.Communications.ElectricSignal,System.Boolean)">
      <summary>Sets the value of the remote signal linked to the given signal.</summary>
      <param name="signal">Signal to set.</param>
      <param name="value">Value to assign.</param>
      <returns>Whether the assignment was successful.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Signals.ISignalController">
      <summary>Qualifies a signal operator.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Signals.ISignalController.MapSignal(HAL.Communications.ElectricSignal)">
      <summary>Maps a signal to its remote equivalent using its current mapping value.</summary>
      <param name="signal">Signal to map.</param>
      <returns>Whether an equivalent signal was found and successfully mapped.</returns>
    </member>
    <member name="M:HAL.Control.Subsystems.Signals.ISignalController.MapSignal(HAL.Communications.ElectricSignal,System.Int32)">
      <summary>Maps a signal to its remote equivalent using the given mapping value.</summary>
      <param name="signal">Signal to map.</param>
      <param name="mappingOverride">Mapping value to use.</param>
      <returns>Whether an equivalent signal was found and successfully mapped.</returns>
    </member>
    <member name="M:HAL.Control.Subsystems.Signals.ISignalController.MapSignal(HAL.Communications.ElectricSignal,System.String)">
      <summary>Maps a signal to its remote equivalent using the given mapping value.</summary>
      <param name="signal">Signal to map.</param>
      <param name="mappingOverride">Mapping value to use.</param>
      <returns>Whether an equivalent signal was found and successfully mapped.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Storage.FileSystemOperation">
      <summary>Supported operations to be applied to files and directories.</summary>
    </member>
    <member name="F:HAL.Control.Subsystems.Storage.FileSystemOperation.Upload">
      <summary>Copies a file or directory from this computer to the robot controller.</summary>
    </member>
    <member name="F:HAL.Control.Subsystems.Storage.FileSystemOperation.Download">
      <summary>Copies a file or directory from the robot controller to this computer.</summary>
    </member>
    <member name="F:HAL.Control.Subsystems.Storage.FileSystemOperation.Move">
      <summary>Moves a file or directory on the robot controller.</summary>
    </member>
    <member name="F:HAL.Control.Subsystems.Storage.FileSystemOperation.Duplicate">
      <summary>Duplicates a file or directory on the robot controller.</summary>
    </member>
    <member name="F:HAL.Control.Subsystems.Storage.FileSystemOperation.Delete">
      <summary>Deletes a file or directory on the robot controller.</summary>
    </member>
    <member name="F:HAL.Control.Subsystems.Storage.FileSystemOperation.Rename">
      <summary>Renames a file or directory on the robot controller.</summary>
    </member>
    <member name="T:HAL.Control.Subsystems.Storage.IBackupCapableController">
      <summary>Qualifies a controller that can be backed up.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Storage.IBackupCapableController.Backup(System.String,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,System.String)">
      <summary>Backs up the controller.</summary>
      <param name="destination">Local destination path to which the controller content should be backed up.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="alias">Backup alias.</param>
      <returns>Whether the execution was successful.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.Storage.IFileSystemController">
      <summary>Qualifies a controller with an editable file system.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.Storage.IFileSystemController.TryEditFileSystem(HAL.Control.Subsystems.Storage.FileSystemOperation,System.String,System.String)">
      <summary>Edits files or directories of the controller.</summary>
      <param name="operation">Operation to be performed.</param>
      <param name="sourcePath">Source path on which to perform the operation.</param>
      <param name="targetPath">Target path for the operation, if applicable.</param>
      <returns>Whether the execution was successful.</returns>
    </member>
    <member name="T:HAL.Control.Subsystems.SubsystemManager">
      <summary>Base implementation of a <see cref="T:HAL.Control.Subsystems.IControllerSubsystem" /> manager.</summary>
    </member>
    <member name="M:HAL.Control.Subsystems.SubsystemManager.#ctor(HAL.Control.IController)">
      <summary>Creates a new <see cref="T:HAL.Control.Subsystems.SubsystemManager" /> for the specified controller.</summary>
      <param name="controller">Associated controller.</param>
    </member>
    <member name="P:HAL.Control.Subsystems.SubsystemManager.Controller">
      <summary>Associated controller.</summary>
    </member>
    <member name="P:HAL.Control.Subsystems.SubsystemManager.Subsystems">
      <summary>Controller subsystems.</summary>
    </member>
    <member name="T:HAL.Diagnosis.Collisions.CollisionDiagnosis">
      <summary>Diagnoses collisions between two groups of objects.</summary>
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnosis.#ctor(System.Collections.Generic.IEnumerable{HAL.Objects.Parts.Part},System.Collections.Generic.IEnumerable{HAL.Objects.Parts.Part},HAL.Units.Length.m,HAL.Diagnosis.DiagnosisPrecision,HAL.Alerts.AlertLevel,System.Action{HAL.Diagnosis.IDiagnosis},System.Boolean)">
      <summary>Creates a collision diagnosis for two groups of parts.</summary>
      <param name="threshold">Shortest acceptable distance between parts of different groups.</param>
      <param name="groupA"> First group of parts to test for collisions.</param>
      <param name="groupB"> Second group of parts to test for collisions.</param>
      <param name="precision">Precision of the diagnosis.</param>
      <param name="criticality">Specifies the <see cref="T:HAL.Alerts.AlertLevel" /> from which a diagnostic is considered critical, thus halting further diagnoses.</param>
      <param name="followedBy">Callback method to be invoked upon diagnosis completion.</param>
      <param name="isEnabled">Whether this diagnosis is enabled.</param>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnosis.GroupA">
      <summary>First group of parts to test.</summary>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnosis.GroupB">
      <summary>Second group of parts to test.</summary>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnosis.Threshold">
      <summary>Shortest acceptable distance between parts of different groups.</summary>
    </member>
    <member name="T:HAL.Diagnosis.Collisions.CollisionDiagnostic">
      <summary>Collision diagnostic.</summary>
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnostic.#ctor(HAL.Diagnosis.DiagnosisPrecision,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert})">
      <summary>Creates a collision diagnostic.</summary>
      <param name="precision">Diagnosis precision.</param>
      <param name="notifications">Collision notifications.</param>
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnostic.#ctor(HAL.Diagnosis.DiagnosisPrecision,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Collections.Generic.Dictionary{HAL.Objects.Parts.Part,System.Collections.Generic.List{HAL.Objects.Parts.Part}},System.Collections.Generic.IEnumerable{HAL.Spatial.Curves.Line})">
      <summary>Creates a collision diagnostic.</summary>
      <param name="precision">Diagnosis precision.</param>
      <param name="notifications">Collision notifications.</param>
      <param name="colliding">Colliding parts.</param>
      <param name="location">Collision location.</param>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnostic.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnostic.Notifications">
      <summary>Diagnostic notifications.</summary>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnostic.Precision">
      <summary>Precision of the diagnosis emitting this diagnostic.</summary>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnostic.Colliding">
      <summary>Colliding parts.</summary>
    </member>
    <member name="P:HAL.Diagnosis.Collisions.CollisionDiagnostic.Location">
      <summary>Collision location.</summary>
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnostic.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnostic.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnostic.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Diagnosis.Collisions.CollisionDiagnostic.ToString">
      <summary>Cast to string.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="T:HAL.Diagnosis.DiagnosisBase">
      <summary>Base implementation of a diagnosis.</summary>
    </member>
    <member name="E:HAL.Diagnosis.DiagnosisBase.Completed">
      <summary>Raised on completion of the diagnosis.</summary>
    </member>
    <member name="M:HAL.Diagnosis.DiagnosisBase.#ctor(HAL.Diagnosis.DiagnosisPrecision,HAL.Alerts.AlertLevel,System.Action{HAL.Diagnosis.IDiagnosis},System.Boolean)">
      <summary>Creates a diagnosis.</summary>
      <param name="precision">Precision of the diagnosis.</param>
      <param name="criticality">Specifies the <see cref="T:HAL.Alerts.AlertLevel" /> from which a diagnostic is considered critical, thus halting further diagnoses.</param>
      <param name="followedBy">Callback method to be invoked upon diagnosis completion.</param>
      <param name="isEnabled">Whether this diagnosis is enabled.</param>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.CompletionCallback">
      <summary>Callback method to be invoked upon diagnosis completion.</summary>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.Criticality">
      <summary>Specifies the <see cref="T:HAL.Alerts.AlertLevel" /> from which a diagnostic is considered critical, thus halting further diagnoses.</summary>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.Diagnostic">
      <summary>Diagnostic.</summary>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.IsComplete">
      <summary>Whether this diagnosis is complete.</summary>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.IsEnabled">
      <summary>Whether this diagnosis is enabled.</summary>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.IsRunning">
      <summary>Whether this diagnostic is being executed.</summary>
    </member>
    <member name="P:HAL.Diagnosis.DiagnosisBase.Precision">
      <summary>Precision of the diagnosis.</summary>
    </member>
    <member name="M:HAL.Diagnosis.DiagnosisBase.Diagnose(System.IProgress{System.String},System.Nullable{System.Threading.CancellationToken})">
      <summary>Runs a diagnosis.</summary>
      <param name="progress">Progress report callback.</param>
      <param name="cancellationToken">Cancellation token.</param>
      <returns>Resulting diagnostic.</returns>
    </member>
    <member name="M:HAL.Diagnosis.DiagnosisBase.InitializeDiagnosis(System.IProgress{System.String},System.Nullable{System.Threading.CancellationToken})">
      <summary>Initializes the diagnosis.</summary>
      <param name="progress">Progress report callback.</param>
      <param name="cancellationToken">Cancellation token.</param>
    </member>
    <member name="M:HAL.Diagnosis.DiagnosisBase.RunDiagnosis(System.IProgress{System.String},System.Nullable{System.Threading.CancellationToken})">
      <summary>Diagnosis.</summary>
      <param name="progress">Progress report callback.</param>
      <param name="cancellationToken">Cancellation token.</param>
    </member>
    <member name="M:HAL.Diagnosis.DiagnosisBase.TerminateDiagnosis(System.IProgress{System.String},System.Nullable{System.Threading.CancellationToken})">
      <summary>Terminates the diagnosis.</summary>
      <param name="progress">Progress report callback.</param>
      <param name="cancellationToken">Cancellation token.</param>
    </member>
    <member name="T:HAL.Diagnosis.DiagnosisPrecision">
      <summary>Enumerates supported diagnosis precisions.</summary>
    </member>
    <member name="F:HAL.Diagnosis.DiagnosisPrecision.Representative">
      <summary>Completes the diagnosis as soon as representative diagnostic can be emitted.</summary>
    </member>
    <member name="F:HAL.Diagnosis.DiagnosisPrecision.Thorough">
      <summary>Completes the diagnosis when all parameters have been fully checked.</summary>
    </member>
    <member name="T:HAL.Diagnosis.IDiagnosis">
      <summary>Qualifies a diagnosis.</summary>
    </member>
    <member name="E:HAL.Diagnosis.IDiagnosis.Completed">
      <summary>Raised on completion of the diagnosis.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.CompletionCallback">
      <summary>Callback method to be invoked upon diagnosis completion.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.Criticality">
      <summary>Specifies the <see cref="T:HAL.Alerts.AlertLevel" /> from which a diagnostic is considered critical, thus halting further diagnoses.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.Diagnostic">
      <summary>Diagnostic.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.IsComplete">
      <summary>Whether this diagnosis is complete.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.IsEnabled">
      <summary>Whether this diagnosis is enabled.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.IsRunning">
      <summary>Whether this diagnostic is being executed.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnosis.Precision">
      <summary>Precision of the diagnosis.</summary>
    </member>
    <member name="M:HAL.Diagnosis.IDiagnosis.Diagnose(System.IProgress{System.String},System.Nullable{System.Threading.CancellationToken})">
      <summary>Runs a diagnosis.</summary>
      <param name="progress">Progress report callback.</param>
      <param name="cancellationToken">Cancellation token.</param>
      <returns>Resulting diagnostic.</returns>
    </member>
    <member name="T:HAL.Diagnosis.IDiagnostic">
      <summary>Qualifies the result of a <see cref="T:HAL.Diagnosis.IDiagnosis" />.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnostic.Notifications">
      <summary>Diagnostic notifications.</summary>
    </member>
    <member name="P:HAL.Diagnosis.IDiagnostic.Precision">
      <summary>Precision of the diagnosis emitting this diagnostic.</summary>
    </member>
    <member name="T:HAL.Display.Color">
      <summary>ARGB color.</summary>
    </member>
    <member name="M:HAL.Display.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Creates a color for ARGB channels between 0 and 255.</summary>
      <param name="alpha">Alpha (transparency) channel.</param>
      <param name="red">Red channel.</param>
      <param name="green">Green channel.</param>
      <param name="blue">Blue channel.</param>
    </member>
    <member name="P:HAL.Display.Color.Alpha">
      <summary>Alpha (transparency) channel.</summary>
    </member>
    <member name="P:HAL.Display.Color.Red">
      <summary>Red channel.</summary>
    </member>
    <member name="P:HAL.Display.Color.Green">
      <summary>Green channel.</summary>
    </member>
    <member name="P:HAL.Display.Color.Blue">
      <summary>Blue channel.</summary>
    </member>
    <member name="F:HAL.Display.Color.Black">
      <summary>Black.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey1">
      <summary>Grey 1 (darker).</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey2">
      <summary>Grey 2.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey3">
      <summary>Grey 3.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey4">
      <summary>Grey 4.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey5">
      <summary>Grey 5.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey6">
      <summary>Grey 6.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey7">
      <summary>Grey 7.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey8">
      <summary>Grey 8.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey9">
      <summary>Grey 9.</summary>
    </member>
    <member name="F:HAL.Display.Color.Grey10">
      <summary>Grey 10 (lighter).</summary>
    </member>
    <member name="F:HAL.Display.Color.White">
      <summary>White.</summary>
    </member>
    <member name="F:HAL.Display.Color.PureRed">
      <summary>Red.</summary>
    </member>
    <member name="F:HAL.Display.Color.PureGreen">
      <summary>Green.</summary>
    </member>
    <member name="F:HAL.Display.Color.PureBlue">
      <summary>Blue.</summary>
    </member>
    <member name="F:HAL.Display.Color.Default">
      <summary>Default HAL color..</summary>
    </member>
    <member name="T:HAL.Display.ColorSettings">
      <summary>Colors being used for the display.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.Error">
      <summary>Color attributed to objects with errors.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.Warning">
      <summary>Color attributed to objects with warnings.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.Remark">
      <summary>Color attributed to objects with remarks.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.Information">
      <summary>Color attributed to objects with information alerts.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.XAxis">
      <summary>Color attributed to the X axis.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.YAxis">
      <summary>Color attributed to the Y axis.</summary>
    </member>
    <member name="P:HAL.Display.ColorSettings.ZAxis">
      <summary>Color attributed to the Z axis.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayDefinition.Low">
      <summary>Low definition.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayDefinition.Medium">
      <summary>Regular definition.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayDefinition.High">
      <summary>High definition.</summary>
    </member>
    <member name="T:HAL.Display.Styles.DisplayEmphasis">
      <summary>Enumerates emphasis levels available for displayable objects.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayEmphasis.None">
      <summary>No accentuation.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayEmphasis.Faint">
      <summary>Faint accentuation.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayEmphasis.Regular">
      <summary>Regular accentuation.</summary>
    </member>
    <member name="F:HAL.Display.Styles.DisplayEmphasis.Emphasized">
      <summary>Marked accentuation.</summary>
    </member>
    <member name="T:HAL.Display.Styles.MeshDisplayStyle">
      <summary>Mesh display style.</summary>
    </member>
    <member name="M:HAL.Display.Styles.MeshDisplayStyle.#ctor">
      <summary>Default mesh display style.</summary>
    </member>
    <member name="M:HAL.Display.Styles.MeshDisplayStyle.#ctor(HAL.Display.Styles.MeshDisplayStyle)">
      <summary>Creates a copy of an existing mesh display style.</summary>
      <param name="clonee">Cloned display style.</param>
    </member>
    <member name="M:HAL.Display.Styles.MeshDisplayStyle.#ctor(HAL.Display.Color,HAL.Display.Color,HAL.Display.Color,HAL.Display.Color,System.Byte,System.Byte,System.Byte)">
      <summary>Mesh display style.</summary>
      <param name="diffuseColor">Mesh diffuse color.</param>
      <param name="ambientColor">Color reflected by the object when in the shadows.</param>
      <param name="emissiveColor">Color of the light emitted by the object.</param>
      <param name="specularColor">Color reflected from the object if it is shiny.</param>
      <param name="gloss">Gloss factor.</param>
      <param name="reflectivity">Reflectivity factor.</param>
      <param name="emissivity">Emissivity factor.</param>
    </member>
    <member name="P:HAL.Display.Styles.MeshDisplayStyle.Gloss">
      <summary>Gloss factor.</summary>
    </member>
    <member name="P:HAL.Display.Styles.MeshDisplayStyle.Reflectivity">
      <summary>Reflectivity factor.</summary>
    </member>
    <member name="P:HAL.Display.Styles.MeshDisplayStyle.Emissivity">
      <summary>Emissivity factor.</summary>
    </member>
    <member name="P:HAL.Display.Styles.MeshDisplayStyle.AmbientColor">
      <summary>Color reflected by the object when in the shadows.</summary>
    </member>
    <member name="P:HAL.Display.Styles.MeshDisplayStyle.EmissiveColor">
      <summary>Color of the light emitted by the object.</summary>
    </member>
    <member name="P:HAL.Display.Styles.MeshDisplayStyle.SpecularColor">
      <summary>Color reflected from the object if it is shiny.</summary>
    </member>
    <member name="M:HAL.Display.Styles.MeshDisplayStyle.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Display.Styles.PatchDisplayStyle">
      <summary>Display style for patches (closed, planar polygons).</summary>
    </member>
    <member name="M:HAL.Display.Styles.PatchDisplayStyle.#ctor">
      <summary>Default patch display style.</summary>
    </member>
    <member name="M:HAL.Display.Styles.PatchDisplayStyle.#ctor(HAL.Display.Color,HAL.Units.Length.Length,System.Int32,HAL.Display.Color)">
      <summary>Creates a display style for a wireframe object.</summary>
      <param name="color">Stroke color.</param>
      <param name="scaledThickness">Stroke scaled thickness.</param>
      <param name="thickness">Stroke thickness in px.</param>
      <param name="fill">Fill color.</param>
    </member>
    <member name="P:HAL.Display.Styles.PatchDisplayStyle.Fill">
      <summary>Fill color.</summary>
    </member>
    <member name="T:HAL.Display.Styles.TextDisplayStyle">
      <summary>Text display style.</summary>
    </member>
    <member name="P:HAL.Display.Styles.TextDisplayStyle.Frame">
      <summary>World-based coordinate system on which to draw the text. The text will stay on the XY plane, along X.</summary>
    </member>
    <member name="P:HAL.Display.Styles.TextDisplayStyle.Font">
      <summary>Text font.</summary>
    </member>
    <member name="P:HAL.Display.Styles.TextDisplayStyle.ScaledSize">
      <summary>Scaled text size.</summary>
    </member>
    <member name="P:HAL.Display.Styles.TextDisplayStyle.Size">
      <summary>Text size in pt.</summary>
    </member>
    <member name="T:HAL.Display.Styles.WireframeDisplayStyle">
      <summary>Stores the display settings of an object.</summary>
    </member>
    <member name="M:HAL.Display.Styles.WireframeDisplayStyle.#ctor">
      <summary>Default display style.</summary>
    </member>
    <member name="M:HAL.Display.Styles.WireframeDisplayStyle.#ctor(HAL.Display.Color,HAL.Units.Length.Length,System.Int32,HAL.Display.Styles.DisplayDefinition,HAL.Alerts.AlertLevel)">
      <summary>Creates a display style for a wireframe object.</summary>
      <param name="color">Color.</param>
      <param name="scaledThickness">Scaled thickness.</param>
      <param name="thickness">Thickness (in pixels).</param>
      <param name="definition">Definition (level of details) to use for the rendering.</param>
      <param name="notificationLevel">Notification level - if any - associated to the object to style.</param>
    </member>
    <member name="P:HAL.Display.Styles.WireframeDisplayStyle.Color">
      <summary>Diffuse color or the object. Default: black.</summary>
    </member>
    <member name="P:HAL.Display.Styles.WireframeDisplayStyle.Definition">
      <summary>Definition (level of details) to use for the rendering.</summary>
    </member>
    <member name="P:HAL.Display.Styles.WireframeDisplayStyle.NotificationLevel">
      <summary>Notification level - if any - associated to the object to style.</summary>
    </member>
    <member name="P:HAL.Display.Styles.WireframeDisplayStyle.ScaledThickness">
      <summary>Scaled thickness of the object wireframe. If UseScaledPixels is active, this value will be converted to pixels and override Thickness. Default: 1mm.</summary>
    </member>
    <member name="P:HAL.Display.Styles.WireframeDisplayStyle.Thickness">
      <summary>Thickness of the object wireframe in pixels. When possible, use ScaledThicknes instead. Default: 1px.</summary>
    </member>
    <member name="T:HAL.Events.EventBuilder">
      <summary>Contains all the information necessary to describe the conditions of a Trigger being triggered. Used for serialization and export as well as restricting usage.</summary>
    </member>
    <member name="T:HAL.Events.HAL_BlockingActionEventBuilder">
      <summary>Contains all the information necessary to describe the conditions of a <see cref="T:HAL.Events.Trigger" /> being triggered according to some property of a <see cref="T:HAL.Procedures.Actions.BlockingAction" />.</summary>
    </member>
    <member name="M:HAL.Events.HAL_BlockingActionEventBuilder.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Events.HAL_BlockingActionEventBuilder.#ctor(HAL.Procedures.Actions.BlockingAction,HAL.Procedures.Actions.TriggerAction)">
      <summary>Creates a <see cref="T:HAL.Events.HAL_BlockingActionEventBuilder" />.</summary>
      <param name="action">The <see cref="T:HAL.Procedures.Actions.BlockingAction" /> whose properties the event will depend upon.</param>
      <param name="triggerAction">A <see cref="T:HAL.Procedures.Actions.TriggerAction" /> that will be executed when the event is triggered.</param>
    </member>
    <member name="M:HAL.Events.HAL_BlockingActionEventBuilder.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:HAL.Events.HAL_ObjectGraphUpdateEventArgs">
      <summary>The arguments sent with an event denoting that a <see cref="N:HAL.Objects" /> has been updated.</summary>
    </member>
    <member name="M:HAL.Events.HAL_ObjectGraphUpdateEventArgs.#ctor(System.Collections.Generic.List{HAL.Objects.Parts.Part})">
      <summary>Default constructor with a list of the objects which have been changed.</summary>
      <param name="changedObjects">The objects that have been changed.</param>
    </member>
    <member name="P:HAL.Events.HAL_ObjectGraphUpdateEventArgs.ChangedObjects">
      <summary>A list of the objects that have been changed within the graph when it was updated.</summary>
    </member>
    <member name="T:HAL.Extensibility.HAL_ExpressionContainer">
      <summary>Contains an evaluable expression and its variables.</summary>
    </member>
    <member name="P:HAL.Extensibility.HAL_ExpressionContainer.Expression">
      <summary>The expression to evaluate.</summary>
    </member>
    <member name="P:HAL.Extensibility.HAL_ExpressionContainer.ExpressionText">
      <summary>The textual representation of the expression to be edited by the user.</summary>
    </member>
    <member name="P:HAL.Extensibility.HAL_ExpressionContainer.LastParseException">
      <summary>The exception associated with the previous evaluation of the textual representation.</summary>
    </member>
    <member name="P:HAL.Extensibility.HAL_ExpressionContainer.IsValid">
      <summary>Whether the last parse was executed successfully and therefore the Expression is evaluable, <c>false</c> otherwise.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_ExpressionContainer.EvaluateSyntax">
      <summary>Extracts an evaluable expression from a textual representation.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_ExpressionContainer.ExpressionFromSyntax(System.String,HAL.Serialization.HAL_ParseException@,System.Boolean)">
      <summary>Extracts an evaluable expression from a textual representation.</summary>
      <param name="expression">The textual representation of the expression.</param>
      <param name="exception">The exception thrown by the parsing, <c>null</c> if completed successfully.</param>
      <param name="allowVariables">Whether variables should be accepted.</param>
      <returns>An evaluable expression representative of the textual input, <c>null</c> if the syntax is invalid.</returns>
    </member>
    <member name="T:HAL.Extensibility.HAL_ExpressionManager">
      <summary>Contains a collection of expressions and utility functions that allow access and modification of them.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_ExpressionManager.SetValue(HAL.Bindings.IPropertyIdentifer,HAL.Extensibility.HAL_ExpressionContainer)">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="key">The key of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ExpressionManager.AddExpression(HAL.Extensibility.HAL_ExpressionContainer)">
      <summary>Adds an expression to the manager under a new key.</summary>
      <param name="value">The expression container to add to the manager.</param>
      <returns>The key under which the expression is stored.</returns>
    </member>
    <member name="T:HAL.Extensibility.HAL_Extensible">
      <summary>Marks a class as having a property manager and associated methods.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.#ctor">
      <summary>Creates an extensible object.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.#ctor(System.String)">
      <summary>Creates an extensible object.</summary>
      <param name="alias">Alias.</param>
    </member>
    <member name="P:HAL.Extensibility.HAL_Extensible.PropertyManager">
      <summary>Maintains the properties of an object as a dictionary of measurements.</summary>
    </member>
    <member name="P:HAL.Extensibility.HAL_Extensible.ExpressionManager">
      <summary>Maintains the expressions of an object as a set of expressions.</summary>
    </member>
    <member name="P:HAL.Extensibility.HAL_Extensible.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.GetValue(System.String)">
      <summary>Returns a value from this object's property manager.</summary>
      <param name="alias">Alias to be measured.</param>
      <returns>Returns a value if the tag was found, null otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.GetValue(HAL.Bindings.IPropertyIdentifer)">
      <summary>Returns a value from this object using a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="key">Key to be measured.</param>
      <returns>Returns a value if the value pointed to by the key was found, null otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.SetValue(System.String,System.Object)">
      <summary>Sets the value of a property in this object's property manager.</summary>
      <param name="alias">The alias of the property to be changed.</param>
      <param name="value">The value to set the property to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.SetValue(HAL.Bindings.IPropertyIdentifer,System.Object)">
      <summary>Sets the value of a property in this object or a child object using a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="key">The alias of the property to be changed.</param>
      <param name="value">The value to set the property to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.InitializePropertyManager">
      <summary>Initializes the property manager.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="E:HAL.Extensibility.HAL_Extensible.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_Extensible.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Extensibility.HAL_PropertyManager">
      <summary>State of a state machine, as a collection of variables expressed in specific value units.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_PropertyManager.#ctor">
      <summary>Empty constructor. Used for serialization only.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_PropertyManager.#ctor(HAL.Extensibility.IExtensible)">
      <summary>Creates a new <see cref="T:HAL.Extensibility.HAL_PropertyManager" /> hosted by the given extensible object.</summary>
      <param name="obj">The object whose properties these are.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_PropertyManager.#ctor(HAL.Extensibility.HAL_PropertyManager,HAL.Extensibility.IExtensible)">
      <summary>Creates a <see cref="T:HAL.Extensibility.HAL_PropertyManager" /> with the properties of the given manager. Optionally re-hosted by the given extensible object.</summary>
      <param name="clonee">An existing <see cref="T:HAL.Extensibility.HAL_PropertyManager" /> whose properties should be copied to this new one.</param>
      <param name="obj">The object whose properties these are.</param>
    </member>
    <member name="P:HAL.Extensibility.HAL_PropertyManager.Host">
      <summary>The object to which these properties should be added.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_PropertyManager.Merge(HAL.Extensibility.IExtensible,System.Boolean)">
      <summary>Merges the properties contained herein with those of the other object.</summary>
      <param name="obj">The object whose properties should be merged into this manager.</param>
      <param name="override">If <c>true</c> values present in this manager will be overwritten by duplicate keys in the incoming manager.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_PropertyManager.SetValue(HAL.Bindings.IPropertyIdentifer,System.Object)">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="key">The key of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_PropertyManager.Clone">
      <inheritdoc />
    </member>
    <member name="T:HAL.Extensibility.HAL_ValueManager`1">
      <summary>Base value manager class to allow access to a collection of objects via a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <typeparam name="TValue">The type of value to be stored.</typeparam>
    </member>
    <member name="P:HAL.Extensibility.HAL_ValueManager`1.Identity">
      <summary>Manager identifier.</summary>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.AddEntry(System.String,`0,System.Boolean)">
      <summary>Adds an entry to this property manager.</summary>
      <param name="alias">The custom name to give the property.</param>
      <param name="value">The value of the property.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>Whether the entry was successfully added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.AddEntry(HAL.Bindings.IPropertyIdentifer,`0,System.Boolean)">
      <summary>Adds an entry to this property manager.</summary>
      <param name="key">The key to store the property under.</param>
      <param name="value">The value of the property.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>Whether the entry was successfully added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.AddEntry(System.Collections.Generic.KeyValuePair{HAL.Bindings.IPropertyIdentifer,`0},System.Boolean)">
      <summary>Adds an entry to this property manager.</summary>
      <param name="pair">A key and value pair containing the key to store the property under and the value to assign it.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>Whether the entry was successfully added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.SetAlias(System.String)">
      <summary>Sets the name of this property manager.</summary>
      <param name="alias">The new alias for this property manager.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.Merge(HAL.Extensibility.HAL_ValueManager{`0},System.Boolean)">
      <summary>Merges the properties contained herein with those of the other object.</summary>
      <param name="manager">The manager whose properties should be merged into this manager.</param>
      <param name="override">If <c>true</c> values present in this manager will be overwritten by duplicate keys in the incoming manager.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.GetValue(HAL.Bindings.IPropertyIdentifer)">
      <summary>Get the value of a key, from a specified key.</summary>
      <param name="key">Key alias to search in the state dictionary.</param>
      <returns>Returns the value corresponding to the specified key, or null if the key was not found.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.GetValue(System.String)">
      <summary>Returns a state value from this object or its children using a '.' separated Tag.</summary>
      <remarks>i.e: Joint1.Angle will return Angle from child object Joint1.</remarks>
      <param name="alias">Tag to be measured.</param>
      <returns>Returns a value if the tag was found. Null otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.GetValue``1(HAL.Bindings.IPropertyIdentifer)">
      <summary>Get the value of a key, from a specified key.</summary>
      <param name="key">Key alias to search in the state dictionary.</param>
      <returns>Returns the value corresponding to the specified key, or null if the key was not found.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.GetValue``1(System.String)">
      <summary>Get the value of a key, from a specified key alias.</summary>
      <param name="alias">Key alias to search in the state dictionary.</param>
      <returns>Returns the value corresponding to the specified key, or null if the key was not found.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.SetValue(System.String,`0)">
      <summary>Updates the value of an attribute based on its name.</summary>
      <param name="alias">The name of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.SetValue(System.Collections.Generic.KeyValuePair{HAL.Bindings.IPropertyIdentifer,`0})">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="stateAttribute">A KeyValuePair containing the name of the attribute and a new value for it.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.SetValue(HAL.Bindings.IPropertyIdentifer,`0)">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="key">The key of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.GetKey(System.String)">
      <summary>Gets a key whose alias or full name matches the given string.</summary>
      <param name="key">The name or alias to search for.</param>
      <returns>A <see cref="T:HAL.Bindings.PropertyKey" /> that corresponds to the given key or null if nothing is found.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#SetValue(System.String,System.Object)">
      <summary>Updates the value of an attribute based on its name.</summary>
      <param name="alias">The name of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#SetValue(System.Collections.Generic.KeyValuePair{HAL.Bindings.IPropertyIdentifer,System.Object})">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="pair">A KeyValuePair containing the name of the attribute and a new value for it.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#SetValue(HAL.Bindings.IPropertyIdentifer,System.Object)">
      <summary>Updates the value of an attribute based on its key.</summary>
      <param name="key">The key of the attribute.</param>
      <param name="value">The value to update the attribute to.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#Merge(HAL.Bindings.IValueManager,System.Boolean)">
      <summary>Merges the properties contained herein with those of the other object.</summary>
      <param name="manager">The manager whose properties should be merged into this manager.</param>
      <param name="override">If <c>true</c> values present in this manager will be overwritten by duplicate keys in the incoming manager.</param>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#AddEntry(System.String,System.Object,System.Boolean)">
      <summary>Adds an entry to this property manager.</summary>
      <param name="alias">The custom name to give the property.</param>
      <param name="value">The value of the property.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>Whether the entry was successfully added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#AddEntry(HAL.Bindings.IPropertyIdentifer,System.Object,System.Boolean)">
      <summary>Adds an entry to this property manager.</summary>
      <param name="key">The key to store the property under.</param>
      <param name="value">The value of the property.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>Whether the entry was successfully added, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.HAL_ValueManager`1.HAL#Bindings#IValueManager#AddEntry(System.Collections.Generic.KeyValuePair{HAL.Bindings.IPropertyIdentifer,System.Object},System.Boolean)">
      <summary>Adds an entry to this property manager.</summary>
      <param name="pair">A key and value pair containing the key to store the property under and the value to assign it.</param>
      <param name="override">If <c>true</c> this will override existing properties of the same name.</param>
      <returns>Whether the entry was successfully added, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:HAL.Extensibility.HAL_ValueManager`1.Item(System.String)">
      <summary>Extends the reach of the indexer operator to access StateDictionary values directly from the state using the key alias as the access key. Used: TValue someValue = someState[someKey];</summary>
      <param name="key">The key to find.</param>
    </member>
    <member name="T:HAL.Extensibility.IExtensible">
      <summary>Marks a class as having property and expression managers.</summary>
    </member>
    <member name="P:HAL.Extensibility.IExtensible.PropertyManager">
      <summary>Maintains the properties of an object as a dictionary of objects.</summary>
    </member>
    <member name="P:HAL.Extensibility.IExtensible.ExpressionManager">
      <summary>Maintains the expressions of an object as a set of expressions.</summary>
    </member>
    <member name="M:HAL.Extensibility.IExtensible.GetValue(System.String)">
      <summary>Returns a value from this object's property manager.</summary>
      <param name="alias">Alias to be measured.</param>
      <returns>Returns a value if the tag was found, null otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.IExtensible.GetValue(HAL.Bindings.IPropertyIdentifer)">
      <summary>Returns a value from this object or a child object using a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="key">Key to be measured.</param>
      <returns>Returns a value if the value pointed to by the key was found, null otherwise.</returns>
    </member>
    <member name="M:HAL.Extensibility.IExtensible.SetValue(System.String,System.Object)">
      <summary>Sets the value of a property in this object's property manager.</summary>
      <param name="alias">The alias of the property to be changed.</param>
      <param name="value">The value to set the property to.</param>
    </member>
    <member name="M:HAL.Extensibility.IExtensible.SetValue(HAL.Bindings.IPropertyIdentifer,System.Object)">
      <summary>Sets the value of a property in this object or a child object using a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="key">The alias of the property to be changed.</param>
      <param name="value">The value to set the property to.</param>
    </member>
    <member name="M:HAL.Extensibility.IExtensible.InitializePropertyManager">
      <summary>Initializes the property manager.</summary>
    </member>
    <member name="M:HAL.Extensibility.IExtensible.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Graphs.GenericEdge">
      <summary>Connects two vertex within a <see cref="T:HAL.Graphs.GenericGraph" />.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericEdge.#ctor(HAL.Graphs.GenericVertex,HAL.Graphs.GenericVertex)">
      <summary>Initializes a new connection between two objects.</summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
    </member>
    <member name="P:HAL.Graphs.GenericEdge.Ordinal">
      <summary>An index defining the position of this in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Graphs.GenericEdge.IsDefaultRootConnection">
      <summary>Defines whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Graphs.GenericEdge.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="P:HAL.Graphs.GenericEdge.Source">
      <summary>Gets the source vertex.</summary>
    </member>
    <member name="P:HAL.Graphs.GenericEdge.Target">
      <summary>Gets the target vertex.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericEdge.CloneEdge">
      <summary>Creates a new connection with all the same properties as the original.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Graphs.GenericEdge.CloneEdgeTo(HAL.Graphs.GenericVertex,HAL.Graphs.GenericVertex,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="E:HAL.Graphs.GenericEdge.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericEdge.Dispose(System.Boolean)">
      <summary>Dispose method.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Graphs.GenericEdge.Dispose">
      <summary>Dispose method.</summary>
    </member>
    <member name="T:HAL.Graphs.GenericGraph">
      <summary>Generic graph implementation.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericGraph.#ctor">
      <summary>Creates an empty Graph.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericGraph.#ctor(HAL.Graphs.GenericVertex)">
      <summary>Creates a Graph with the given vertex as the root.</summary>
      <param name="root">The root vertex of this graph.</param>
    </member>
    <member name="P:HAL.Graphs.GenericGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericGraph.CreateDefaultEdge(HAL.Graphs.GenericVertex,HAL.Graphs.GenericVertex)">
      <summary>Creates a default implementation of a graph edge.</summary>
      <param name="source">The start vertex of the edge.</param>
      <param name="target">The end vertex of the edge.</param>
    </member>
    <member name="T:HAL.Graphs.GenericVertex">
      <summary>Generic graph vertex.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericVertex.#ctor(System.Object)">
      <summary>Creates a generic vertex with a payload.</summary>
      <param name="payload">Payload.</param>
    </member>
    <member name="P:HAL.Graphs.GenericVertex.Payload">
      <summary>Vertex payload.</summary>
    </member>
    <member name="P:HAL.Graphs.GenericVertex.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericVertex.Clone">
      <summary>Creates a duplicate of this vertex.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericVertex.Equals(HAL.Graphs.GenericVertex)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Graphs.GenericVertex.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="E:HAL.Graphs.GenericVertex.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Graphs.GenericVertex.Dispose(System.Boolean)">
      <summary>Dispose method.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Graphs.GenericVertex.Dispose">
      <summary>Dispose method.</summary>
    </member>
    <member name="T:HAL.Graphs.Graph`3">
      <summary>Maintains a collection of items and the connectivity between them.</summary>
      <typeparam name="TVertex">The type of vertex that this graph contains. </typeparam>
      <typeparam name="TEdge">The type of edge that connects the vertices. </typeparam>
      <typeparam name="TGraph">Self-referencing graph type to call strongly-typed methods on self. </typeparam>
    </member>
    <member name="M:HAL.Graphs.Graph`3.#ctor">
      <summary>Creates an empty Graph.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.#ctor(`0)">
      <summary>Creates a Graph with the given vertex as the root.</summary>
      <param name="root">The root vertex of this graph.</param>
    </member>
    <member name="P:HAL.Graphs.Graph`3.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.Root">
      <summary>The vertex that acts as the base of this graph</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.ChangedItems">
      <summary>The items of this graph that have sent property change notifications since this list was last cleared.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.Roots">
      <summary>Retrieves the root vertices of this graph.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.IsContainmentCheckEnabled">
      <summary>Whether the edge and vertex containment verification is currently active on this graph.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.IsThreadSafe">
      <summary>Whether addition and removal methods need to ensure thread safety. Off by default.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.PropertyManager">
      <summary>Maintains the properties of an object as a dictionary of measurements.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.ExpressionManager">
      <summary>Maintains the expressions of an object as a set of expressions.</summary>
    </member>
    <member name="P:HAL.Graphs.Graph`3.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.OutVertices(`0)">
      <summary>Returns all the child vertices of a given vertex.</summary>
      <param name="baseVertex">The parent vertex whose children we want.</param>
      <returns>Ordered collection of vertices connected to the input vertex or an empty enumerable if the vertex isn't found.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.SubGraphFrom(`0)">
      <summary>Returns a subgraph of this Graph that begins at the given vertex.</summary>
      <param name="rootVertex">The vertex that the subgraph should start at.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.RecursiveCollectEdges(`0,`2)">
      <summary>Copies all of the out edges, and their vertices, of particular vertex to the given graph. Recurs on the target vertices of all of the edges to collect a complete subgraph.</summary>
      <param name="vertex">The vertex to collect the edges from.</param>
      <param name="graph">The graph to add the edges and vertices to.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddRootLinkedVertex(`0,System.Boolean)">
      <summary>Adds an action to this graph and connects it directly to the root vertex.</summary>
      <param name="newVertex">The new action to be connected to the root</param>
      <param name="addSubscriptions">If <c>true</c> recursively subscribes properties to their children's notifications.</param>
      <returns>Successful addition</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddDefaultRootLinkedVertex(`0,System.Boolean)">
      <summary>Adds an action to this graph and connects it directly to the root vertex as a default root connection.</summary>
      <param name="newVertex">The new action to be connected to the root</param>
      <param name="addSubscriptions">If <c>true</c> recursively subscribes properties to their children's notifications.</param>
      <returns>Successful addition</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddSubVertex(`0,`0,`1,System.Boolean)">
      <summary>Adds a vertex to this graph and connects it to the root vertex specified with the edge specified.</summary>
      <param name="newVertex">The new vertex to be connected to the root</param>
      <param name="root">The vertex to connect the new vertex to.</param>
      <param name="edge">The edge to connect the root and vertex.</param>
      <param name="addSubscriptions">If <c>true</c> recursively subscribes properties to their children's notifications.</param>
      <returns>Successful addition</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddSubVertex(`0,`0,System.Boolean)">
      <summary>Adds a vertex to this graph and connects it to the root vertex specified with a default edge implementation.</summary>
      <param name="newVertex">The new vertex to be connected to the root</param>
      <param name="root">The vertex to connect the new vertex to.</param>
      <param name="addSubscriptions">If <c>true</c> recursively subscribes properties to their children's notifications.</param>
      <returns>Successful addition</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddSubVertices(System.Collections.Generic.IEnumerable{`0},`0)">
      <summary>Adds a number of vertices to the graph as children of the given root.</summary>
      <param name="vertices">The vertices to add.</param>
      <param name="root">The vertex that should be the root of these vertices.</param>
      <returns>Successful addition of all the vertices.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddSubGraph(`2,`0)">
      <summary>Adds a complete graph to this one and connects all its roots to the vertex given.</summary>
      <param name="subgraph">The vertex and edge structure to add.</param>
      <param name="root">The vertex that should be the root of this subgraph's vertices.</param>
      <returns>Successful addition of all the vertices.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddSubGraph(`2)">
      <summary>Adds a complete graph to this one.</summary>
      <param name="subgraph">The vertex and edge structure to add.</param>
      <returns>Successful addition of all the vertices.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.RemoveFrom(`0)">
      <summary>Removes the given vertex and all its children.</summary>
      <param name="vertex">Vertex.</param>
      <returns>Whether all vertices were successfully removed.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.CreateDefaultEdge(`0,`0)">
      <summary>Creates a default implementation of a graph edge.</summary>
      <param name="source">The start vertex of the edge.</param>
      <param name="target">The end vertex of the edge.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddVertex(`0)">
      <summary>Adds a vertex to the graph if it does not already exist.</summary>
      <param name="vertex">The vertex to add.</param>
      <returns>Successful addition of this vertex.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.RemoveVertex(`0)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Graphs.Graph`3.ReplaceVertex(`0,`0)">
      <summary>Replaces a given vertex with another one everywhere in the graph.</summary>
      <param name="existing">The vertex to replace.</param>
      <param name="replacement">The vertex that should be placed instead.</param>
      <returns>
        <c>true</c> is the replacement was successful.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.RemoveIsolatedVertices">
      <summary>Removes all isolated vertices (those with no associated edges) from the graph.</summary>
      <returns>Number of vertices removed.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.AddEdge(`1)">
      <summary>Adds the edge to the graph.</summary>
      <param name="edge">The edge to be added to the graph.</param>
      <returns>true if the edge was added, otherwise false.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.RemoveEdge(`1)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Graphs.Graph`3.EnsureOutEdgeOrdinals(`0)">
      <summary>Ensures the correct ordering of the out edges of a given vertex.</summary>
      <param name="vertex">The vertex whose out edges should be ordered.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.OrderedOutEdges(`0)">
      <summary>Gets the out edges of an given vertex, sorted by their ordinals.</summary>
      <param name="vertex">The vertex whose out edges should be returned.</param>
      <returns>Enumerable of edges in the order defined by their ordinals.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.MoveEdgeForwards(`1)">
      <summary>Moves the given edge forwards, towards the start, of its source vertex's out edges by one place.</summary>
      <param name="edge">The edge to be moved.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.MoveEdgeBackwards(`1)">
      <summary>Moves the given edge backwards, towards the end, of its source vertex's out edges by one place.</summary>
      <param name="edge">The edge to be moved.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.MoveEdgeTo(`1,System.Int32)">
      <summary>Moves the given edge to the given location of its source vertex's out edges.</summary>
      <remarks> 
            This method will ensure the correct unbroken numbering of edge's source vertex's out edges.
            This means that the numbering of other edges may change by more than +-1 if they were not correctly numbered previously
            and that the target ordinal may not be the final ordinal in the case that it is greater than the number of edges e.g. target 100 in a sequence of 5 edges will become 5th in the list.
            </remarks>
      <param name="edge">The edge to be moved.</param>
      <param name="ordinal">The new, zero-based location in the vertex's edge list.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Clone">
      <summary>Creates a dissociated duplicate of this graph.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Clone(`2,System.Collections.Generic.Dictionary{`0,`0}@,System.Collections.Generic.Dictionary{`1,`1}@)">
      <summary>Creates a dissociated duplicate of this graph.</summary>
      <param name="clone">Clone graph.</param>
      <param name="vertexMap">Dictionary of vertices in the form [original, cloned]</param>
      <param name="edgeMap">Dictionary of edges in the form [original, cloned]</param>
      <returns>Cloned graph.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.LeastCommonAncestor(`0,`0)">
      <summary>Finds the closest common ancestor of two session graph entities.</summary>
      <param name="a">The first entity.</param>
      <param name="b">The second entity.</param>
      <returns>The vertex in the session graph that both entities share as an ancestor.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.LeastCommonAncestor(`0,`0,System.Collections.Generic.List{`0}@,System.Collections.Generic.List{`0}@)">
      <summary>Finds the closest common ancestor of two session graph entities. The path from 'a' to 'b' can be composed as 'a' -&gt; pathToA -&gt; returnValue -&gt; pathToB(reversed) -&gt; 'b'.</summary>
      <param name="a">The first entity.</param>
      <param name="b">The second entity.</param>
      <param name="pathToA">The list of objects between 'a' and the least common ancestor.</param>
      <param name="pathToB">The list of objects between 'b' and the least common ancestor.</param>
      <returns>The vertex in the session graph that both entities share as an ancestor.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.ConnectionsIn(`0)">
      <summary>Connections to the vertex, i.e. to which it is linked.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.ConnectionsOut(`0)">
      <summary>Connections from the vertex.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetParent(`0)">
      <summary>Gets the entity in the graph that is the parent of the given vertex.</summary>
      <param name="vertex">The vertex whose parent should be retrieved.</param>
      <returns>The parent of the given vertex.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetAllParents(`0)">
      <summary>Gets the entities in the graph that have the given vertex as a child.</summary>
      <param name="vertex">The vertex whose parent should be retrieved.</param>
      <returns>The parents of the given vertex.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.MaxDepth">
      <summary>Calculates the maximum depth of this <see cref="T:HAL.Graphs.Graph`3" />.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.DepthFromVertex(`0,System.UInt32)">
      <summary>Analyzes the <see cref="T:HAL.Graphs.Graph`3" /> depth (how many nodes there are before the last leaf) from a particular vertex.</summary>
      <param name="vertex">Vertex to analyze.</param>
      <param name="curDepth">Initial depth.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetNext``1(`0,System.Collections.Generic.List{`0},System.Func{`1,System.Boolean})">
      <summary>Finds the first vertex of type TType after the base vertex given. Will return null if there is no vertex that fits this definition.</summary>
      <param name="vertex">The vertex from which to search.</param>
      <param name="exemptVertices">Optionally, Vertices that should be skipped over during the search.</param>
      <param name="edgeValidator">Function to validate an edge in searches. If <c>null</c> all edges are considered valid.</param>
      <typeparam name="TType">The type of vertex to search for. </typeparam>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetPrevious``1(`0,System.Collections.Generic.List{`0},System.Func{`1,System.Boolean})">
      <summary>Finds the first vertex of type TType prior to the base vertex given. Will return null if there is no vertex that fits this definition.</summary>
      <param name="vertex">The vertex from which to search.</param>
      <param name="exemptVertices">Optionally, Vertices that should be skipped over during the search.</param>
      <param name="edgeValidator">Function to validate an edge in searches. If <c>null</c> all edges are considered valid.</param>
      <typeparam name="TType">The type of vertex to search for. </typeparam>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetAllNext``1(`0)">
      <summary>Finds the first vertex of type TType prior to the base vertex given via each of its out edges. Will return an empty list if there is no vertex that fits this definition.</summary>
      <param name="vertex">The vertex from which to search.</param>
      <typeparam name="TType">The type of vertex to search for. </typeparam>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetAllPrevious``1(`0)">
      <summary> Finds the first vertex of type TType after the base vertex given via each of its in edges. Will return an empty list if there is no vertex that fits this definition.</summary>
      <param name="vertex">The vertex from which to search.</param>
      <typeparam name="TType">The type of vertex to search for. </typeparam>
    </member>
    <member name="M:HAL.Graphs.Graph`3.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetValue(System.String)">
      <summary>Returns a value from this object's property manager.</summary>
      <param name="alias">Alias to be measured.</param>
      <returns>Returns a value if the tag was found, null otherwise.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.GetValue(HAL.Bindings.IPropertyIdentifer)">
      <summary>Returns a value from this object or a child object using a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="key">Key to be measured.</param>
      <returns>Returns a value if the value pointed to by the key was found, null otherwise.</returns>
    </member>
    <member name="M:HAL.Graphs.Graph`3.SetValue(System.String,System.Object)">
      <summary>Sets the value of a property in this object's property manager.</summary>
      <param name="alias">The alias of the property to be changed.</param>
      <param name="value">The value to set the property to.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.SetValue(HAL.Bindings.IPropertyIdentifer,System.Object)">
      <summary>Sets the value of a property in this object or a child object using a <see cref="T:HAL.Bindings.IPropertyIdentifer" />.</summary>
      <param name="key">The alias of the property to be changed.</param>
      <param name="value">The value to set the property to.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.InitializePropertyManager">
      <summary>Initializes the property manager.</summary>
    </member>
    <member name="E:HAL.Graphs.Graph`3.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Graphs.Graph`3.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Graphs.ISimulatableGraph">
      <summary>Qualifies a graph which state can be changed during the execution of a simulation.</summary>
    </member>
    <member name="M:HAL.Graphs.ISimulatableGraph.ResetAllSimulatedContent">
      <summary>Resets the simulated content of this graph.</summary>
    </member>
    <member name="T:HAL.Graphs.ISimulatableGraph`2">
      <summary>Qualifies a graph which state can be changed during the execution of a simulation.</summary>
      <typeparam name="TVertex">Graph vertex type.</typeparam>
      <typeparam name="TEdge">Graph edge type.</typeparam>
    </member>
    <member name="M:HAL.Graphs.ISimulatableGraph`2.ResetSimulatedEdge(`1)">
      <summary>Resets the specified simulated edge of this graph.</summary>
      <param name="edge">Edge to be reset to its original state.</param>
    </member>
    <member name="M:HAL.Graphs.ISimulatableGraph`2.ResetSimulatedVertex(`0)">
      <summary>Resets the specified simulated vertex of this graph.</summary>
      <param name="vertex">Vertex to be reset to its original state.</param>
    </member>
    <member name="T:HAL.Graphs.Persistence">
      <summary>Enumerates supported types of graph object persistence.</summary>
    </member>
    <member name="F:HAL.Graphs.Persistence.Permanent">
      <summary>Permanent.</summary>
    </member>
    <member name="F:HAL.Graphs.Persistence.Simulated">
      <summary>Simulated.</summary>
    </member>
    <member name="T:HAL.Kinematics.Calibration">
      <summary>Calibration description.</summary>
    </member>
    <member name="M:HAL.Kinematics.Calibration.#ctor">
      <summary>Empty constructor, initializing a null calibration.</summary>
    </member>
    <member name="M:HAL.Kinematics.Calibration.#ctor(System.DateTime,HAL.Units.IUnitizedValue,System.Collections.Generic.Dictionary{System.String,HAL.Units.IUnitizedValue},HAL.Kinematics.CalibrationState)">
      <summary>Creates a calibration from specified values.</summary>
      <param name="date">Date of the calibration.</param>
      <param name="method">Method of calibration, as a reference measurement.</param>
      <param name="deviationMap">Deviation map of the object.</param>
      <param name="state">State of the calibration.</param>
    </member>
    <member name="M:HAL.Kinematics.Calibration.#ctor(HAL.Kinematics.Calibration)">
      <summary>Creates a calibration from an existing one.</summary>
      <param name="clonee">Calibration to clone.</param>
    </member>
    <member name="P:HAL.Kinematics.Calibration.Date">
      <summary>Calibration date.</summary>
    </member>
    <member name="P:HAL.Kinematics.Calibration.Method">
      <summary>Calibration method, as a reference measurement.</summary>
    </member>
    <member name="P:HAL.Kinematics.Calibration.DeviationMap">
      <summary>Deviation map of the object.</summary>
    </member>
    <member name="P:HAL.Kinematics.Calibration.State">
      <summary>State of the calibration.</summary>
    </member>
    <member name="P:HAL.Kinematics.Calibration.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Kinematics.Calibration.Clone">
      <inheritdoc />
    </member>
    <member name="E:HAL.Kinematics.Calibration.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Kinematics.Calibration.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Kinematics.Calibration.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Kinematics.Calibration.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Kinematics.CalibrationState">
      <summary>Enumerates calibration states supported by HAL.</summary>
    </member>
    <member name="F:HAL.Kinematics.CalibrationState.Unset">
      <summary>Unset (invalid).</summary>
    </member>
    <member name="F:HAL.Kinematics.CalibrationState.Uncalibrated">
      <summary>Uncalibrated.</summary>
    </member>
    <member name="F:HAL.Kinematics.CalibrationState.Calibrating">
      <summary>Calibrating...</summary>
    </member>
    <member name="F:HAL.Kinematics.CalibrationState.Calibrated">
      <summary>Calibrated.</summary>
    </member>
    <member name="T:HAL.Kinematics.IEligibleForFkReturn">
      <summary>Qualifies classes able to represent a kinematics solution value.</summary>
    </member>
    <member name="M:HAL.Kinematics.IEligibleForFkReturn.FromMatrix(HAL.Spatial.MatrixFrame)">
      <summary>Utility converter to enable the use of MatrixFrame in kinematics solvers.</summary>
      <param name="matrix">Input matrix.</param>
      <returns>Returns a converted matrix.</returns>
    </member>
    <member name="M:HAL.Kinematics.IEligibleForFkReturn.FromDualQuaternion(HAL.Numerics.DualQuaternion)">
      <summary>Utility converter to enable the use of DualQuaternion in kinematics solvers.</summary>
      <param name="dualQuaternion">Input DualQuaternion.</param>
      <returns>Returns a converted DualQuaternion.</returns>
    </member>
    <member name="T:HAL.Kinematics.KinematicGraph">
      <summary>Kinematic graph, representing an organized set of physical <see cref="T:HAL.Objects.Parts.Part">segments</see> (excludes <see cref="T:HAL.Objects.Placeholder">placeholders</see>) linked by <see cref="T:HAL.Objects.Joint">joints</see>.<see cref="T:HAL.Objects.Placeholder">Placeholders</see> and all graph elements are present in the <see cref="T:HAL.Objects.ObjectGraph" />.</summary>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.Create(HAL.Objects.Mechanisms.Mechanism,System.Boolean,HAL.Kinematics.KinematicGraph@)">
      <summary>Creates a kinematic graph from a given mechanism.</summary>
      <param name="instance">Mechanism from which to extrapolate the graph.</param>
      <param name="rawMechanism">Whether the mechanism should be reduced.</param>
      <param name="kinematicGraph">Resulting kinematic graph.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.Clone(HAL.Kinematics.KinematicGraph,HAL.Kinematics.KinematicGraph@)">
      <summary>Clones a kinematic graph from a given mechanism.</summary>
      <param name="instance">Mechanism from which to extrapolate the graph.</param>
      <param name="clone">Cloned graph.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.#ctor(HAL.Objects.Mechanisms.Mechanism,System.Nullable{HAL.Spatial.RepresentationLevel},System.Boolean)">
      <summary>Extracts a kinematic graph from an existing mechanism.</summary>
      <param name="mechanism">Mechanism from which to extract the kinematic graph.</param>
      <param name="maximumFidelity">Defines the highest fidelity representation of geometries to maintain.</param>
      <param name="skipReduce">Whether to skip the reduction of the incoming mechanism.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.#ctor(HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Mechanisms.Mechanism,System.Nullable{HAL.Spatial.RepresentationLevel},System.Collections.Generic.List{HAL.Kinematics.KinematicGraph},System.Boolean,System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex},System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex},System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphVertex,HAL.Spatial.MatrixFrame},System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphEdge})">
      <summary>Extracts a kinematic graph from an existing mechanism.</summary>
      <param name="mechanism">Mechanism from which to extract the kinematic graph.</param>
      <param name="existingClone">Preexisting clone of the incoming mechanism.</param>
      <param name="maximumFidelity">Defines the highest fidelity representation of geometries to maintain.</param>
      <param name="parallelGroups">Graphs at the same level of nesting as this.</param>
      <param name="skipReduce">Whether to skip the reduction of the incoming mechanism.</param>
      <param name="vertexMap">If skip clone, pre-cloned vertices.</param>
      <param name="vertexHistory">Dictionary of vertices that have been removed.</param>
      <param name="vertexOffsets">Location of vertices that have been removed relative to their new hosts.</param>
      <param name="edgeMap">Dictionary of edges in the form [original, cloned].</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.#ctor(HAL.Identifier,HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new kinematic graph from the specified components.</summary>
      <param name="identity">Identity.</param>
      <param name="components">Components.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.#ctor(System.Collections.Generic.IEnumerable{HAL.Kinematics.KinematicGraph})">
      <summary>Combines several kinematic graphs as disconnected mechanical groups.</summary>
      <param name="mechanicalGroups">Mechanical groups to add.</param>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.Creator">
      <summary>Mechanism used to create this Kinematic Graph.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.BaseLocation">
      <summary>Location of the base with respect to the world.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.MechanicalGroups">
      <summary>Subsets of this mechanism to be considered separately, i.e: positioner, active tool, etc.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.ForwardSolver">
      <summary>Forward kinematics solver.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.InverseSolver">
      <summary>Inverse kinematics solver.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.CoordinatedCentralizedInverseSolver">
      <summary>Inverse kinematics solver for the entire mechanism.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.Morphology">
      <summary>Mechanism morphology.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.GroupMorphology">
      <summary>Mechanism group morphology.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.PositionerType">
      <summary>Positioner type.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.VirtualMainChainMechanisms">
      <summary>Virtual main chain mechanisms.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.VirtualSubMechanisms">
      <summary>Virtual sub mechanisms.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.VirtualLoopChainMechanisms">
      <summary>Virtual loop chain mechanisms.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.SolvingHierarchy">
      <summary>Mechanism solving hierarchy.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.IsStatic">
      <summary>Whether the mechanism is, itself, incapable of motion.</summary>
    </member>
    <member name="P:HAL.Kinematics.KinematicGraph.IsActive">
      <summary>Whether all joints, if any, of the mechanism are passive.</summary>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.Jog(HAL.Motion.JointPositions)">
      <summary>Jogs the mechanism to the specified joint positions.</summary>
      <param name="position">Joint positions to reach.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.Clone">
      <iheritdoc />
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.Clone(System.Boolean)">
      <iheritdoc />
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.Clone(System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphEdge}@,System.Collections.Generic.Dictionary{HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Mechanisms.Mechanism}@,System.Boolean)">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Mechanism" /> from an existing one and its cloned components.</summary>
      <param name="vertices">Cloned vertices.</param>
      <param name="edges">Cloned edges.</param>
      <param name="subMechanisms">Sub-mechanisms.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh the identity.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.CloneWithoutContent(System.Boolean)">
      <iheritdoc />
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.AddMechanicalGroup(HAL.Kinematics.KinematicGraph)">
      <summary>Adds a mechanical group to this kinematic graph.</summary>
      <param name="mechanicalGroup">Mechanical group.</param>
      <returns>Whether the addition was successful.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.SolveForwardKinematics``1(HAL.Motion.JointPositions)">
      <summary>Computes the frame skeleton of a mechanism at the specified position in joint space.</summary>
      <typeparam name="TReturned">Frame type to be returned.</typeparam>
      <param name="jointPositions">The joint values to apply to the solving.</param>
      <returns>Mechanism skeleton, as the frames of the joints and connections relative to the base.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.SolveInverseKinematics(HAL.Motion.JointPositions,HAL.Kinematics.IEligibleForFkReturn,HAL.Kinematics.Solvers.Inverse.InverseSolverResults@,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings)">
      <summary>Solves the inverse kinematics for a given target and an initial position.</summary>
      <param name="initialJointPositions">Initial mechanism joint positions.</param>
      <param name="target">Frame to reach.</param>
      <param name="solverResults">Inverse solver results.</param>
      <param name="solverSettings">Inverse solver settings.</param>
      <returns>Mechanism joint positions needed to reach the target.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.GetSubMechanismJointPosition(HAL.Motion.JointPositions,HAL.Kinematics.KinematicGraph)">
      <summary>Retrieves the joint positions which relate to a given sub mechanism.</summary>
      <param name="jointPosition">Complete joint position for this.</param>
      <param name="subMechanism">Sub-mechanism for which the joint values are to be retrieved.</param>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocateInBase(HAL.Objects.IObjectGraphVertex)">
      <summary>Locates a vertex in the base of this graph.</summary>
      <param name="vertex">Vertex to locate.</param>
      <returns>Location of vertex or null if not found.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocateInWorld(HAL.Objects.IObjectGraphVertex)">
      <summary>Locates a vertex in the world according to this graph.</summary>
      <param name="vertex">Vertex to locate.</param>
      <returns>Location of vertex in world or, if no information prior to the base is known, returns location in base.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocateInBase(HAL.Motion.Settings.Target)">
      <summary>Locates a Cartesian target in the base of this graph.</summary>
      <param name="target">Target to locate.</param>
      <returns>Location of target or <c>null</c> if host not found not found.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocateInWorld(HAL.Motion.Settings.Target)">
      <summary>Locates a Cartesian target in the world according to this graph.</summary>
      <param name="target">Target to locate.</param>
      <returns>Location of target in world or, if no information prior to the base is known, returns location in base.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocateInBase(HAL.Spatial.ReferencedFrame)">
      <summary>Locates a frame in the base of this graph.</summary>
      <param name="frame">Frame to locate.</param>
      <returns>Location of frame or <c>null</c> if host not found not found.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocateInWorld(HAL.Spatial.ReferencedFrame)">
      <summary>Locates a frame in the world according to this graph.</summary>
      <param name="frame">Frame to locate.</param>
      <returns>Location of frame in world or, if no information prior to the base is known, returns location in base.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.LocationFromForwardSolver(HAL.Objects.IObjectGraphVertex)">
      <summary>Retrieves the current FK calculated position of a vertex.</summary>
      <param name="vertex">Vertex to locate.</param>
      <returns>null if vertex is not found.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.ReReference(HAL.Motion.Settings.Target)">
      <summary>Creates a duplicate target with the Cartesian frame referenced to an item in this graph.</summary>
      <param name="target">Target whose reference should be changed.</param>
      <returns>
        <c>null</c> if the Cartesian frame of the input target is <c>null</c> or the current reference of the target has not been incorporated into this graph.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.ReReference(HAL.Spatial.ReferencedFrame)">
      <summary>Creates a duplicate frame with the Cartesian frame referenced to an item in this graph.</summary>
      <param name="referencedFrame">Frame whose reference should be changed.</param>
      <returns>
        <c>null</c> if the input is <c>null</c> or the current reference of the frame has not been incorporated into this graph.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.GetEquivalentEdge(HAL.Objects.IObjectGraphEdge)">
      <summary>Gets the edge equivalent to the input edge from this graph. Useful to find edges from the creator mechanism.</summary>
      <param name="edge">Edge to find.</param>
      <returns>The input edge if it is already in the graph, otherwise the cloned edge if it has been retained in the graph. Otherwise null.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.GetEquivalentVertex(HAL.Objects.IObjectGraphVertex,HAL.Spatial.MatrixFrame@)">
      <summary>Gets the vertex equivalent to the input vertex from this graph. Useful to find vertex from the creator mechanism.</summary>
      <param name="vertex">Vertex to find.</param>
      <param name="offset">
      </param>
      <returns>The input vertex if it is already in the graph, otherwise the cloned vertex assuming the input vertex was used to create the graph. Otherwise null.</returns>
    </member>
    <member name="M:HAL.Kinematics.KinematicGraph.ExtractMechanicalGroupFor(HAL.Identifier)">
      <summary>Extracts the mechanical group whose identity matches the input.</summary>
      <param name="identity">Identity.</param>
      <returns>Mechanical group with the matching identity or null if none is found.</returns>
    </member>
    <member name="T:HAL.Kinematics.SolverManagers.MechanismGroupMorphology">
      <summary>Enumerates supported mechanism group morphologies.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupMorphology.Vertical">
      <summary>Vertical mechanism group (serial).</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupMorphology.Horizontal">
      <summary>Horizontal mechanism group (tree).</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupMorphology.Unknown">
      <summary>Unknown mechanism group.</summary>
    </member>
    <member name="T:HAL.Kinematics.SolverManagers.MechanismGroupSolvingHierarchy">
      <summary>Enumerates mechanism hierarchy.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupSolvingHierarchy.Unkown">
      <summary>Slave mechanism hierarchy.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupSolvingHierarchy.Master">
      <summary>Master mechanism hierarchy.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupSolvingHierarchy.Slave">
      <summary>Slave mechanism hierarchy.</summary>
    </member>
    <member name="T:HAL.Kinematics.SolverManagers.MechanismGroupSolvingStrategy">
      <summary>Enumerates supported mechanism group solving strategies.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupSolvingStrategy.Independent">
      <summary>Independent solving.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupSolvingStrategy.CoordinatedDecentralized">
      <summary>Coordinated decentralized solving.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.MechanismGroupSolvingStrategy.CoordinatedCentralized">
      <summary>Coordinated centralized solving.</summary>
    </member>
    <member name="T:HAL.Kinematics.SolverManagers.PositionerType">
      <summary>Enumerates supported positioner types.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.PositionerType.Unknown">
      <summary>Unknown positioner type.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.PositionerType.Prismatic">
      <summary>Prismatic positioner.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.PositionerType.Rotary">
      <summary>Rotary positioner.</summary>
    </member>
    <member name="F:HAL.Kinematics.SolverManagers.PositionerType.Mixed">
      <summary>Mixed positioner.</summary>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver">
      <summary>Qualifies a forward kinematics solver.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.Mechanism">
      <summary>Solved mechanism.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.Alerts">
      <summary>Alerts related to this object.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.SkeletonDictionary">
      <summary>Skeleton dictionary.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.SkeletonDictionaryDual">
      <summary>Skeleton dictionary in dualQuaternion.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.JointPositionDictionary">
      <summary>Joint position dictionary.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.ForwardSolve``1(HAL.Motion.JointPositions,HAL.Kinematics.IEligibleForFkReturn)">
      <summary>Computes the frame skeleton of a mechanism at the specified position in joint space.</summary>
      <typeparam name="TReturned">Frame type to be returned.</typeparam>
      <param name="jointPosition">The joint values to apply to the solving.</param>
      <param name="rootFrameOffset">Root frame offset.</param>
      <returns>Mechanism skeleton, as the frames of the joints and connections relative to the base.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Forward.IForwardKinematicsSolver.ForwardSolveDual(HAL.Motion.JointPositions,HAL.Numerics.DualQuaternion)">
      <summary>Computes the frame skeleton in dual quaternion of a mechanism at the specified position in joint space.</summary>
      <param name="jointPosition">The joint values to apply to the solving.</param>
      <param name="rootFrameOffset">Root frame offset.</param>
      <returns>Mechanism skeleton in dual quaternion, as the frames of the joints and connections relative to the base.</returns>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints">
      <summary>Target constraints in Cartesian space, specifying the degrees of freedom of the target to reach.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.#ctor">
      <summary>Creates a default set of Cartesian target constraints, fully constraining the target.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.#ctor(HAL.Units.UnitizedInterval{HAL.Units.Length.m},HAL.Units.UnitizedInterval{HAL.Units.Length.m},HAL.Units.UnitizedInterval{HAL.Units.Length.m})">
      <summary>Creates a set of Cartesian target constraints with a degree of freedom in orientation.</summary>
      <param name="xTranslation">Translation freedom along X.</param>
      <param name="yTranslation">Translation freedom along Y.</param>
      <param name="zTranslation">Translation freedom along Z.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.#ctor(HAL.Units.UnitizedInterval{HAL.Units.Length.m},HAL.Units.UnitizedInterval{HAL.Units.Length.m},HAL.Units.UnitizedInterval{HAL.Units.Length.m},HAL.Spatial.Axis,HAL.Units.UnitizedInterval{HAL.Units.Angle.rad})">
      <summary>Creates a set of Cartesian target constraints with a degree of freedom in orientation.</summary>
      <param name="xTranslation">Translation freedom along X.</param>
      <param name="yTranslation">Translation freedom along Y.</param>
      <param name="zTranslation">Translation freedom along Z.</param>
      <param name="axis">Axis around which the target should be free to rotate.</param>
      <param name="rotation">Rotation range around the specified axis.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.#ctor(HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsXTranslationConstrained">
      <summary>Whether the frame position is constrained along X.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.XTranslation">
      <summary>Translation freedom along X.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsYTranslationConstrained">
      <summary>Whether the frame position is constrained along Y.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.YTranslation">
      <summary>Translation freedom along Y.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsZTranslationConstrained">
      <summary>Whether the frame position is constrained along Z.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.ZTranslation">
      <summary>Translation freedom along Z.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsXRotationConstrained">
      <summary>Whether the frame orientation is constrained around X.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.XRotation">
      <summary>Rotation freedom around X.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsYRotationConstrained">
      <summary>Whether the frame orientation is constrained around Y.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.YRotation">
      <summary>Rotation freedom around Y.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsZRotationConstrained">
      <summary>Whether the frame orientation is constrained around Z.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.ZRotation">
      <summary>Rotation freedom around Z.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsPositionFixed">
      <summary>Whether the current constraints are fixing the frame position.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsOrientationFixed">
      <summary>Whether the current constraints are fixing the frame orientation.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsOrientationConstrained">
      <summary>Whether the current constraints are somehow constraining the frame orientation.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsOverConstrainedOrientation">
      <summary>Whether the current constraints are over-constraining the frame orientation.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.IsValid">
      <summary>Whether these constraints are valid.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.ConstrainPosition(System.Boolean)">
      <summary>Constrains the frame position.</summary>
      <param name="lock">Whether the position should be constrained.</param>
      <returns>Updated constraints.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.ConstrainOrientation(System.Boolean,HAL.Units.UnitizedInterval{HAL.Units.Angle.rad},HAL.Units.UnitizedInterval{HAL.Units.Angle.rad},HAL.Units.UnitizedInterval{HAL.Units.Angle.rad})">
      <summary>Constrains the frame orientation.</summary>
      <param name="lock">Whether the position should be constrained.</param>
      <param name="x">Rotation range around the X axis if the target is free in orientation.</param>
      <param name="y">Rotation range around the Y axis if the target is free in orientation.</param>
      <param name="z">Rotation range around the Z axis if the target is free in orientation.</param>
      <returns>Updated constraints.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.ConstrainOrientation(System.Boolean,HAL.Units.UnitizedInterval{HAL.Units.Angle.rad})">
      <summary>Constrains the frame orientation.</summary>
      <param name="lock">Whether the position should be constrained.</param>
      <param name="range">Orientation range to be applied to each axes if the target is free in orientation.</param>
      <returns>Updated constraints.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.SetOrientationFreedom(HAL.Spatial.Axis,HAL.Units.UnitizedInterval{HAL.Units.Angle.rad})">
      <summary>Sets the orientation freedom around a specified axis.</summary>
      <param name="axis">Rotation axis.</param>
      <param name="range">Rotation range around this axis.</param>
      <returns>Updated constraints.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.Equals(HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.op_Equality(HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Settings.CartesianConstraints" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints.op_Inequality(HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Settings.CartesianConstraints" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints">
      <summary>Inverse solver mechanism constraints.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.Create(System.String,HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints@)">
      <summary>Creates a set of mechanism constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="mechanism">Mechanism to be constrained.</param>
      <param name="active">Whether each joint is allowed to move.</param>
      <param name="min">Minimum position for each joint, in m for prismatic joints or in rad for revolute joints. The joint is locked if the minimum position equals the maximum position.</param>
      <param name="max">Maximum position for each joint, in m for prismatic joints or in rad for revolute joints. The joint is locked if the minimum position equals the maximum position.</param>
      <param name="constraints">Mechanism constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.Create(System.String,HAL.Units.Time.Time,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints@)">
      <summary>Creates a set of inverse solver mechanism constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="maxTime">Maximum time allowed to find a solution.</param>
      <param name="maxIterations">Maximum number of iterations allowed to find a solution.</param>
      <param name="maxAngleRange">Maximum admissible clamping domain for angular joint.</param>
      <param name="maxAngleDelta">Maximum admissible change for angular joint.</param>
      <param name="singularityAvoidanceTolerance">Singularity detection tolerance.</param>
      <param name="singularityDetectionTolerance">Singularity detection tolerance.</param>
      <param name="maxErrorDelta">Maximum error clamping factor for out of reach targets.</param>
      <param name="meanErrorTolerance">Mean error tolerance.</param>
      <param name="jointConstraints">Joint constraints.</param>
      <param name="constraints">Inverse solver mechanism constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.#ctor(System.String,HAL.Units.Time.Time,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints)">
      <summary>Creates a set of inverse solver mechanism constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="maximumAllowedTime">Maximum time allowed to find a solution.</param>
      <param name="maximumAllowedIterations">Maximum number of iterations allowed to find a solution.</param>
      <param name="maxAngleRange">Maximum admissible clamping domain for angular joint.</param>
      <param name="maxAngleDelta">Maximum admissible change for angular joint.</param>
      <param name="singularityAvoidanceTolerance">Singularity detection tolerance.</param>
      <param name="singularityDetectionTolerance">Singularity detection tolerance.</param>
      <param name="maxErrorDelta">Maximum error clamping factor for out of reach targets.</param>
      <param name="meanErrorTolerance">Mean error tolerance.</param>
      <param name="jointConstraints">Joint constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.#ctor(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints)">
      <summary>Creates a set of constraints from an existing one.</summary>
      <param name="clonee">Constraints to be cloned.</param>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.MaximumAllowedTime">
      <summary>Maximum allowed computation time.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.MaximumAllowedIterations">
      <summary>Maximum allowed number of iterations.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.UseMaximumAllowedTime">
      <summary>Whether Maximum computation time should be used.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.MaxAngleRange">
      <summary>Maximum admissible clamping domain for angular joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.MaxAngleDelta">
      <summary>Maximum admissible change for angular joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.SingularityAvoidanceTolerance">
      <summary>Singularity avoidance tolerance.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.SingularityDetectionTolerance">
      <summary>Singularity detection tolerance.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.MaxErrorDelta">
      <summary>Maximum error clamping factor for out of reach targets.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.MeanErrorTolerance">
      <summary>Mean error tolerance.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.JointClamp">
      <summary>Joint clamp assigned to each joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.JointRange">
      <summary>Joint range assigned to each joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.JointRangeLimitAvoidance">
      <summary>Joint range limit avoidance.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.JointRangeLimitDetectionThreshold">
      <summary>Joint range limit detection threshold assigned to each joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.RevoluteJointRangeLimitDetectionThreshold">
      <summary>Default revolute joint range limit detection threshold assigned to each joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.PrismaticJointRangeLimitDetectionThreshold">
      <summary>Default prismatic joint range limit detection threshold assigned to each joint.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.Equals(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.op_Equality(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Kinematics.InverseSolverTargetConstraints" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints.op_Inequality(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Kinematics.InverseSolverTargetConstraints" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints">
      <summary>Inverse solver target constraints.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Create(System.String,HAL.Spatial.Axis,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints@)">
      <summary>Creates a set of target constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="rotationAxis">Axis around which the target is free to rotate.</param>
      <param name="minRotation">Minimum rotation around the axis. The target orientation remains fixed if this value is null.</param>
      <param name="maxRotation">Maximum rotation around the axis. The target orientation remains fixed if this value is null.</param>
      <param name="constraints">Target constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Create(System.String,System.Boolean,System.Boolean,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints@)">
      <summary>Creates a set of target constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="isPositionFree">Whether the target is free in position.</param>
      <param name="isOrientationFree">Whether the target is free in orientation.</param>
      <param name="constraints">Target constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Create(System.String,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Spatial.Axis,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints@)">
      <summary>Constrains the position of a robot in Cartesian space.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="minXTranslation">Minimum translation along X. The target X coordinate remains fixed if this value if null.</param>
      <param name="maxXTranslation">Maximum translation along X. The target X coordinate remains fixed if this value if null.</param>
      <param name="minYTranslation">Minimum translation along Y. The target Y coordinate remains fixed if this value if null.</param>
      <param name="maxYTranslation">Maximum translation along Y. The target Y coordinate remains fixed if this value if null.</param>
      <param name="minZTranslation">Minimum translation along Z. The target Z coordinate remains fixed if this value if null.</param>
      <param name="maxZTranslation">Maximum translation along Z. The target Z coordinate remains fixed if this value if null.</param>
      <param name="rotationAxis">Axis around which the target is free to rotate.</param>
      <param name="minRotation">Minimum rotation around the axis. The target orientation remains fixed if this value is null.</param>
      <param name="maxRotation">Maximum rotation around the axis. The target orientation remains fixed if this value is null.</param>
      <param name="constraints">Target constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Create(System.String,HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints,System.Boolean,System.Boolean,System.Double,System.Double,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints@)">
      <summary>Creates a set of inverse solver target constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="additionalFreedom">Additional target freedom.</param>
      <param name="isPositionFree">Free position.</param>
      <param name="isOrientationFree">Free orientation.</param>
      <param name="positionTolerance">Absolute tolerance constraining the precision in position of the result.</param>
      <param name="orientationTolerance">Absolute tolerance constraining the precision in orientation of the result.</param>
      <param name="constraints">Inverse solver target constraints.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.#ctor(System.String,HAL.Kinematics.Solvers.Inverse.Constraints.CartesianConstraints,System.Boolean,System.Boolean,System.Double,System.Double)">
      <summary>Creates a set of inverse solver target constraints.</summary>
      <param name="alias">Alias to give to these constraints.</param>
      <param name="additionalFreedom">Additional target freedom.</param>
      <param name="isPositionFree">Whether the target is free in position.</param>
      <param name="isOrientationFree">Whether the target is free in orientation.</param>
      <param name="positionTolerance">Absolute tolerance constraining the precision in position of the result.</param>
      <param name="orientationTolerance">Absolute tolerance constraining the precision in orientation of the result.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.#ctor(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints)">
      <summary>Creates a new set of constraints from an existing one.</summary>
      <param name="clonee">Constraints to be cloned.</param>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.IsPositionFree">
      <summary>Whether target position is solved.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.IsOrientationFree">
      <summary>Whether target orientation is solved.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.AdditionalFreedom">
      <summary>Constraints in Cartesian space.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.PositionTolerance">
      <summary>Absolute tolerance constraining the precision in position of the result.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.OrientationTolerance">
      <summary>Absolute tolerance constraining the precision in orientation of the result.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Equals(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.op_Equality(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Kinematics.InverseSolverTargetConstraints" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints.op_Inequality(HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Kinematics.InverseSolverTargetConstraints" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints">
      <summary>Constrains a target in Joint space.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.#ctor(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Creates default target constraints in Joint space.</summary>
      <param name="mechanism">Acting mechanism.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.#ctor(HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.Clamp">
      <summary>Motion range assigned to each joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.Range">
      <summary>Motion range assigned to each joint.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.IsValid">
      <summary>Whether these settings are valid.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.ConstrainJoint(System.Int32,System.Boolean,HAL.Numerics.IInterval)">
      <summary>Constrains a joint.</summary>
      <param name="jointIndex">Joint index.</param>
      <param name="lock">Whether the joint should be disabled.</param>
      <param name="range">Actuation range of the joint.</param>
      <returns>Updated constraints.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.Equals(HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.op_Equality(HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Settings.JointConstraints" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints.op_Inequality(HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.JointConstraints)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Settings.JointConstraints" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.IInverseKinematicsSolver">
      <summary>Qualifies a inverse kinematics solver.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.IInverseKinematicsSolver.InverseSolve(HAL.Motion.JointPositions,HAL.Kinematics.IEligibleForFkReturn,HAL.Kinematics.Solvers.Inverse.InverseSolverResults@,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings,HAL.Kinematics.IEligibleForFkReturn,HAL.Kinematics.IEligibleForFkReturn)">
      <summary>Solves the inverse kinematics for a given target and an initial position.</summary>
      <param name="jointPosition">Initial mechanism joint positions.</param>
      <param name="target">Frame to reach.</param>
      <param name="solverResults">Inverse solver results.</param>
      <param name="solverSettings">Inverse solver settings.</param>
      <param name="rootFrameOffset">Root frame offset.</param>
      <param name="endPointFrameOffset">EndPoint frame offset.</param>
      <returns>Mechanism joint positions needed to reach the target.</returns>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.IKSolver">
      <summary>Joint target.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.IKSolver.Alerts">
      <summary>Solution alerts.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.IKSolver.Error">
      <summary>Solution error.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.IKSolver.Iterations">
      <summary>Iterations required to compute this solution.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.IKSolver.Time">
      <summary>Iterations required to compute this solution.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.IKSolver.Position">
      <summary>Resulting robot joints position.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.IKSolver.SvdS">
      <summary>SVD S values.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.IKSolver.OnNewIteration(System.Object,HAL.Kinematics.Solvers.Inverse.SingleInverseKinematicsSolver.HAL_SingleInverseKinematicsSolverBase.SolverIterationEventArgs)">
      <summary>Target to reach.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.IKSolver.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.Mechanism">
      <summary>Kinematic mechanism assembly.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.JointPositions">
      <summary>Mechanism joint positions.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.ResultingError">
      <summary>Resulting error.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.ResultingTime">
      <summary>Resulting computation time in milliseconds.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.ResultingIterations">
      <summary>Resulting number of iterations.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.Alerts">
      <summary>Alerts related to this object.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.MasterSolverResults">
      <summary>Inverse solver results for master mechanism.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverResults.SlavesSolverResults">
      <summary>Inverse solver results for slave mechanisms.</summary>
    </member>
    <member name="T:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings">
      <summary>Settings for inverse kinematic solving of kinematic graphs.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.Create(HAL.Kinematics.KinematicGraph,HAL.Motion.Settings.Kinematics.KinematicSettings,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings@)">
      <summary>Creates solver settings for the kinematic solving of a mechanism.</summary>
      <param name="mechanism">Mechanism on which to apply the constraints.</param>
      <param name="constraints">Constraints.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.SetTarget(HAL.Objects.Mechanisms.Mechanism,HAL.Motion.Settings.Target,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings@)">
      <summary>Assigns a target to the mechanism solver settings.</summary>
      <param name="settings">Settings.</param>
      <param name="target">Target.</param>
      <param name="mechanism">Mechanism for the target.</param>
      <param name="inverseSolverSettings">Settings with the target assigned.</param>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.KinematicGraph">
      <summary>Kinematic mechanism assembly.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.InitialJointPositions">
      <summary>Initial joint positions.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.Target">
      <summary>Target.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.IsTargetResolved">
      <summary>Whether the target was assigned by a resolver or explicitly.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.MasterTargetResolver">
      <summary>Method of resolution for the master's target if none is explicitly defined.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.MechanismConstraints">
      <summary>Constraints on the solving of the mechanics.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.TargetConstraints">
      <summary>Constraints and freedoms on the target.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.RootOffset">
      <summary>Offset of the root.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.EndPointOffset">
      <summary>Offset of the end point.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.SolvingStrategy">
      <summary>Solving strategy for the compound mechanism.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.MasterSolverSettings">
      <summary>Inverse solver settings for master mechanism.</summary>
    </member>
    <member name="P:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.SlaveSolverSettings">
      <summary>Inverse solver settings for slave mechanisms.</summary>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.AssignTarget(HAL.Identifier,HAL.Motion.Settings.Target)">
      <summary>Assigns a target to the settings which apply to the given mechanism.</summary>
      <param name="mechanismIdentifier">Mechanism identifier.</param>
      <param name="target">Target.</param>
      <returns>Settings to which the target was assigned.</returns>
    </member>
    <member name="M:HAL.Kinematics.Solvers.Inverse.InverseSolverSettings.EnsureMasterTarget">
      <summary>Ensures that a master target has been assigned or, if possible, resolves one.</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.HAL_VariableState">
      <summary>Enumerated states of a variable</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.HAL_VariableState.Unset">
      <summary>Unset</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.HAL_VariableState.Variable">
      <summary>Property is a named variable</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.HAL_VariableState.Ignore">
      <summary>Property is not used in a given context</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.HAL_VariableState.Constraint">
      <summary>Property must be matched by the input ActionSet/action</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.LanguageDataType">
      <summary>Stores the information necessary to reproduce an object in a machine language.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageDataType.#ctor(System.String)">
      <summary>Creates a new data type function.</summary>
      <param name="alias">Alias.</param>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageDataType.InlineDeclarationTemplate">
      <summary>The template necessary to reproduce this in line, i.e. within another function.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageDataType.DeclarationTemplate">
      <summary>The template necessary to declare this ahead of time, i.e. before its use.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageDataType.InitializationTemplate">
      <summary>The template necessary to initialize this before its use.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageDataType.CombinedDeclarationInitialization">
      <summary>Defines whether this can typically be declared and initialized in one go.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageDataType.Complete">
      <summary>Defines whether this requires further additions</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageDataType.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Linguistics.Definition.LanguageGraph">
      <summary>A collection of language elements of the same type stored as graph which maintains and merges the variables in HAL format that are required to define them. Visiting this graph in a specific manner allows the efficient extraction of language elements that correspond to the HAL objects requested.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraph.CreateDefaultEdge(HAL.Linguistics.Definition.LanguageGraphVertex,HAL.Linguistics.Definition.LanguageGraphVertex)">
      <summary>Creates a default implementation of a graph edge.</summary>
      <param name="source">The start vertex of the edge.</param>
      <param name="target">The end vertex of the edge.</param>
    </member>
    <member name="T:HAL.Linguistics.Definition.LanguageGraphEdge">
      <summary>Connects two vertex within a <see cref="T:HAL.Linguistics.Definition.LanguageGraph" />.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.Source">
      <summary>Gets the source vertex.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.Target">
      <summary>Gets the target vertex.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.LanguageGraph">
      <summary>Parent communication graph handling the bus.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.Ordinal">
      <summary>An index defining the position of this in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphEdge.IsDefaultRootConnection">
      <summary>Defines whether this is an automatically generated root connection.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.CloneEdge">
      <summary>Creates a new connection with all the same properties as the original.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.CloneEdgeTo(HAL.Linguistics.Definition.LanguageGraphVertex,HAL.Linguistics.Definition.LanguageGraphVertex,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="E:HAL.Linguistics.Definition.LanguageGraphEdge.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.Dispose(System.Boolean)">
      <summary>Overridable Dispose method.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphEdge.Dispose">
      <summary>Dispose method.</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.LanguageGraphVertex">
      <summary>Extends the information of a <see cref="T:HAL.Linguistics.Definition.SyntaxVariableDefinition" /> to allow searching and merging of variables.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphVertex.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageGraphVertex.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.Clone">
      <summary>Creates a duplicate of this action.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="E:HAL.Linguistics.Definition.LanguageGraphVertex.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageGraphVertex.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.LanguageIdentifier">
      <summary>Versioned machine language identifier.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageIdentifier.#ctor(System.String,System.String,System.String)">
      <summary>Creates a versioned machine language identifier.</summary>
      <param name="alias">Language alias.</param>
      <param name="provider">Language provider.</param>
      <param name="version">Language version.</param>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageIdentifier.Version">
      <summary>Language version.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageIdentifier.Provider">
      <summary>Language provider.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageIdentifier.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>NAME:GUID</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.LanguageIdentifier.ToConcatenatedString">
      <summary>Concatenates the parts of the identifier.</summary>
      <returns>Concatenated string representation of this object.</returns>
    </member>
    <member name="T:HAL.Linguistics.Definition.LanguageSettings">
      <summary>Stores the settings of a given language.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.Formalisms">
      <summary>A dictionary of Types which represent the units or other formalisms that should be adhered to in this file structure.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.SingleLineCommentOpen">
      <summary>The sequence of characters needed to open a single line comment.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.SingleLineCommentClose">
      <summary>The sequence of characters needed to close a single line comment.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.MultiLineCommentOpen">
      <summary>The sequence of characters needed to open a multi line comment.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.MultiLineCommentClose">
      <summary>The sequence of characters needed to close a multi line comment.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.FileStructure">
      <summary>The structure of files required for a machine to interpret a program in this language.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.LanguageSettings.ProcedureCallTemplate">
      <summary>The template required to call a procedure.</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.MachineLanguage">
      <summary>Complete description of a machine language.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.MachineLanguage.Identity">
      <summary>A description of the language. See <see cref="T:HAL.Linguistics.Definition.LanguageIdentifier" /> for more.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.MachineLanguage.PrepareExportGraph">
      <summary>Prepares an export graph from this language.</summary>
      <returns>Export graph based on this language.</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.MachineLanguage.CheckForErrors">
      <summary>Checks all of the <see cref="T:HAL.Linguistics.Definition.SyntacticFunction" />s within the language and ensures they have the appropriate information set.</summary>
      <returns>An error report for all the <see cref="T:HAL.Linguistics.Definition.SyntacticFunction" />s.</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.MachineLanguage.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Definition.MachineLanguage.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.MachineLanguage.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Definition.MachineLanguage.Generate(HAL.Linguistics.Definition.LanguageIdentifier,System.Collections.Generic.IEnumerable{HAL.Linguistics.Definition.SyntacticFunction},HAL.Linguistics.Definition.LanguageSettings)">
      <summary>Generates a language.</summary>
      <param name="identifier">Language identifier.</param>
      <param name="proposedFunctions">Functions of the language. N.B. Only complete functions will be included in the generation.</param>
      <param name="settings">Language settings.</param>
      <returns>Language.</returns>
    </member>
    <member name="T:HAL.Linguistics.Definition.NativeFunctionDescriptor">
      <summary>Describes a function of a machine language.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.NativeFunctionDescriptor.#ctor(System.String,HAL.Linguistics.Definition.NativeLanguageComponent)">
      <summary>Creates a new descriptor.</summary>
      <param name="alias">Alias.</param>
      <param name="usage">Function usage. See <see cref="T:HAL.Linguistics.Definition.NativeLanguageComponent" /> for options.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.NativeFunctionDescriptor.#ctor(HAL.Linguistics.Definition.NativeFunctionDescriptor,System.Boolean)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The descriptor to be cloned.</param>
      <param name="retainGuid">Whether to retain the GUID of the clone.</param>
    </member>
    <member name="P:HAL.Linguistics.Definition.NativeFunctionDescriptor.Description">
      <summary>What the function does when executed on a machine.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.NativeFunctionDescriptor.Syntax">
      <summary>The syntax of the function in the machine language.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.NativeFunctionDescriptor.Returns">
      <summary>The return type of the function.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.NativeFunctionDescriptor.ComponentType">
      <summary>The type of the function. See <see cref="T:HAL.Linguistics.Definition.NativeLanguageComponent" /> for available options.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.NativeFunctionDescriptor.Executor">
      <summary>Defines whether this function executes a process and therefore should be called last in a code block</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.NativeFunctionDescriptor.Clone">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Definition.NativeFunctionDescriptor.Clone(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Definition.NativeLanguageComponent">
      <summary>Classifies different uses of native language syntax</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.NativeLanguageComponent.Function">
      <summary>Functions e.g. move the TCP, mathematical expressions etc.</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.NativeLanguageComponent.FlowControl">
      <summary>Code blocks which wrap functions and determine their execution e.g. If, For etc.</summary>
    </member>
    <member name="F:HAL.Linguistics.Definition.NativeLanguageComponent.DataType">
      <summary>A class, struct or enum in the native language.</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.SyntacticFunction">
      <summary>Structured class to serialize and deserialize functions in machine languages</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.#ctor(HAL.Linguistics.Definition.NativeFunctionDescriptor)">
      <summary>Creates a new syntactic function.</summary>
      <param name="identity">Identity.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.#ctor(HAL.Linguistics.Definition.SyntacticFunction)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Item to be cloned.</param>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntacticFunction.Identity">
      <summary>The function as described in the machine language manual</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntacticFunction.Syntax">
      <summary>The function syntax as described in Meta</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntacticFunction.Complete">
      <summary>Defines whether this requires further additions</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntacticFunction.SyntaxMaps">
      <summary>Description of the variables, constraints, ignores mapped against objects to allow their rewriting in this language.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.ToString">
      <summary>Formats the Argument to be easily legible by a human lector.</summary>
      <returns>Formatted string</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntacticFunction.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Definition.Syntax">
      <summary>Syntax container with means to test its validity.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.Syntax.#ctor">
      <summary>Default constructor.  Sets syntax to string.Empty</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.Syntax.#ctor(System.String)">
      <summary>Constructs with a string. To Be Implemented</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.Syntax.OriginalString">
      <summary>Text in meta code.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.Syntax.IsValid">
      <summary>Checks the validity of the local syntax.</summary>
      <returns>Whether the syntax is valid, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:HAL.Linguistics.Definition.Syntax.PreviousException">
      <summary>The exception that was thrown at the last template generation.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.Syntax.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="E:HAL.Linguistics.Definition.Syntax.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.Syntax.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.Syntax.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Linguistics.Definition.Syntax.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.Syntax.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Linguistics.Definition.SyntaxMap">
      <summary>Stores all the information necessary for an object to be declared using a <see cref="T:HAL.Linguistics.Definition.LanguageDataType" /> template.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxMap.#ctor(System.Object,System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
      <summary>Creates a new syntax map.</summary>
      <param name="value">The value of the object that the variable definition maps to.</param>
      <param name="valueType">The type of the given object.</param>
      <param name="typeOverride">Optional. A type that this value represents. If none is given the type of the value is used.</param>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxMap.ValueType">
      <summary>The type of object described by this <see cref="T:HAL.Linguistics.Definition.SyntaxVariableDefinition" />.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxMap.Value">
      <summary>An object on which the <see cref="T:HAL.Linguistics.Definition.SyntaxVariableDefinition" /> can be mapped.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxMap.VariableDefinition">
      <summary>The variable structure required to map Value to a <see cref="T:HAL.Linguistics.Definition.LanguageDataType">DataType</see>.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxMap.Type">
      <summary>The type that this maps to.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxMap.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Linguistics.Definition.SyntaxVariableDefinition">
      <summary>Structured class to define a variable including its type, name and state.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxVariableDefinition.#ctor">
      <summary>Creates a variable definition ready to be filled.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.VariableName">
      <summary>The name of the variable.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.VariableState">
      <summary>Enumerated state to define whether the property is a variable, constraint or is ignored.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.PropertyKey">
      <summary>The property that this represents.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.TypeOverride">
      <summary>Overrides the type defined in the property key.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.Type">
      <summary>The type that this variable definition represents.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.SubVariables">
      <summary>Any variables of this object's class.</summary>
    </member>
    <member name="P:HAL.Linguistics.Definition.SyntaxVariableDefinition.Active">
      <summary>Returns whether this property is actively used in the description of the function</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxVariableDefinition.GetSubVariableDefinition(HAL.Bindings.PropertyKey)">
      <summary>Accesses the inner property of this class that matches the PropertyInfo</summary>
      <param name="propertyKey">The property to search for</param>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxVariableDefinition.VariableConstraintSwitch">
      <summary>Changes the state of this according to whether it is active and whether a variable name is properly defined</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxVariableDefinition.SubVariableInUse">
      <summary>Check whether any sub-variables are in use.</summary>
    </member>
    <member name="M:HAL.Linguistics.Definition.SyntaxVariableDefinition.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Linguistics.Export.CodeBlock">
      <summary>Stores blocks of text that represent code in a file.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.#ctor(HAL.Identifier)">
      <summary>Creates a new code block.</summary>
      <param name="identifier">Code block identity.</param>
    </member>
    <member name="P:HAL.Linguistics.Export.CodeBlock.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.CodeBlock.IsTemplated">
      <summary>Whether the value is a template and should have values assigned.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.CodeBlock.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.InitializePreSyntax(HAL.Linguistics.Export.LanguageExportGraph)">
      <param name="exportGraph">The graph in which this code block is used.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.InitializePostSyntax(HAL.Linguistics.Export.LanguageExportGraph)">
      <param name="exportGraph">The graph in which this code block is used.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.RenderInnerText(HAL.Linguistics.Export.LanguageExportGraph)">
      <summary>The textual value of this code block without indentation, commenting and other syntactic sugar.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="E:HAL.Linguistics.Export.CodeBlock.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.CodeBlock.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Export.DeclarationMode">
      <summary>Defines how a <see cref="T:HAL.Procedures.Procedure" /> is to be rendered to code.</summary>
    </member>
    <member name="F:HAL.Linguistics.Export.DeclarationMode.Inline">
      <summary>Declarations are made in line with their instructions.</summary>
    </member>
    <member name="F:HAL.Linguistics.Export.DeclarationMode.Predeclaration">
      <summary>Declarations are made before the instructions that use them.</summary>
    </member>
    <member name="T:HAL.Linguistics.Export.DirectoryCodeBlock">
      <summary>A code block with the information necessary to create a directory from its content.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.DirectoryCodeBlock.#ctor(HAL.Identifier)">
      <summary>Creates a directory code block with a given identity.</summary>
      <param name="identifier">Identifier.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.DirectoryCodeBlock.#ctor(HAL.Linguistics.Export.DirectoryCodeBlock)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The code block to be cloned.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.DirectoryCodeBlock.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="T:HAL.Linguistics.Export.FileCodeBlock">
      <summary>A code block with the information necessary to create a file from its content.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.FileCodeBlock.#ctor(HAL.Identifier)">
      <summary>Creates a file code block with a given identity.</summary>
      <param name="identifier">Identifier.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.FileCodeBlock.#ctor(HAL.Linguistics.Export.FileCodeBlock)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The code block to be cloned.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.FileCodeBlock.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="T:HAL.Linguistics.Export.HAL_PropertyCodeBlockStore">
      <summary>Stores the relationship between the code block in which a value is declared and those in which it is used.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.HAL_PropertyCodeBlockStore.DeclarationBlock">
      <summary>The block used for declaring the value.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.HAL_PropertyCodeBlockStore.UseBlock">
      <summary>The blocks in which the value is used.</summary>
    </member>
    <member name="T:HAL.Linguistics.Export.HAL_Verbosity">
      <summary>Enumerates available program translation verbosity options.</summary>
    </member>
    <member name="F:HAL.Linguistics.Export.HAL_Verbosity.OptimalForMachines">
      <summary>Minimal verbosity: best for machines.</summary>
    </member>
    <member name="F:HAL.Linguistics.Export.HAL_Verbosity.Balanced">
      <summary>Medium verbosity: compromise between performance and readability.</summary>
    </member>
    <member name="F:HAL.Linguistics.Export.HAL_Verbosity.OptimalForHumans">
      <summary>High verbosity: best for humans.</summary>
    </member>
    <member name="T:HAL.Linguistics.Export.IdentifierCodeBlock">
      <summary>Represents the identifier of an object in the <see cref="T:HAL.Linguistics.Export.LanguageExportGraph" />.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.IdentifierCodeBlock.#ctor(HAL.Linguistics.Export.IdentifierCodeBlock)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The code block to be cloned.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.IdentifierCodeBlock.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="T:HAL.Linguistics.Export.IHAL_Translatable">
      <summary>Defines a class as exportable to machine languages</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.IHAL_Translatable.CodeBlock">
      <summary>The codeblock that is derived from this exportable code element.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.IHAL_Translatable.PropertyCodeBlocks">
      <summary>The code blocks for each property of this action.</summary>
    </member>
    <member name="T:HAL.Linguistics.Export.LanguageExportGraph">
      <summary>A graph structure used to convert <see cref="T:HAL.Procedures.Procedure" />s to exportable code.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.#ctor">
      <summary>Default constructor. Initializes with a new root vertex.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.#ctor(HAL.Linguistics.Export.LanguageExportGraph)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The export graph to be cloned.</param>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will kept otherwise.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraph.Files">
      <summary>The files of this exportable structure.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraph.AdditionalProcedures">
      <summary>A list of procedures that should be added to the language's at export.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraph.HasSingleExecutionBlock">
      <summary>Asserts that a single block is marked as the execution block.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.CreateDefaultEdge(HAL.Linguistics.Export.CodeBlock,HAL.Linguistics.Export.CodeBlock)">
      <summary>Creates a default implementation of a graph edge.</summary>
      <param name="source">The start vertex of the edge.</param>
      <param name="target">The end vertex of the edge.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.GetParent(HAL.Linguistics.Export.CodeBlock)">
      <summary>Gets the entity in he graph that is the parent of the given vertex.</summary>
      <param name="vertex">The vertex whose parent should be retrieved.</param>
      <returns>The parent of the given vertex.</returns>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.GetAllParents(HAL.Linguistics.Export.CodeBlock)">
      <summary>Gets the entities in the graph that have the given vertex as a child.</summary>
      <param name="vertex">The vertex whose parent should be retrieved.</param>
      <returns>The parents of the given vertex.</returns>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.Clone">
      <inheritdoc cref="T:HAL.ICloneable`1" />
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.PopulateGraph(HAL.Procedures.Procedure,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,HAL.Linguistics.Export.DeclarationMode,System.Boolean)">
      <summary>Renders the given action graph to code in the language already defined and writes it to disk at the path specified.</summary>
      <param name="actionGraph">The action graph to write.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="mode">The declaration mode for variables during the export. See <see cref="T:HAL.Linguistics.Export.DeclarationMode" /> for options.</param>
      <param name="skipInitialization">Skips the initialization of Procedure properties for export.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.EnsureSyntaxCaches">
      <summary>Ensures that all cached syntax blocks exist in the graph and clears those that are not.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraph.Write(System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,System.String)">
      <summary>Writes this graph to disk.</summary>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="path">THe path to which the rendered program should be exported.</param>
    </member>
    <member name="T:HAL.Linguistics.Export.LanguageExportGraphConnection">
      <summary>Connects vertices in a <see cref="T:HAL.Linguistics.Export.LanguageExportGraph" />.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.#ctor(HAL.Linguistics.Export.CodeBlock,HAL.Linguistics.Export.CodeBlock,HAL.Identifier)">
      <summary>Initializes a new bus between two objects.</summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="identifier">Bus identity.</param>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraphConnection.Source">
      <summary>Gets the source vertex.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraphConnection.Target">
      <summary>Gets the target vertex.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraphConnection.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraphConnection.Ordinal">
      <summary>An index defining the position of this in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraphConnection.IsDefaultRootConnection">
      <summary>Defines whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Linguistics.Export.LanguageExportGraphConnection.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.CloneEdge">
      <summary>Creates a new connection with all the same properties as the original.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.CloneEdgeTo(HAL.Linguistics.Export.CodeBlock,HAL.Linguistics.Export.CodeBlock,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="E:HAL.Linguistics.Export.LanguageExportGraphConnection.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.LanguageExportGraphConnection.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Linguistics.Export.PostSyntaxCodeBlock">
      <summary>Code block rendered after its parents' other children. </summary>
    </member>
    <member name="M:HAL.Linguistics.Export.PostSyntaxCodeBlock.#ctor">
      <summary>Creates a new <see cref="T:HAL.Linguistics.Export.PostSyntaxCodeBlock" />.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.PostSyntaxCodeBlock.#ctor(HAL.Linguistics.Export.PostSyntaxCodeBlock)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The code block to be cloned.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.PostSyntaxCodeBlock.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="T:HAL.Linguistics.Export.PreSyntaxCodeBlock">
      <summary>Represents a code block that is rendered before its parents other children.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.PreSyntaxCodeBlock.#ctor">
      <summary>Creates a new <see cref="T:HAL.Linguistics.Export.PreSyntaxCodeBlock" />.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.PreSyntaxCodeBlock.#ctor(HAL.Linguistics.Export.PreSyntaxCodeBlock)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The code block to be cloned.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.PreSyntaxCodeBlock.Clone">
      <summary>Creates a new code block with all the same properties as the original.</summary>
      <returns>A duplicate CodeBlock.</returns>
    </member>
    <member name="T:HAL.Linguistics.Export.ProcedureTemplate">
      <summary>Describes an additional procedure in an export language.</summary>
    </member>
    <member name="M:HAL.Linguistics.Export.ProcedureTemplate.#ctor(System.String)">
      <summary>Creates an integrated procedure.</summary>
      <param name="syntax">Meta syntax.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.ProcedureTemplate.AddVariableEquivalence(System.String,System.String)">
      <summary>Adds a pair of values to the variable map.</summary>
      <param name="syntaxName">The name of the variable in which this value should be inserted.</param>
      <param name="equivalentName">The name of the property found in the task that corresponds to the variable named.</param>
      <returns>Whether the pairing is added to the map, <c>false</c> if there is no variable by that name.</returns>
    </member>
    <member name="M:HAL.Linguistics.Export.ProcedureTemplate.AddProcedureOverride(System.String)">
      <summary>Includes the given procedure in the list of those that should be exported as this <see cref="T:HAL.Linguistics.Export.ProcedureTemplate" />.</summary>
      <param name="procedureName">Procedure to override.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.ProcedureTemplate.RemoveProcedureOverride(System.String)">
      <summary>Removes the given procedure in the list of those that should be exported as this <see cref="T:HAL.Linguistics.Export.ProcedureTemplate" />.</summary>
      <param name="procedureName">Procedure to not override.</param>
    </member>
    <member name="M:HAL.Linguistics.Export.ProcedureTemplate.op_Implicit(System.String)~HAL.Linguistics.Export.ProcedureTemplate">
      <summary>Converts a string to an adaptable procedure syntax.</summary>
      <param name="syntax">Syntax to convert.</param>
    </member>
    <member name="T:HAL.Linguistics.Grammar.MetaTemplate">
      <summary>Structured class to store arguments and syntax for a function or instruction in a machine language.</summary>
    </member>
    <member name="M:HAL.Linguistics.Grammar.MetaTemplate.ToString">
      <summary>Formats the Argument to be easily legible by a human lector</summary>
      <returns>Formatted string</returns>
    </member>
    <member name="T:HAL.Linguistics.Grammar.IHAL_MetagrammarListener">
      <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:HAL.Linguistics.Grammar.HAL_MetagrammarParser" />.
            </summary>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterFunctional(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FunctionalContext)">
      <summary>
            Enter a parse tree produced by the <c>Functional</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitFunctional(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FunctionalContext)">
      <summary>
            Exit a parse tree produced by the <c>Functional</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterFlowControl(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FlowControlContext)">
      <summary>
            Enter a parse tree produced by the <c>FlowControl</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitFlowControl(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FlowControlContext)">
      <summary>
            Exit a parse tree produced by the <c>FlowControl</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterArrayArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArrayArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>ArrayArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitArrayArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArrayArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>ArrayArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterOptionalArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>OptionalArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitOptionalArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>OptionalArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterSwappableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SwappableArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>SwappableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitSwappableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SwappableArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>SwappableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterSingleArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SingleArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>SingleArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitSingleArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SingleArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>SingleArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterVariableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>VariableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitVariableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>VariableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterStringArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StringArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>StringArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitStringArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StringArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>StringArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterLinkArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>LinkArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitLinkArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>LinkArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterFixedString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FixedStringContext)">
      <summary>
            Enter a parse tree produced by the <c>FixedString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitFixedString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FixedStringContext)">
      <summary>
            Exit a parse tree produced by the <c>FixedString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterOptionalString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalStringContext)">
      <summary>
            Enter a parse tree produced by the <c>OptionalString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitOptionalString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalStringContext)">
      <summary>
            Exit a parse tree produced by the <c>OptionalString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterStatement(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StatementContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.statement" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitStatement(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StatementContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.statement" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterSyntacticExpression(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SyntacticExpressionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitSyntacticExpression(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SyntacticExpressionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterArg(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArgContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitArg(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArgContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterCompleteArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CompleteArgumentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitCompleteArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CompleteArgumentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterVariable(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.variable" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitVariable(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.variable" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterValidationMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ValidationMethodContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.validationMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitValidationMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ValidationMethodContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.validationMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterTargetMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TargetMethodContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.targetMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitTargetMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TargetMethodContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.targetMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterQualifiedMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.QualifiedMethodContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.qualifiedMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitQualifiedMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.QualifiedMethodContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.qualifiedMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterMethodName(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNameContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodName" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitMethodName(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNameContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodName" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterMethodNamespace(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNamespaceContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodNamespace" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitMethodNamespace(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNamespaceContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodNamespace" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterType(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TypeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.type" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitType(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TypeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.type" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterDefaultValue(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DefaultValueContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.defaultValue" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitDefaultValue(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DefaultValueContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.defaultValue" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterCodeBlock(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CodeBlockContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.codeBlock" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitCodeBlock(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CodeBlockContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.codeBlock" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterSeparatorStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SeparatorStrContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.separatorStr" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitSeparatorStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SeparatorStrContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.separatorStr" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterLink(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.link" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitLink(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.link" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterPreHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PreHyphenContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.preHyphen" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitPreHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PreHyphenContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.preHyphen" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterPostHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PostHyphenContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.postHyphen" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitPostHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PostHyphenContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.postHyphen" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StrContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StrContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.NumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.number" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.NumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.number" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterDecimalNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DecimalNumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.decimalNumber" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitDecimalNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DecimalNumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.decimalNumber" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterWhole(HAL.Linguistics.Grammar.HAL_MetagrammarParser.WholeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitWhole(HAL.Linguistics.Grammar.HAL_MetagrammarParser.WholeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterForceInline(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ForceInlineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.forceInline" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitForceInline(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ForceInlineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.forceInline" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.EnterStateChange(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StateChangeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.stateChange" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarListener.ExitStateChange(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StateChangeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.stateChange" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="T:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener">
      <summary>
            This class provides an empty implementation of <see cref="T:HAL.Linguistics.Grammar.IHAL_MetagrammarListener" />,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterFunctional(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FunctionalContext)">
      <summary>
            Enter a parse tree produced by the <c>Functional</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitFunctional(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FunctionalContext)">
      <summary>
            Exit a parse tree produced by the <c>Functional</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterFlowControl(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FlowControlContext)">
      <summary>
            Enter a parse tree produced by the <c>FlowControl</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitFlowControl(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FlowControlContext)">
      <summary>
            Exit a parse tree produced by the <c>FlowControl</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterArrayArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArrayArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>ArrayArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitArrayArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArrayArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>ArrayArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterOptionalArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>OptionalArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitOptionalArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>OptionalArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterSwappableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SwappableArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>SwappableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitSwappableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SwappableArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>SwappableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterSingleArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SingleArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>SingleArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitSingleArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SingleArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>SingleArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterVariableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>VariableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitVariableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>VariableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterStringArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StringArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>StringArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitStringArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StringArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>StringArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterLinkArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkArgumentContext)">
      <summary>
            Enter a parse tree produced by the <c>LinkArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitLinkArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkArgumentContext)">
      <summary>
            Exit a parse tree produced by the <c>LinkArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterFixedString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FixedStringContext)">
      <summary>
            Enter a parse tree produced by the <c>FixedString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitFixedString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FixedStringContext)">
      <summary>
            Exit a parse tree produced by the <c>FixedString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterOptionalString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalStringContext)">
      <summary>
            Enter a parse tree produced by the <c>OptionalString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitOptionalString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalStringContext)">
      <summary>
            Exit a parse tree produced by the <c>OptionalString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterStatement(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StatementContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.statement" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitStatement(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StatementContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.statement" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterSyntacticExpression(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SyntacticExpressionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitSyntacticExpression(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SyntacticExpressionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterArg(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArgContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitArg(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArgContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterCompleteArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CompleteArgumentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitCompleteArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CompleteArgumentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterVariable(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.variable" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitVariable(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.variable" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterValidationMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ValidationMethodContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.validationMethod" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitValidationMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ValidationMethodContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.validationMethod" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterTargetMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TargetMethodContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.targetMethod" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitTargetMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TargetMethodContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.targetMethod" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterQualifiedMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.QualifiedMethodContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.qualifiedMethod" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitQualifiedMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.QualifiedMethodContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.qualifiedMethod" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterMethodName(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNameContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodName" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitMethodName(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNameContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodName" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterMethodNamespace(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNamespaceContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodNamespace" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitMethodNamespace(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNamespaceContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodNamespace" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterType(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TypeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.type" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitType(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TypeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.type" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterDefaultValue(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DefaultValueContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.defaultValue" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitDefaultValue(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DefaultValueContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.defaultValue" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterCodeBlock(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CodeBlockContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.codeBlock" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitCodeBlock(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CodeBlockContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.codeBlock" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterSeparatorStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SeparatorStrContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.separatorStr" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitSeparatorStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SeparatorStrContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.separatorStr" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterLink(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.link" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitLink(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.link" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterPreHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PreHyphenContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.preHyphen" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitPreHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PreHyphenContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.preHyphen" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterPostHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PostHyphenContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.postHyphen" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitPostHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PostHyphenContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.postHyphen" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StrContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StrContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.NumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.number" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.NumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.number" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterDecimalNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DecimalNumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.decimalNumber" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitDecimalNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DecimalNumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.decimalNumber" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterWhole(HAL.Linguistics.Grammar.HAL_MetagrammarParser.WholeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.whole" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitWhole(HAL.Linguistics.Grammar.HAL_MetagrammarParser.WholeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.whole" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterForceInline(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ForceInlineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.forceInline" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitForceInline(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ForceInlineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.forceInline" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterStateChange(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StateChangeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.stateChange" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitStateChange(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StateChangeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.stateChange" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="T:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1">
      <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:HAL.Linguistics.Grammar.HAL_MetagrammarParser" />.
            </summary>
      <typeparam name="Result">The return type of the visit operation.</typeparam>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitFunctional(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FunctionalContext)">
      <summary>
            Visit a parse tree produced by the <c>Functional</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitFlowControl(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FlowControlContext)">
      <summary>
            Visit a parse tree produced by the <c>FlowControl</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitArrayArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArrayArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>ArrayArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitOptionalArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>OptionalArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitSwappableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SwappableArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>SwappableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitSingleArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SingleArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>SingleArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitVariableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>VariableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitStringArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StringArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>StringArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitLinkArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>LinkArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitFixedString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FixedStringContext)">
      <summary>
            Visit a parse tree produced by the <c>FixedString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitOptionalString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalStringContext)">
      <summary>
            Visit a parse tree produced by the <c>OptionalString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitStatement(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StatementContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.statement" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitSyntacticExpression(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SyntacticExpressionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitArg(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArgContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitCompleteArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CompleteArgumentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitVariable(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.variable" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitValidationMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ValidationMethodContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.validationMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitTargetMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TargetMethodContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.targetMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitQualifiedMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.QualifiedMethodContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.qualifiedMethod" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitMethodName(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNameContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodName" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitMethodNamespace(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNamespaceContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodNamespace" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitType(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TypeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.type" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitDefaultValue(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DefaultValueContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.defaultValue" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitCodeBlock(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CodeBlockContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.codeBlock" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitSeparatorStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SeparatorStrContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.separatorStr" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitLink(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.link" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitPreHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PreHyphenContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.preHyphen" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitPostHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PostHyphenContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.postHyphen" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StrContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.NumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.number" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitDecimalNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DecimalNumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.decimalNumber" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitWhole(HAL.Linguistics.Grammar.HAL_MetagrammarParser.WholeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitForceInline(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ForceInlineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.forceInline" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1.VisitStateChange(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StateChangeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.stateChange" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="T:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1">
      <summary>
            This class provides an empty implementation of <see cref="T:HAL.Linguistics.Grammar.IHAL_MetagrammarVisitor`1" />,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
      <typeparam name="Result">The return type of the visit operation.</typeparam>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitFunctional(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FunctionalContext)">
      <summary>
            Visit a parse tree produced by the <c>Functional</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitFlowControl(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FlowControlContext)">
      <summary>
            Visit a parse tree produced by the <c>FlowControl</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitArrayArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArrayArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>ArrayArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitOptionalArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>OptionalArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitSwappableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SwappableArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>SwappableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitSingleArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SingleArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>SingleArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitVariableArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>VariableArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitStringArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StringArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>StringArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitLinkArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkArgumentContext)">
      <summary>
            Visit a parse tree produced by the <c>LinkArgument</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitFixedString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.FixedStringContext)">
      <summary>
            Visit a parse tree produced by the <c>FixedString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitOptionalString(HAL.Linguistics.Grammar.HAL_MetagrammarParser.OptionalStringContext)">
      <summary>
            Visit a parse tree produced by the <c>OptionalString</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitStatement(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StatementContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.statement" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitSyntacticExpression(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SyntacticExpressionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.syntacticExpression" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitArg(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ArgContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.arg" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitCompleteArgument(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CompleteArgumentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.completeArgument" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitVariable(HAL.Linguistics.Grammar.HAL_MetagrammarParser.VariableContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.variable" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitValidationMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ValidationMethodContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.validationMethod" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitTargetMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TargetMethodContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.targetMethod" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitQualifiedMethod(HAL.Linguistics.Grammar.HAL_MetagrammarParser.QualifiedMethodContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.qualifiedMethod" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitMethodName(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNameContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodName" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitMethodNamespace(HAL.Linguistics.Grammar.HAL_MetagrammarParser.MethodNamespaceContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.methodNamespace" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitType(HAL.Linguistics.Grammar.HAL_MetagrammarParser.TypeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.type" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitDefaultValue(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DefaultValueContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.defaultValue" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitCodeBlock(HAL.Linguistics.Grammar.HAL_MetagrammarParser.CodeBlockContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.codeBlock" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitSeparatorStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.SeparatorStrContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.separatorStr" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitLink(HAL.Linguistics.Grammar.HAL_MetagrammarParser.LinkContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.link" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitPreHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PreHyphenContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.preHyphen" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitPostHyphen(HAL.Linguistics.Grammar.HAL_MetagrammarParser.PostHyphenContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.postHyphen" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitStr(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StrContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.str" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.NumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.number" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitDecimalNumber(HAL.Linguistics.Grammar.HAL_MetagrammarParser.DecimalNumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.decimalNumber" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitWhole(HAL.Linguistics.Grammar.HAL_MetagrammarParser.WholeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.whole" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitForceInline(HAL.Linguistics.Grammar.HAL_MetagrammarParser.ForceInlineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.forceInline" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Grammar.HAL_MetagrammarBaseVisitor`1.VisitStateChange(HAL.Linguistics.Grammar.HAL_MetagrammarParser.StateChangeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Grammar.HAL_MetagrammarParser.stateChange" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="T:HAL.Linguistics.Helpers">
      <summary>Static collection of linguistic utility methods.</summary>
    </member>
    <member name="M:HAL.Linguistics.Helpers.Translate(HAL.Control.Subsystems.Procedures.IProcedureExportingController,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,System.String,HAL.Linguistics.Export.DeclarationMode,HAL.Procedures.Procedure[])">
      <summary>Exports controller procedures.</summary>
      <param name="controller">Exporting controller.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="destination">Destination path.</param>
      <param name="mode">Declaration mode.</param>
      <param name="procedures">Procedures to be exported.</param>
      <returns>Whether the execution was successful.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.Digitize(HAL.Units.IMeasurement)">
      <summary>Converts any measurement into a binary value (1 or 0) according to its range.</summary>
      <param name="value">The value to be converted.</param>
      <returns>A 1 if the value is greater than the middle of the range, 0 otherwise.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.Digitize(System.Double)">
      <summary>Converts any measurement into a binary value (1 or 0) according to its range.</summary>
      <param name="value">The value to be converted.</param>
      <returns>A 1 if the value is greater than the middle of the range, 0 otherwise.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloat(HAL.Units.IMeasurement)">
      <summary>Converts any measurement into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloat(HAL.Units.IUnitizedValue)">
      <summary>Converts any measurement into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloat(System.Double)">
      <summary>Converts any double into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloat(System.String)">
      <summary>Converts any double into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloatString(HAL.Units.IMeasurement)">
      <summary>Converts any measurement into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloatString(HAL.Units.IUnitizedValue)">
      <summary>Converts any measurement into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloatString(System.Double)">
      <summary>Converts any double into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsFloatString(System.String)">
      <summary>Converts any double into a float.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsBoolean(System.Object)">
      <summary>Converts any value into a boolean.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsInverseBoolean(System.Object)">
      <summary>Converts any value into a boolean.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsBlank(System.Object)">
      <summary>Returns an empty string to hide a given value.</summary>
      <param name="value">The value to be hidden.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AsInteger(System.Enum)">
      <summary>Converts any enum into an integer.</summary>
      <param name="value">The value to be converted.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.IsPredeclaration(HAL.Linguistics.Export.DeclarationMode)">
      <summary>Tests whether a declaration mode is predeclaration.</summary>
      <param name="mode">Mode to test.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.InverseLocationInWorld(HAL.Objects.Reference)">
      <summary>Finds the transformation necessary to move the reference back to the world.</summary>
      <param name="reference">Reference to locate.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.IsArc(HAL.Motion.Settings.Target)">
      <summary>Checks whether a target defines an arc motion.</summary>
      <param name="target">Target.</param>
      <returns>Whether the target defines an arc.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.RelativeMidSample(HAL.Procedures.Actions.MotionAction)">
      <summary>Gets the sample at the midpoint of a motion.</summary>
      <param name="motionAction">Motion.</param>
      <returns>Sample at the middle of a motion with the position relative to the endpoint's host.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.MidSample(HAL.Procedures.Actions.MotionAction)">
      <summary>Gets the sample at the midpoint of a motion.</summary>
      <param name="motionAction">Motion.</param>
      <returns>Sample at the middle of a motion.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.MidFrame(HAL.Procedures.Actions.MotionAction)">
      <summary>Gets the frame at the midpoint of a motion.</summary>
      <param name="motionAction">Motion.</param>
      <returns>Sample at the middle of a motion.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.ExtractMechanicalConfiguration(HAL.Procedures.Actions.MotionAction,HAL.Kinematics.KinematicGraph@,HAL.Kinematics.KinematicGraph@,HAL.Kinematics.KinematicGraph@,HAL.Kinematics.KinematicGraph@,HAL.Motion.Settings.Target@)">
      <summary>Extracts the typical elements of a mechanical composition from a motion action.</summary>
      <param name="action">Motion action.</param>
      <param name="manipulator">Manipulator a.k.a. the primary mechanism being programmed.</param>
      <param name="endEffector">End effector in use during the motion.</param>
      <param name="endEffectorHolder">Mechanism holding the end effector. Typically will be the manipulator or null if static.</param>
      <param name="targetReference">Mechanism on which the target is mounted.</param>
      <param name="rereferencedTarget">Target referenced on source.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.ExtractMechanicalConfiguration(HAL.Kinematics.KinematicGraph,HAL.Kinematics.KinematicGraph,HAL.Motion.Settings.Target,HAL.Kinematics.KinematicGraph@,HAL.Kinematics.KinematicGraph@,HAL.Kinematics.KinematicGraph@,HAL.Kinematics.KinematicGraph@,HAL.Motion.Settings.Target@)">
      <summary>Extracts the typical elements of a mechanical composition from a motion action.</summary>
      <param name="mechanism">Mechanism which in which to search.</param>
      <param name="hostMechanism">Super mechanism of which the mechanism is a part.</param>
      <param name="target">Target.</param>
      <param name="manipulator">Manipulator a.k.a. the primary mechanism being programmed.</param>
      <param name="endEffector">End effector in use during the motion.</param>
      <param name="endEffectorHolder">Mechanism holding the end effector. Typically will be the manipulator or null if static.</param>
      <param name="targetReference">Mechanism on which the target is mounted.</param>
      <param name="rereferencedTarget">Target referenced on source.</param>
    </member>
    <member name="M:HAL.Linguistics.Helpers.GetMappedJointPositions(HAL.Procedures.Actions.MotionAction)">
      <summary>Extracts the joint positions for the actor at the end of a motion action.</summary>
      <param name="motionAction">Motion action.</param>
      <returns>Array of joint values with nulls where no joint was specified.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.GetMappedJointPositions(HAL.Objects.Mechanisms.Mechanism,HAL.Motion.JointPositions)">
      <summary>Reorders a series of joint positions to align with the mapping stipulated in the given mechanism.</summary>
      <param name="mechanism">Mechanism.</param>
      <param name="jointPositions">Joint positions ordered along the mechanisms active joints.</param>
      <returns>Array of joint values with nulls where no joint was specified.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.SixDoFManipulatorJointPositions(HAL.Procedures.Actions.MotionAction)">
      <summary>Calculates the position of manipulator axes from a given motion action.</summary>
      <returns>An array of joint positions for axes 1-6 of the given mechanism.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AllZero(HAL.Units.IUnitizedValue[])">
      <summary>Determines whether a set of values are all zero.</summary>
      <param name="zones">The measurements to be evaluated.</param>
      <returns>
        <c>false</c>if any of the values given are greater than zero, <c>true</c>otherwise.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.AllZero(HAL.Units.IMeasurement[])">
      <summary>Determines whether a set of values are all zero.</summary>
      <param name="zones">The measurements to be evaluated.</param>
      <returns>
        <c>false</c>if any of the values given are greater than zero, <c>true</c>otherwise.</returns>
    </member>
    <member name="M:HAL.Linguistics.Helpers.GetInputState(HAL.Procedures.Actions.Action,System.Object@)">
      <summary>Stores the current state of any object modified by the given action.</summary>
      <param name="action">Action.</param>
      <param name="actor">Actor modified by the action.</param>
      <returns>State of the actor before execution of the action.</returns>
    </member>
    <member name="T:HAL.Linguistics.Import.CodeLine">
      <summary>Represents a single line of GCode.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.CodeLine.Index">
      <summary>Line number from the original file.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.CodeLine.OriginalString">
      <summary>Text used to create the line.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.CodeLine.IsComment">
      <summary>Whether this line is commented.</summary>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.GCodeInstruction">
      <summary>Line of GCode which has an instruction.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.GCodeInstruction.InstructionCode">
      <summary>Instruction code in use.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.GCodeInstruction.CompleteCode">
      <summary>Instruction code as text.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.GCodeInstruction.Arguments">
      <summary>Arguments changed during this instruction.</summary>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.GCodeVisitor">
      <summary>Visits a GCode file and converts it to interpretable instructions.</summary>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.Parse(System.String,HAL.Objects.Reference,System.Double,System.Collections.Generic.List{HAL.Linguistics.Import.CodeLine}@,System.Collections.Generic.List{HAL.Motion.Settings.Target}@)">
      <summary>Parses a GCode file.</summary>
      <param name="path">Path to file.</param>
      <param name="reference">Reference for targets.</param>
      <param name="scale">Scaling factor.</param>
      <param name="instruction">Interpretable instructions found in the file.</param>
      <param name="target">Targets.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.Interpret(System.Collections.Generic.List{HAL.Linguistics.Import.CodeLine},System.Collections.Generic.List{HAL.Linguistics.Import.ReplacementRules.ReplacementRule},HAL.Procedures.Procedure@)">
      <summary>Interprets GCode instructions and replacement rules to create a procedure.</summary>
      <param name="instruction">Instructions.</param>
      <param name="rule">Replacement rules.</param>
      <param name="procedure">Procedure.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.Interpret(System.String,HAL.Objects.Reference,System.Double,System.Collections.Generic.List{HAL.Linguistics.Import.ReplacementRules.ReplacementRule},HAL.Procedures.Procedure@,System.Collections.Generic.List{HAL.Motion.Settings.Target}@)">
      <summary>Interprets GCode instructions and replacement rules to create a procedure.</summary>
      <param name="path">Path to file.</param>
      <param name="reference">Reference for targets.</param>
      <param name="scale">Scaling factor.</param>
      <param name="rule">Replacement rules.</param>
      <param name="procedure">Procedure.</param>
      <param name="target">Targets.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.GetInstructionProperties(HAL.Linguistics.Import.CodeLine,System.Int32@,System.String@,System.String@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.Double}@,HAL.Motion.Settings.Target@,System.Boolean@,System.Double@,HAL.Units.Time.Time@)">
      <summary>Retrieves the properties of GCode instructions.</summary>
      <param name="instruction">Instruction.</param>
      <param name="index">Line number from the original file.</param>
      <param name="originalString">Text used to create the line.</param>
      <param name="instructionCode">Instruction code in use.</param>
      <param name="argumentCode">Argument letter(s).</param>
      <param name="argumentValue">Argument value(s)</param>
      <param name="target">Instruction target.</param>
      <param name="isRapidTravel">Whether the instruction is a rapid travel.</param>
      <param name="feedRate">Feed rate during instruction.</param>
      <param name="waitTime">Time for dwell.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.#ctor(HAL.Objects.Reference)">
      <inheritdoc />
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.GCodeVisitor.Instructions">
      <summary>Instructions from the GCode.</summary>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.VisitWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.VisitUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.VisitProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.VisitCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeVisitor.VisitEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.MotionInstruction">
      <summary>GCode instruction which signifies a motion.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.MotionInstruction.Target">
      <summary>Current target.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.MotionInstruction.IsRapid">
      <summary>Whether the motion is rapid.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.MotionInstruction.FeedRate">
      <summary>Current feed rate.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.MotionInstruction.Settings">
      <summary>Motion settings.</summary>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.WaitInstruction">
      <summary>GCode instruction which signifies a wait.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.GCode.WaitInstruction.Time">
      <summary>Time to wait.</summary>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.IGCodeListener">
      <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:HAL.Linguistics.Import.GCode.GCodeParser" />.
            </summary>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <summary>
            Enter a parse tree produced by the <c>UsedLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <summary>
            Exit a parse tree produced by the <c>UsedLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <summary>
            Enter a parse tree produced by the <c>ProgramLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <summary>
            Exit a parse tree produced by the <c>ProgramLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <summary>
            Enter a parse tree produced by the <c>CommentLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <summary>
            Exit a parse tree produced by the <c>CommentLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <summary>
            Enter a parse tree produced by the <c>EmptyLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <summary>
            Exit a parse tree produced by the <c>EmptyLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterProgram(HAL.Linguistics.Import.GCode.GCodeParser.ProgramContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.program" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitProgram(HAL.Linguistics.Import.GCode.GCodeParser.ProgramContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.program" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterLine(HAL.Linguistics.Import.GCode.GCodeParser.LineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitLine(HAL.Linguistics.Import.GCode.GCodeParser.LineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterLineEntry(HAL.Linguistics.Import.GCode.GCodeParser.LineEntryContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.lineEntry" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitLineEntry(HAL.Linguistics.Import.GCode.GCodeParser.LineEntryContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.lineEntry" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.word" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.word" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterComment(HAL.Linguistics.Import.GCode.GCodeParser.CommentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.comment" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitComment(HAL.Linguistics.Import.GCode.GCodeParser.CommentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.comment" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterMidComment(HAL.Linguistics.Import.GCode.GCodeParser.MidCommentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.midComment" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitMidComment(HAL.Linguistics.Import.GCode.GCodeParser.MidCommentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.midComment" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterEndComment(HAL.Linguistics.Import.GCode.GCodeParser.EndCommentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.endComment" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitEndComment(HAL.Linguistics.Import.GCode.GCodeParser.EndCommentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.endComment" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterNumber(HAL.Linguistics.Import.GCode.GCodeParser.NumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.number" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitNumber(HAL.Linguistics.Import.GCode.GCodeParser.NumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.number" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterDecimalNumber(HAL.Linguistics.Import.GCode.GCodeParser.DecimalNumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.decimalNumber" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitDecimalNumber(HAL.Linguistics.Import.GCode.GCodeParser.DecimalNumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.decimalNumber" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterDotTerminated(HAL.Linguistics.Import.GCode.GCodeParser.DotTerminatedContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.dotTerminated" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitDotTerminated(HAL.Linguistics.Import.GCode.GCodeParser.DotTerminatedContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.dotTerminated" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterWhole(HAL.Linguistics.Import.GCode.GCodeParser.WholeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitWhole(HAL.Linguistics.Import.GCode.GCodeParser.WholeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterProgLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgLineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.progLine" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitProgLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgLineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.progLine" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterNline(HAL.Linguistics.Import.GCode.GCodeParser.NlineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.nline" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitNline(HAL.Linguistics.Import.GCode.GCodeParser.NlineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.nline" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterLetter(HAL.Linguistics.Import.GCode.GCodeParser.LetterContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.letter" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitLetter(HAL.Linguistics.Import.GCode.GCodeParser.LetterContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.letter" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterInBrackets(HAL.Linguistics.Import.GCode.GCodeParser.InBracketsContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.inBrackets" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitInBrackets(HAL.Linguistics.Import.GCode.GCodeParser.InBracketsContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.inBrackets" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.EnterRestOfLine(HAL.Linguistics.Import.GCode.GCodeParser.RestOfLineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.restOfLine" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeListener.ExitRestOfLine(HAL.Linguistics.Import.GCode.GCodeParser.RestOfLineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.restOfLine" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.GCodeBaseListener">
      <summary>
            This class provides an empty implementation of <see cref="T:HAL.Linguistics.Import.GCode.IGCodeListener" />,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <summary>
            Enter a parse tree produced by the <c>UsedLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <summary>
            Exit a parse tree produced by the <c>UsedLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <summary>
            Enter a parse tree produced by the <c>ProgramLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <summary>
            Exit a parse tree produced by the <c>ProgramLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <summary>
            Enter a parse tree produced by the <c>CommentLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <summary>
            Exit a parse tree produced by the <c>CommentLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <summary>
            Enter a parse tree produced by the <c>EmptyLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <summary>
            Exit a parse tree produced by the <c>EmptyLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterProgram(HAL.Linguistics.Import.GCode.GCodeParser.ProgramContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.program" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitProgram(HAL.Linguistics.Import.GCode.GCodeParser.ProgramContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.program" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterLine(HAL.Linguistics.Import.GCode.GCodeParser.LineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitLine(HAL.Linguistics.Import.GCode.GCodeParser.LineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterLineEntry(HAL.Linguistics.Import.GCode.GCodeParser.LineEntryContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.lineEntry" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitLineEntry(HAL.Linguistics.Import.GCode.GCodeParser.LineEntryContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.lineEntry" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.word" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.word" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterComment(HAL.Linguistics.Import.GCode.GCodeParser.CommentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.comment" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitComment(HAL.Linguistics.Import.GCode.GCodeParser.CommentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.comment" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterMidComment(HAL.Linguistics.Import.GCode.GCodeParser.MidCommentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.midComment" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitMidComment(HAL.Linguistics.Import.GCode.GCodeParser.MidCommentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.midComment" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterEndComment(HAL.Linguistics.Import.GCode.GCodeParser.EndCommentContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.endComment" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitEndComment(HAL.Linguistics.Import.GCode.GCodeParser.EndCommentContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.endComment" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterNumber(HAL.Linguistics.Import.GCode.GCodeParser.NumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.number" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitNumber(HAL.Linguistics.Import.GCode.GCodeParser.NumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.number" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterDecimalNumber(HAL.Linguistics.Import.GCode.GCodeParser.DecimalNumberContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.decimalNumber" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitDecimalNumber(HAL.Linguistics.Import.GCode.GCodeParser.DecimalNumberContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.decimalNumber" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterDotTerminated(HAL.Linguistics.Import.GCode.GCodeParser.DotTerminatedContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.dotTerminated" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitDotTerminated(HAL.Linguistics.Import.GCode.GCodeParser.DotTerminatedContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.dotTerminated" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterWhole(HAL.Linguistics.Import.GCode.GCodeParser.WholeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.whole" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitWhole(HAL.Linguistics.Import.GCode.GCodeParser.WholeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.whole" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterProgLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgLineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.progLine" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitProgLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgLineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.progLine" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterNline(HAL.Linguistics.Import.GCode.GCodeParser.NlineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.nline" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitNline(HAL.Linguistics.Import.GCode.GCodeParser.NlineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.nline" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterLetter(HAL.Linguistics.Import.GCode.GCodeParser.LetterContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.letter" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitLetter(HAL.Linguistics.Import.GCode.GCodeParser.LetterContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.letter" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterInBrackets(HAL.Linguistics.Import.GCode.GCodeParser.InBracketsContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.inBrackets" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitInBrackets(HAL.Linguistics.Import.GCode.GCodeParser.InBracketsContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.inBrackets" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterRestOfLine(HAL.Linguistics.Import.GCode.GCodeParser.RestOfLineContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.restOfLine" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitRestOfLine(HAL.Linguistics.Import.GCode.GCodeParser.RestOfLineContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.restOfLine" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.IGCodeVisitor`1">
      <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:HAL.Linguistics.Import.GCode.GCodeParser" />.
            </summary>
      <typeparam name="Result">The return type of the visit operation.</typeparam>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <summary>
            Visit a parse tree produced by the <c>UsedLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <summary>
            Visit a parse tree produced by the <c>ProgramLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <summary>
            Visit a parse tree produced by the <c>CommentLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <summary>
            Visit a parse tree produced by the <c>EmptyLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitProgram(HAL.Linguistics.Import.GCode.GCodeParser.ProgramContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.program" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitLine(HAL.Linguistics.Import.GCode.GCodeParser.LineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitLineEntry(HAL.Linguistics.Import.GCode.GCodeParser.LineEntryContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.lineEntry" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.word" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitComment(HAL.Linguistics.Import.GCode.GCodeParser.CommentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.comment" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitMidComment(HAL.Linguistics.Import.GCode.GCodeParser.MidCommentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.midComment" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitEndComment(HAL.Linguistics.Import.GCode.GCodeParser.EndCommentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.endComment" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitNumber(HAL.Linguistics.Import.GCode.GCodeParser.NumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.number" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitDecimalNumber(HAL.Linguistics.Import.GCode.GCodeParser.DecimalNumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.decimalNumber" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitDotTerminated(HAL.Linguistics.Import.GCode.GCodeParser.DotTerminatedContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.dotTerminated" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitWhole(HAL.Linguistics.Import.GCode.GCodeParser.WholeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitProgLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgLineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.progLine" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitNline(HAL.Linguistics.Import.GCode.GCodeParser.NlineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.nline" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitLetter(HAL.Linguistics.Import.GCode.GCodeParser.LetterContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.letter" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitInBrackets(HAL.Linguistics.Import.GCode.GCodeParser.InBracketsContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.inBrackets" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.IGCodeVisitor`1.VisitRestOfLine(HAL.Linguistics.Import.GCode.GCodeParser.RestOfLineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.restOfLine" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="T:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1">
      <summary>
            This class provides an empty implementation of <see cref="T:HAL.Linguistics.Import.GCode.IGCodeVisitor`1" />,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
      <typeparam name="Result">The return type of the visit operation.</typeparam>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitUsedLine(HAL.Linguistics.Import.GCode.GCodeParser.UsedLineContext)">
      <summary>
            Visit a parse tree produced by the <c>UsedLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitProgramLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgramLineContext)">
      <summary>
            Visit a parse tree produced by the <c>ProgramLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitCommentLine(HAL.Linguistics.Import.GCode.GCodeParser.CommentLineContext)">
      <summary>
            Visit a parse tree produced by the <c>CommentLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitEmptyLine(HAL.Linguistics.Import.GCode.GCodeParser.EmptyLineContext)">
      <summary>
            Visit a parse tree produced by the <c>EmptyLine</c>
            labeled alternative in <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitProgram(HAL.Linguistics.Import.GCode.GCodeParser.ProgramContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.program" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitLine(HAL.Linguistics.Import.GCode.GCodeParser.LineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.line" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitLineEntry(HAL.Linguistics.Import.GCode.GCodeParser.LineEntryContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.lineEntry" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitWord(HAL.Linguistics.Import.GCode.GCodeParser.WordContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.word" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitComment(HAL.Linguistics.Import.GCode.GCodeParser.CommentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.comment" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitMidComment(HAL.Linguistics.Import.GCode.GCodeParser.MidCommentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.midComment" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitEndComment(HAL.Linguistics.Import.GCode.GCodeParser.EndCommentContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.endComment" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitNumber(HAL.Linguistics.Import.GCode.GCodeParser.NumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.number" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitDecimalNumber(HAL.Linguistics.Import.GCode.GCodeParser.DecimalNumberContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.decimalNumber" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitDotTerminated(HAL.Linguistics.Import.GCode.GCodeParser.DotTerminatedContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.dotTerminated" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitWhole(HAL.Linguistics.Import.GCode.GCodeParser.WholeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.whole" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitProgLine(HAL.Linguistics.Import.GCode.GCodeParser.ProgLineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.progLine" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitNline(HAL.Linguistics.Import.GCode.GCodeParser.NlineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.nline" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitLetter(HAL.Linguistics.Import.GCode.GCodeParser.LetterContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.letter" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitInBrackets(HAL.Linguistics.Import.GCode.GCodeParser.InBracketsContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.inBrackets" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Linguistics.Import.GCode.GCodeBaseVisitor`1.VisitRestOfLine(HAL.Linguistics.Import.GCode.GCodeParser.RestOfLineContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Linguistics.Import.GCode.GCodeParser.restOfLine" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="T:HAL.Linguistics.Import.ReplacementRules.MatchInstruction">
      <summary>Replaces each line which matches the given string with the same procedure.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.MatchInstruction.Match">
      <summary>Instruction code or complete line to match.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.MatchInstruction.Procedure">
      <summary>Procedure with which to replace the instruction.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.MatchInstruction.IsModifier">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.MatchInstruction.TryApply(HAL.Linguistics.Import.CodeLine,HAL.Procedures.Procedure)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Import.ReplacementRules.OverrideInstruction">
      <summary>Replaces an instruction or block of instructions with a given procedure.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.OverrideInstruction.StartIndex">
      <summary>Start index of the block.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.OverrideInstruction.EndIndex">
      <summary>End index of the block. If not set a single line is replaced.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.OverrideInstruction.Procedure">
      <summary>Procedure with which to replace the block.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.OverrideInstruction.IsModifier">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.OverrideInstruction.TryApply(HAL.Linguistics.Import.CodeLine,HAL.Procedures.Procedure)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Import.ReplacementRules.ReplacementPattern">
      <summary>Replaces an argument or instruction using a code pattern to create a custom action.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.ReplacementPattern.Match">
      <summary>Instruction code, argument or complete line to match.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.ReplacementPattern.IsArgumentBased">
      <summary>Whether this rule applies to an argument or a line.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.ReplacementPattern.Pattern">
      <summary>Code pattern to apply.</summary>
      <remarks>Patterns resemble: "SomeText"&lt;ArgumentLetter&gt;/1.45"SomeMoreText" Quoted text is kept as is, &lt;ArgumentLetter&gt; will be replaced by the value of the argument and combined with any mathematical expressions.</remarks>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.ReplacementPattern.IsModifier">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementPattern.TryApply(HAL.Linguistics.Import.CodeLine,HAL.Procedures.Procedure)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.Import.ReplacementRules.ReplacementRule">
      <summary>Replacement rule for converting GCode lines to procedures.</summary>
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.Replace(System.String,HAL.Procedures.Procedure,HAL.Linguistics.Import.ReplacementRules.ReplacementRule@)">
      <summary>Replaces any instruction which matches the given text with the procedure.</summary>
      <param name="match">Instruction code or complete line to match.</param>
      <param name="replacement">Procedure with which to replace the instruction.</param>
      <param name="rule">Replacement rule.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.Replace(System.String,System.String,HAL.Linguistics.Import.ReplacementRules.ReplacementRule@)">
      <summary>Replaces any instruction which matches the given text with a code pattern.</summary>
      <param name="match">Instruction code or complete line to match, e.g. M106.</param>
      <param name="pattern">Code pattern. e.g. "MyMethod("&lt;E&gt;*0.1");"</param>
      <param name="rule">Replacement rule.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.ReplaceArgument(System.String,System.String,HAL.Linguistics.Import.ReplacementRules.ReplacementRule@)">
      <summary>Replaces any argument change with a code pattern.</summary>
      <param name="argument">Argument code to match e.g. E.</param>
      <param name="pattern">Code pattern. e.g. "MyMethod("&lt;E&gt;*0.1");"</param>
      <param name="rule">Replacement rule.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.ReplaceSpeed(System.Double,HAL.Motion.Settings.SpeedSettings,HAL.Linguistics.Import.ReplacementRules.ReplacementRule@)">
      <summary>Replaces the speed of any instruction with a matching feed rate.</summary>
      <param name="feedRate">Feed rate to match.</param>
      <param name="speed">Speed settings to apply.</param>
      <param name="rule">Replacement rule.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.Replace(System.Int32,System.Int32,HAL.Procedures.Procedure,HAL.Linguistics.Import.ReplacementRules.ReplacementRule@)">
      <summary>Replaces a block of instructions with a given procedure.</summary>
      <param name="from">Starting index.</param>
      <param name="to">If included, block end index, otherwise a single instruction is replaced.</param>
      <param name="replacement">Procedure with which to replace the instruction(s).</param>
      <param name="rule">Replacement rule.</param>
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.TryApply(HAL.Linguistics.Import.CodeLine,HAL.Procedures.Procedure)">
      <summary>Attempts to assign this rule to a GCode line.</summary>
      <param name="line">GCode line.</param>
      <param name="host">Host procedure in which to insert the action.</param>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.ReplacementRule.IsModifier">
      <summary>Defines whether the rule modifies the line and should be applied. If not the rule is considered a complete replacement.</summary>
    </member>
    <member name="T:HAL.Linguistics.Import.ReplacementRules.SetSpeed">
      <summary>Sets the speeds of any motion instructions based on their defined feed rate.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.SetSpeed.FeedRate">
      <summary>Feed rate to match.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.SetSpeed.SpeedSettings">
      <summary>Speed settings to apply.</summary>
    </member>
    <member name="P:HAL.Linguistics.Import.ReplacementRules.SetSpeed.IsModifier">
      <inheritdoc />
    </member>
    <member name="M:HAL.Linguistics.Import.ReplacementRules.SetSpeed.TryApply(HAL.Linguistics.Import.CodeLine,HAL.Procedures.Procedure)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Linguistics.LanguageManager">
      <summary>Maintains available machine languages.</summary>
    </member>
    <member name="P:HAL.Linguistics.LanguageManager.Instance">
      <summary>Language manager instance.</summary>
    </member>
    <member name="M:HAL.Linguistics.LanguageManager.Search(HAL.Linguistics.Definition.LanguageIdentifier,HAL.Linguistics.Definition.MachineLanguage@)">
      <summary>Attempts to retrieve a machine language.</summary>
      <param name="descriptor">Language descriptor.</param>
      <param name="language">Machine , if found.</param>
      <returns>Whether this language was found.</returns>
    </member>
    <member name="T:HAL.Logic.BooleanOperation">
      <summary>Defines the combination of two boolean values using any of the standard boolean operators.</summary>
    </member>
    <member name="M:HAL.Logic.BooleanOperation.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Logic.BooleanOperation.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:HAL.Logic.BooleanOperation.Evaluate">
      <summary>Evaluates this operation using the information contained within.</summary>
    </member>
    <member name="T:HAL.Logic.Comparator">
      <summary>
            Class to store information about a comparison operation.
            A is assumed to be the new/testable value while B is the base/constant to test against
            </summary>
    </member>
    <member name="M:HAL.Logic.Comparator.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:HAL.Logic.Comparator.Evaluate">
      <summary>Evaluates the stored values using the logical operator already within this comparator.</summary>
      <returns>Whether the desired relationship between the two values is true or false.</returns>
    </member>
    <member name="T:HAL.Logic.Evaluable">
      <summary>Default implementation of an object can be evaluated to a boolean.</summary>
    </member>
    <member name="M:HAL.Logic.Evaluable.Evaluate">
      <summary>Defines how this should be evaluated.</summary>
      <returns>A boolean value representing the evaluated result of this method.</returns>
    </member>
    <member name="M:HAL.Logic.Evaluable.op_Implicit(HAL.Logic.Evaluable)~System.Boolean">
      <summary>Casts a <see cref="T:HAL.Logic.Evaluable" /> to a boolean by calling the Evaluate method.</summary>
      <param name="evaluable">The <see cref="T:HAL.Logic.Evaluable" /> to be converted.</param>
      <returns>The result of the evaluate method in the evaluable.</returns>
    </member>
    <member name="M:HAL.Logic.Evaluable.op_Implicit(System.Boolean)~HAL.Logic.Evaluable">
      <summary>Casts a boolean to a <see cref="T:HAL.Logic.Evaluable" /> by wrapping it within a <see cref="T:HAL.Logic.EvaluableBoolean" />.</summary>
      <param name="boolean">The boolean value to be converted.</param>
      <returns>A <see cref="T:HAL.Logic.EvaluableBoolean" /> with the value of the boolean given.</returns>
    </member>
    <member name="P:HAL.Logic.Evaluable.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="E:HAL.Logic.Evaluable.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Logic.Evaluable.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Logic.Evaluable.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Logic.Evaluable.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Logic.EvaluableBoolean">
      <summary>Wraps a system boolean value to allow it to be used in evaluable operations.</summary>
    </member>
    <member name="M:HAL.Logic.EvaluableBoolean.#ctor(System.Boolean)">
      <summary>Creates a <see cref="T:HAL.Logic.EvaluableBoolean" /> which, when evaluated, returns the value of the boolean given.</summary>
      <param name="boolean">The boolean value required upon evaluation.</param>
    </member>
    <member name="M:HAL.Logic.EvaluableBoolean.Evaluate">
      <summary>Defines how this should be evaluated.</summary>
      <returns>The boolean value of Value.</returns>
    </member>
    <member name="M:HAL.Logic.EvaluableBoolean.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="T:HAL.Logic.HAL_BooleanOperator">
      <summary>Defines how two boolean values should be combined.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.Unset">
      <summary>Unset.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.And">
      <summary>Denotes a boolean AND, i.e. returns Whether, and only if, both input values are <c>true</c>.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.Or">
      <summary>Denotes a boolean OR, i.e. returns Whether either input values or both are <c>true</c>.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.Not">
      <summary>Denotes a boolean NOT, i.e. returns Whether the input value is <c>false</c>.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.Nand">
      <summary>Denotes a boolean NAND, the NOT of AND i.e. returns <c>false</c> if, and only if, both input values are <c>true</c>.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.Nor">
      <summary>Denotes a boolean NOR, the NOT of OR i.e. returns <c>false</c> if either input values or both are <c>true</c>.</summary>
    </member>
    <member name="F:HAL.Logic.HAL_BooleanOperator.Xor">
      <summary>Denotes a boolean XOR, eXclusive OR i.e. returns Whether, and only if, only one of the input values is <c>true</c>.</summary>
    </member>
    <member name="T:HAL.Logic.HAL_BooleanOperatorDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Logic.HAL_BooleanOperatorDescriptions.Description(HAL.Logic.HAL_BooleanOperator)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Logic.IEvaluable">
      <summary>Marks that an object can be evaluated to a boolean.</summary>
    </member>
    <member name="M:HAL.Logic.IEvaluable.Evaluate">
      <summary>Defines how this should be evaluated.</summary>
      <returns>A boolean value representing the evaluated result of this method.</returns>
    </member>
    <member name="T:HAL.Logic.IncrementalEvaluator">
      <summary>Evaluates a numeric comparison whilst incrementing the test value at each evaluation.</summary>
    </member>
    <member name="M:HAL.Logic.IncrementalEvaluator.#ctor(System.Double,System.Double,HAL.Logic.LogicalRelationship,System.Double,System.Boolean)">
      <summary>Complete constructor.</summary>
      <param name="start">The starting value of the incrementing value.</param>
      <param name="end">The value to test against.</param>
      <param name="logicalRelationship">The desired relationship between the test and current values for the evaluation to return <c>false</c>.</param>
      <param name="step">The amount to increment the current value at each iteration.</param>
      <param name="preIncrement">Defines whether the current value should be incremented before evaluating.</param>
    </member>
    <member name="M:HAL.Logic.IncrementalEvaluator.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:HAL.Logic.IncrementalEvaluator.Evaluate">
      <summary>Defines how this should be evaluated.</summary>
      <returns>A boolean value representing the evaluated result of this method.</returns>
    </member>
    <member name="T:HAL.Logic.LogicalRelationship">
      <summary>Defines the relationship between two values that can be evaluated to a boolean.</summary>
    </member>
    <member name="F:HAL.Logic.LogicalRelationship.Equal">
      <summary>Values are the same.</summary>
    </member>
    <member name="F:HAL.Logic.LogicalRelationship.NotEqual">
      <summary>Values are not the same.</summary>
    </member>
    <member name="F:HAL.Logic.LogicalRelationship.LessThan">
      <summary>First value is less than the second.</summary>
    </member>
    <member name="F:HAL.Logic.LogicalRelationship.LessThanOrEqual">
      <summary>First value is less than or equal to the second.</summary>
    </member>
    <member name="F:HAL.Logic.LogicalRelationship.GreaterThanOrEqual">
      <summary>First value is greater than or equal to the second.</summary>
    </member>
    <member name="F:HAL.Logic.LogicalRelationship.GreaterThan">
      <summary>First value is greater than the second.</summary>
    </member>
    <member name="T:HAL.Motion.Discretization.IBlendSectionGeometry">
      <summary>Qualifies a blend section geometry.</summary>
    </member>
    <member name="T:HAL.Motion.Discretization.IPrimitiveSectionGeometry">
      <summary>Qualifies a primitive (non-blend) path section geometry.</summary>
    </member>
    <member name="M:HAL.Motion.Discretization.IPrimitiveSectionGeometry.Trim(HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.BlendSettings,System.Double@,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on end points.</summary>
      <param name="startBlend">Blend settings at the start point.</param>
      <param name="endBlend">Blend settings at the end point.</param>
      <param name="previousExitParameter">Start blend exit parameter.</param>
      <param name="entryParameter">End blend entry parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="M:HAL.Motion.Discretization.IPrimitiveSectionGeometry.Trim(HAL.Motion.Settings.BlendSettings,System.Boolean,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on one of extremity point.</summary>
      <param name="settings">Blend settings at the extremity point.</param>
      <param name="atEnd">Whether the trim operation should be applied on the end or start of the section.</param>
      <param name="parameter">Blend exit(if at start) or entry(if at end) parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="T:HAL.Motion.Discretization.ISectionGeometry">
      <summary>Qualifies a path section geometry.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.ISectionGeometry.Length">
      <summary>Total position displacement along the section.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.ISectionGeometry.Rotation">
      <summary>Total rotation displacement along the section.</summary>
    </member>
    <member name="T:HAL.Motion.Discretization.Sample">
      <summary>Motion sample, referencing a time-coded motion state on a <see cref="T:HAL.Motion.Discretization.Section" />.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.Parameter">
      <summary>Parameter at which this sample is located on its host section geometry.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.Time">
      <summary>Time at which this sample is located relative to its parent action start time.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.Position">
      <summary>TCP position, in the parent section reference (relative to the target reference for strictly Cartesian sections, relative to the world for joint sections and mixed-space joint blends).</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.PositionSpeed">
      <summary>Cartesian position speed.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.PositionAcceleration">
      <summary>Signed Cartesian position acceleration.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.OrientationVelocity">
      <summary>Signed Cartesian orientation velocity.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.OrientationAcceleration">
      <summary>Signed Cartesian orientation acceleration.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.JointPositions">
      <summary>Signed joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.JointVelocities">
      <summary>Signed joint velocities.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.JointAccelerations">
      <summary>Signed joint accelerations.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.IsInterpolated">
      <summary>Whether this sample was generated from interpolated values.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.PositionDisplacement">
      <summary>Position displacement from the previous sample to this sample.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.OrientationDisplacement">
      <summary>Signed orientation displacement from the previous sample to this sample.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.JointDisplacements">
      <summary>Signed joint displacement from the previous sample to this sample.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Sample.NotificationLevel">
      <summary>Notification severity level.</summary>
    </member>
    <member name="M:HAL.Motion.Discretization.Sample.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Motion.Discretization.Sample.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Discretization.Sample.Equals(HAL.Motion.Discretization.Sample)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Motion.Discretization.SamplingSettings">
      <summary>Sampling settings.</summary>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.#ctor(HAL.Motion.Planning.SolvingFidelity,HAL.Motion.Discretization.SamplingStrategy,System.Boolean)">
      <summary>Create a set of sampling settings.</summary>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.#ctor(HAL.Motion.Discretization.SamplingStrategy,System.Boolean,System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Angle.rad},System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Angle.rad})">
      <summary>Create a set of sampling settings.</summary>
      <param name="strategy">Sampling strategy.</param>
      <param name="interpolate">Whether the solving can approximate calculations using interpolated measurements (faster).</param>
      <param name="positionTolerance">Acceptable approximation of Cartesian positions. Higher values will solve faster.</param>
      <param name="orientationTolerance">Acceptable approximation of Cartesian orientations. Higher values will solve faster.</param>
      <param name="prismaticJointTolerance">Acceptable approximation of prismatic joint positions. Higher values will solve faster.</param>
      <param name="revoluteJointTolerance">Acceptable approximation of revolute joint positions. Higher values will solve faster.</param>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.#ctor(HAL.Motion.Discretization.SamplingStrategy,HAL.Alerts.AlertLevel,System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Angle.rad},System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Angle.rad},System.Boolean,System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Angle.rad},System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Angle.rad})">
      <summary>Create a set of sampling settings.</summary>
      <param name="strategy">Sampling strategy.</param>
      <param name="criticalAlertLevel">Alert level to be considered critical enough to abort the sampling. Use None to disable this feature.</param>
      <param name="linearDisplacementThreshold">Linear displacement threshold above which sampling should be performed.</param>
      <param name="angularDisplacementThreshold">Angular displacement threshold above which sampling should be performed.</param>
      <param name="prismaticJointDisplacementThreshold">Prismatic joint displacement threshold above which sampling should be performed.</param>
      <param name="revoluteJointDisplacementThreshold">Revolute joint displacement threshold above which sampling should be performed.</param>
      <param name="interpolate">Whether the solving can approximate calculations using interpolated measurements (faster).</param>
      <param name="positionTolerance">Acceptable approximation of Cartesian positions. Higher values will solve faster.</param>
      <param name="orientationTolerance">Acceptable approximation of Cartesian orientations. Higher values will solve faster.</param>
      <param name="prismaticJointTolerance">Acceptable approximation of prismatic joint positions. Higher values will solve faster.</param>
      <param name="revoluteJointTolerance">Acceptable approximation of revolute joint positions. Higher values will solve faster.</param>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.Strategy">
      <summary>Sampling strategy.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.CriticalAlertLevel">
      <summary>Alert level to be considered critical enough to abort the sampling. Use None to disable this feature.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.LinearDisplacementThreshold">
      <summary>Linear displacement threshold above which sampling should be performed.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.AngularDisplacementThreshold">
      <summary>Angular displacement threshold above which sampling should be performed.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.PrismaticJointDisplacementThreshold">
      <summary>Prismatic joint displacement threshold above which sampling should be performed.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.RevoluteJointDisplacementThreshold">
      <summary>Revolute joint displacement threshold above which sampling should be performed.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.Interpolate">
      <summary>Whether the solving can approximate calculations using interpolated measurements (faster).</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.PositionTolerance">
      <summary>Acceptable approximation of Cartesian positions. Higher values will solve faster.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.OrientationTolerance">
      <summary>Acceptable approximation of Cartesian orientations. Higher values will solve faster.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.PrismaticJointTolerance">
      <summary>Acceptable approximation of prismatic joint positions. Higher values will solve faster.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.RevoluteJointTolerance">
      <summary>Acceptable approximation of revolute joint positions. Higher values will solve faster.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.SamplingSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.Equals(HAL.Motion.Discretization.SamplingSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.op_Equality(HAL.Motion.Discretization.SamplingSettings,HAL.Motion.Discretization.SamplingSettings)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Planning.SamplingSettings" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Discretization.SamplingSettings.op_Inequality(HAL.Motion.Discretization.SamplingSettings,HAL.Motion.Discretization.SamplingSettings)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Planning.SamplingSettings" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.Discretization.SamplingStrategy">
      <summary>Enumerates supported sampling strategy.</summary>
    </member>
    <member name="F:HAL.Motion.Discretization.SamplingStrategy.Sequential">
      <summary>Sequential sampling: samples will be extracted sequentially along the path, from the start to the end.</summary>
    </member>
    <member name="F:HAL.Motion.Discretization.SamplingStrategy.Recursive">
      <summary>Recursive sampling: samples will be extracted homogeneously along the path until sampling criteria are met.</summary>
    </member>
    <member name="T:HAL.Motion.Discretization.Section">
      <summary>
            Self-sampling path section. A path section is either a complete blend, or the section (line, arc, joint spline) between one, two or no blends.
            <para>
            A non-blend section cannot be null, but can have no displacement in position or orientation.
            In the case of a section participating in a set of synchronous (multi-robot) procedures, kinematic redundancy might lead to cases where a non-blend section has no displacement in any space.
            A blend section might be null if the programmed motion is a blended motion, but other constraints lead to an impossibility to blend due to a lack of displacement.
            A motion action can only hold ONE non-blend section (starting after the preceding blend, if any), and ONE optional blend section which center point is the closest point to the motion target.
            </para></summary>
    </member>
    <member name="M:HAL.Motion.Discretization.Section.#ctor(HAL.Motion.Planning.MotionPlanner,HAL.Motion.Discretization.ISectionGeometry,HAL.Procedures.Actions.MotionAction,HAL.Motion.JointPositions,System.Boolean,HAL.Motion.JointPositions)">
      <summary>Creates a geometric path section.</summary>
      <param name="planner">Parent motion planner handling this section.</param>
      <param name="geometry">Section geometry relative to the world if the section is in joint space, relative to the motion target reference otherwise.</param>
      <param name="motion">Parent motion.</param>
      <param name="start">Position in joint space at the start of the section.</param>
      <param name="isMaster">Whether the section is for a nested master mechanism.</param>
      <param name="expectedEnd">Expected end position, if any.</param>
    </member>
    <member name="P:HAL.Motion.Discretization.Section.Geometry">
      <summary>Section geometry.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Section.CartesianGeometry">
      <summary>Section geometry in Cartesian space, if the section depicts a portion of motion in Cartesian space.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Section.Samples">
      <summary>Samples extracted from this section.</summary>
    </member>
    <member name="P:HAL.Motion.Discretization.Section.IsSamplingComplete">
      <summary>Whether the sampling of this section is complete.</summary>
    </member>
    <member name="M:HAL.Motion.Discretization.Section.SampleSequentiallyToEnd(System.Int32)">
      <summary>Retrieves a complete set of samples by stepping along the section. This method fills the sampling space in a strictly chronological way, but cannot use interpolated samples.</summary>
      <param name="stepCount">Desired number of sampling steps or intervals. The minimum value for a blend section is 2 (from start to mid-point, from mid-point to end).</param>
      <remarks>This method will take longer to complete than other methods using interpolated samples.</remarks>
    </member>
    <member name="M:HAL.Motion.Discretization.Section.SampleSequentiallyToEnd">
      <summary>Retrieves a complete set of samples by stepping along the section. This method fills the sampling space in a strictly chronological way, while being compatible with interpolated samples.</summary>
      <remarks>The use of this method in its current implementation might be limiting in cases where the procedure is very long and the user wishes to have a fast feasibility overview.</remarks>
    </member>
    <member name="T:HAL.Motion.Geometry.IJointSpline">
      <summary>Qualifies a joint spline.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.Actor">
      <summary>Acting mechanism.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.Displacement">
      <summary>Total position displacement for each joint.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.Length">
      <summary>Total position displacement along the section.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.Rotation">
      <summary>Total rotation displacement along the section.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.PositionAtStart">
      <summary>Entry joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.PositionAtEnd">
      <summary>Exit joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.SpeedAtStart">
      <summary>Entry joint speeds.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.IJointSpline.SpeedAtEnd">
      <summary>Exit joint speeds.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.IJointSpline.Sample(System.Nullable{HAL.Units.Angle.rad},System.Nullable{HAL.Units.Length.m},System.Boolean)">
      <summary>Samples this joint spline with given displacement thresholds.</summary>
      <param name="rotationThreshold">Rotation threshold. Default is 0.1 rad.</param>
      <param name="translationThreshold">Translation threshold. Default is 0.05m.</param>
      <param name="clearCache">Clears the sample cache.</param>
      <returns>Resulting samples.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.IJointSpline.PositionAt(System.Double)">
      <summary>Retrieves the set of joint positions at the specified normalized parameter.</summary>
      <param name="parameter">Parameter.</param>
      <returns>Retrieved joint position.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.IJointSpline.ClosestParameter(HAL.Spatial.Vector3D)">
      <summary>Retrieve the parameter on spline closest to a specified point.</summary>
      <param name="point">Point to test distance from.</param>
      <returns>Closest parameter on the spline.</returns>
    </member>
    <member name="T:HAL.Motion.Geometry.JointBlend">
      <summary>Blend in joint space.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.JointBlend.#ctor(HAL.Motion.Discretization.IPrimitiveSectionGeometry,HAL.Motion.Discretization.IPrimitiveSectionGeometry,System.Double,System.Double,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings)">
      <summary>Creates a joint blend between two primitive section geometries (joint spline, line or arc).</summary>
      <param name="entry">
      </param>
      <param name="exit">
      </param>
      <param name="entryParameter">
      </param>
      <param name="exitParameter">
      </param>
      <param name="inverseSolverSettings">Inverse solver settings to be used interpolate on the blend in case the joint blend is between spaces.</param>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.InverseSolverSettings">
      <summary>Inverse solver settings to be used interpolate on the blend in case the joint blend is between spaces.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.BlendSettings">
      <summary>Blend settings.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.PositionAtStart">
      <summary>Entry joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.PositionAtEnd">
      <summary>Exit joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.SpeedAtStart">
      <summary>Entry joint speeds.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.SpeedAtEnd">
      <summary>Exit joint speeds.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.EntryParameter">
      <summary>Entry zone parameter.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointBlend.ExitParameter">
      <summary>Exit zone parameter.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.JointBlend.EntryJointZoneIntersectionParameter(HAL.Motion.JointPositions,HAL.Motion.Geometry.IJointSpline)">
      <summary>Computes entry joint zone intersection parameter.</summary>
      <returns>Entry joint zone intersection parameter.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointBlend.ExitJointZoneIntersectionParameter(HAL.Motion.JointPositions,HAL.Motion.Geometry.IJointSpline)">
      <summary>Computes exit joint zone intersection parameter.</summary>
      <returns>Exit joint zone intersection parameter.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointBlend.PositionAt(System.Double)">
      <summary>Retrieves the set of joint positions at the specified normalized parameter.</summary>
      <param name="parameter">Parameter.</param>
      <returns>Retrieved joint position.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointBlend.At(System.Double)">
      <summary>Computes the value of the blending polynomial for a given indeterminate.</summary>
      <param name="x">Normalized indeterminate value.</param>
      <returns>Polynomial value for the specified indeterminate value.</returns>
    </member>
    <member name="T:HAL.Motion.Geometry.JointSpline">
      <summary>Joint displacement as spline.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSpline.ParameterAt(HAL.Units.Length.m)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSpline.ParameterAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the parameter on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSpline.PositionAt(System.Double)">
      <summary>Retrieves the set of joint positions at the specified normalized parameter.</summary>
      <param name="parameter">Parameter.</param>
      <returns>Retrieved joint position.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSpline.Trim(HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.BlendSettings,System.Double@,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on end points.</summary>
      <param name="startBlend">Blend settings at the start point.</param>
      <param name="endBlend">Blend settings at the end point.</param>
      <param name="previousExitParameter">Start blend exit parameter.</param>
      <param name="entryParameter">End blend entry parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSpline.Trim(HAL.Motion.Settings.BlendSettings,System.Boolean,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on one of extremity point.</summary>
      <param name="settings">Blend settings at the extremity point.</param>
      <param name="atEnd">Whether the trim operation should be applied on the end or start of the section.</param>
      <param name="parameter">Blend exit(if at start) or entry(if at end) parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSpline.#ctor(HAL.Kinematics.KinematicGraph,HAL.Motion.JointPositions,HAL.Motion.JointPositions,HAL.Motion.JointSpeeds,HAL.Motion.JointSpeeds)">
      <summary>Creates a blended motion joint path.</summary>
      <param name="actor">Acting mechanism.</param>
      <param name="startJointFrame">Start joint frame.</param>
      <param name="endJointFrame">End joint frame.</param>
      <param name="startJointSpeed">Start joint speed.</param>
      <param name="endJointSpeed">End joint speed.</param>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSpline.PositionAtStart">
      <summary>Entry joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSpline.PositionAtEnd">
      <summary>Exit joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSpline.SpeedAtStart">
      <summary>Entry joint speeds.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSpline.SpeedAtEnd">
      <summary>Exit joint speeds.</summary>
    </member>
    <member name="T:HAL.Motion.Geometry.JointSplineBase">
      <summary>Base joint spline implementation.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSplineBase.#ctor(HAL.Kinematics.KinematicGraph)">
      <summary>Creates a new joint spline.</summary>
      <param name="actor">Actor.</param>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.Actor">
      <summary>Acting mechanism.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.Displacement">
      <summary>Total position displacement for each joint.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.Length">
      <summary>Total position displacement along the section.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.Rotation">
      <summary>Total rotation displacement along the section.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.PositionAtStart">
      <summary>Entry joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.PositionAtEnd">
      <summary>Exit joint positions.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.SpeedAtStart">
      <summary>Entry joint speeds.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.JointSplineBase.SpeedAtEnd">
      <summary>Exit joint speeds.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSplineBase.PositionAt(System.Double)">
      <summary>Retrieves the set of joint positions at the specified normalized parameter.</summary>
      <param name="parameter">Parameter.</param>
      <returns>Retrieved joint position.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSplineBase.ClosestParameter(HAL.Spatial.Vector3D)">
      <summary>Retrieve the parameter on spline closest to a specified point.</summary>
      <param name="point">Point to test distance from.</param>
      <returns>Closest parameter on the spline.</returns>
    </member>
    <member name="M:HAL.Motion.Geometry.JointSplineBase.Sample(System.Nullable{HAL.Units.Angle.rad},System.Nullable{HAL.Units.Length.m},System.Boolean)">
      <summary>Samples this joint spline with given displacement thresholds.</summary>
      <param name="rotationThreshold">Rotation threshold. Default is 0.2 rad.</param>
      <param name="translationThreshold">Translation threshold. Default is 0.05m.</param>
      <param name="clearCache">Clears the sample cache.</param>
      <returns>Resulting samples.</returns>
    </member>
    <member name="T:HAL.Motion.Geometry.MotionGeometry">
      <summary>Geometry of a motion action.</summary>
    </member>
    <member name="M:HAL.Motion.Geometry.MotionGeometry.#ctor(HAL.Procedures.Actions.MotionAction,HAL.Procedures.Actions.MotionAction,System.Boolean)">
      <summary>Creates a collection of motion geometry associated to a motion action.</summary>
      <param name="motion">Motion action to be represented.</param>
      <param name="precedingMotion">Preceding motion action.</param>
      <param name="isMasterGeometry">Whether this geometry is linked to a master kinematic actor.</param>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.MasterGeometry">
      <summary>Associated master geometry, if the motion actor relies on a master mechanism.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.Primitive">
      <summary>Primitive geometry of the motion (without blends, relative to the target reference for Cartesian sections, relative to the world for joint sections).</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.IsFromJoint">
      <summary>Whether this motion geometry starts in joint space.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.IsToJoint">
      <summary>Whether this motion geometry ends in joint space.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.HasMixedSpaces">
      <summary>Whether this motion geometry starts and end in different spaces.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.HasMixedReferences">
      <summary>Whether this motion geometry starts and end in different Cartesian references.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.IsTargetOutOfReach">
      <summary>Whether the target of this motion is out of reach.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.PrecedingReferenceInWorld">
      <summary>If this motion ends in Cartesian space on a specific reference, position of the preceding reference in the world when the preceding target is reached.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.PrecedingTargetInWorld">
      <summary>If this motion starts or ends in Cartesian space, position of the preceding target in the world when it (the preceding target) is reached.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.ReferenceInWorld">
      <summary>If this motion ends in Cartesian space on a specific reference, position of this reference in the world when the target is reached.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.TargetInWorld">
      <summary>If this motion starts or ends in Cartesian space, position of the target in the world when it is reached.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.ReferenceInWorldAtStart">
      <summary>If this motion ends in Cartesian space on a specific reference, position of this reference in the world at the beginning of the motion.</summary>
    </member>
    <member name="P:HAL.Motion.Geometry.MotionGeometry.Blended">
      <summary>Path sections generated from the motion geometry (relative to the target reference for strictly Cartesian sections, relative to the world for joint sections and mixed-space joint blends).</summary>
    </member>
    <member name="T:HAL.Motion.Settings.JointAccelerations">
      <summary>Set of joint accelerations.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.JointAccelerations.#ctor(System.Collections.Generic.IReadOnlyList{HAL.Objects.Joint},System.Double[],System.Boolean)">
      <summary>Creates a set of joint measurements from the current state of a set of joints.</summary>
      <param name="joints">Joints to record measurements from.</param>
      <param name="values">Measurements overrides.</param>
      <param name="clamp">Whether measurements overrides should be clamped.</param>
    </member>
    <member name="M:HAL.Motion.Settings.JointAccelerations.#ctor(System.Collections.Generic.IEnumerable{HAL.Units.IJointAcceleration})">
      <summary>Creates a set of joint measurements from an existing collection of measurements.</summary>
      <param name="measurements">Measurements to copy.</param>
    </member>
    <member name="M:HAL.Motion.Settings.JointAccelerations.Clone">
      <summary>Clones this object.</summary>
      <returns>Copy of the original object.</returns>
    </member>
    <member name="T:HAL.Motion.Settings.AccelerationSettings">
      <summary>Represents a set of speed constraints in operational and joint spaces.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Create(System.String,HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.AngularAcceleration,HAL.Motion.Settings.AccelerationSettings@)">
      <summary>Creates a set of acceleration settings.</summary>
      <param name="position">Position speed.</param>
      <param name="orientation">Orientation speed.</param>
      <param name="alias">Alias to give to these settings.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Create(System.String,HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{System.Double},HAL.Motion.Settings.AccelerationSettings@)">
      <summary>Creates a set of acceleration settings.</summary>
      <param name="mechanism">Mechanism.</param>
      <param name="joint">Joint acceleration for each joint of the mechanism.</param>
      <param name="alias">Alias to give to these settings.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Create(System.String,HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.AngularAcceleration,HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{System.Double},HAL.Motion.Settings.AccelerationSettings@)">
      <summary>Creates a set of acceleration settings.</summary>
      <param name="position">Position speed.</param>
      <param name="orientation">Orientation speed.</param>
      <param name="mechanism">Mechanism.</param>
      <param name="joint">Joint acceleration for each joint of the mechanism.</param>
      <param name="alias">Alias to give to these settings.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.#ctor(HAL.Motion.Settings.JointAccelerations)">
      <summary>Creates a set of settings for accelerations and mirrored decelerations in joint space.</summary>
      <param name="jointAccelerations">Joints accelerations in the unit corresponding to each joint type.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.#ctor(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.AngularAcceleration)">
      <summary>Creates a set of settings for accelerations and mirrored decelerations in operational space.</summary>
      <param name="positionAcceleration">Position acceleration in operational space.</param>
      <param name="orientationAcceleration">Orientation acceleration in operational space.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.#ctor(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.AngularAcceleration,HAL.Motion.Settings.JointAccelerations)">
      <summary>Creates a set of settings for accelerations and decelerations in operational and joint spaces.</summary>
      <param name="positionAcceleration">Position acceleration in operational space.</param>
      <param name="positionDeceleration">Position deceleration in operational space.</param>
      <param name="orientationAcceleration">Orientation acceleration in operational space.</param>
      <param name="orientationDeceleration">Orientation deceleration in operational space.</param>
      <param name="jointAccelerations">Joints accelerations in the unit corresponding to each joint type.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.#ctor(HAL.Motion.Settings.AccelerationSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The existing settings that should be cloned.</param>
    </member>
    <member name="P:HAL.Motion.Settings.AccelerationSettings.PositionAcceleration">
      <summary>Position acceleration in operational space.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.AccelerationSettings.PositionDeceleration">
      <summary>Position deceleration in operational space.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.AccelerationSettings.OrientationAcceleration">
      <summary>Orientation acceleration in operational space.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.AccelerationSettings.OrientationDeceleration">
      <summary>Orientation deceleration in operational space.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.AccelerationSettings.JointAccelerations">
      <summary>Joints accelerations in the unit corresponding to each joint type.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.AccelerationSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of this object .</returns>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Merge(HAL.Motion.Settings.AccelerationSettings)">
      <summary>Overwrites any settings that are not null in the input settings thereby merging the two settings.</summary>
      <param name="newSettings">The settings that should be merged into these.</param>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Equals(HAL.Motion.Settings.AccelerationSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.op_Equality(HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.AccelerationSettings)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Settings.AccelerationSettings" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.AccelerationSettings.op_Inequality(HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.AccelerationSettings)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Settings.AccelerationSettings" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.Settings.BlendSettings">
      <summary>Manages the settings of a blend (approximation zone).</summary>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.Create(System.String,HAL.Units.Length.Length,HAL.Units.Angle.Angle,HAL.Motion.Settings.BlendSettings@)">
      <summary>Creates a set of blend (approximation) settings.</summary>
      <param name="position">Position blend.</param>
      <param name="orientation">Orientation blend.</param>
      <param name="alias">Alias to give to these settings.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.#ctor(HAL.Units.Length.Length,HAL.Units.Angle.Angle)">
      <summary>Creates a set of settings to blend a motion with the following one.</summary>
      <param name="positionBlend">Distance threshold of the position blend.</param>
      <param name="orientationBlend">Angular threshold of the orientation blend.</param>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.#ctor(HAL.Motion.Settings.BlendSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The settings to be cloned.</param>
    </member>
    <member name="P:HAL.Motion.Settings.BlendSettings.PositionBlend">
      <summary>Distance threshold of the position blend.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.BlendSettings.OrientationBlend">
      <summary>Angular threshold of the orientation blend.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.BlendSettings.IsValid">
      <summary>True if the blend settings allow the creation of a valid blend.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of this object .</returns>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.Equals(HAL.Motion.Settings.BlendSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.op_Equality(HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.BlendSettings)">
      <summary>Checks for equality between two sets of settings.</summary>
      <param name="left">First item to compare.</param>
      <param name="right">Second item to compare.</param>
    </member>
    <member name="M:HAL.Motion.Settings.BlendSettings.op_Inequality(HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.BlendSettings)">
      <summary>Checks for inequality between two sets of settings.</summary>
      <param name="left">First item to compare.</param>
      <param name="right">Second item to compare.</param>
    </member>
    <member name="T:HAL.Motion.Settings.Interpolation">
      <summary>Enumerates interpolation types supported by HAL.</summary>
    </member>
    <member name="F:HAL.Motion.Settings.Interpolation.Unset">
      <summary>Unset (invalid) interpolation.</summary>
    </member>
    <member name="F:HAL.Motion.Settings.Interpolation.Linear">
      <summary>Linear interpolation in Cartesian space.</summary>
    </member>
    <member name="F:HAL.Motion.Settings.Interpolation.Circular">
      <summary>Circular interpolation in Cartesian space.</summary>
    </member>
    <member name="F:HAL.Motion.Settings.Interpolation.Spline">
      <summary>Spline interpolation.</summary>
    </member>
    <member name="F:HAL.Motion.Settings.Interpolation.Joint">
      <summary>Joint interpolation.</summary>
    </member>
    <member name="T:HAL.Motion.Settings.Kinematics.AlignedTargetResolver">
      <summary>Resolves to a target with an axis aligned to a given vector.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Axis,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates an aligned target resolver.</summary>
      <param name="direction">Direction to follow.</param>
      <param name="axis">Target axis to operate on.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="project">Whether a projection of the direction vector on the target should be used instead of the exact vector.</param>
      <param name="average">Whether to average the input targets. If false, the first target will be used.</param>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.Direction">
      <summary>Vector with which to align.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.Axis">
      <summary>Target axis to operate on.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.Flip">
      <summary>Whether the inverse direction of the axis should be used.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.Project">
      <summary>Whether a projection of the direction vector on the target should be used instead of the exact vector.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.Average">
      <summary>Whether to average the input targets. If false, the first target will be used.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.AlignedTargetResolver.Resolve(System.Collections.Generic.IEnumerable{HAL.Motion.Settings.Target},HAL.Motion.Settings.Target@)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings">
      <summary>Settings for the kinematic solving of a composite mechanism.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.#ctor(System.String,HAL.Motion.Settings.Kinematics.KinematicSettings,System.Collections.Generic.List{HAL.Motion.Settings.Kinematics.KinematicSettings},HAL.Kinematics.SolverManagers.MechanismGroupSolvingStrategy,HAL.Motion.Settings.Kinematics.TargetResolver,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints)">
      <summary>Creates settings for the kinematic solving of a composite mechanism.</summary>
      <param name="alias">Alias.</param>
      <param name="masterConstraints">Constraints for the master sub-mechanism in this compound mechanism.</param>
      <param name="slaveConstraints">Constraints for the slave sub-mechanism(s) in this compound mechanism.</param>
      <param name="solvingStrategy">Solving strategy.</param>
      <param name="masterTargetResolver">Method of resolution for the master's target if none is explicitly defined.</param>
      <param name="mechanismConstraints">Mechanical constraints.</param>
      <param name="targetConstraints">Target constraints.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.#ctor(HAL.Motion.Settings.Kinematics.CompositeKinematicSettings)">
      <summary>Creates a new set of settings from an existing one.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.MasterConstraints">
      <summary>Constraints for the master sub-mechanism in this compound mechanism.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.SlaveConstraints">
      <summary>Constraints for the slave sub-mechanism(s) in this compound mechanism.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.SolvingStrategy">
      <summary>Solving strategy for the compound mechanism.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.MasterTargetResolver">
      <summary>Method of resolution for the master's target if none is explicitly defined.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.Clone">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.Equals(HAL.Motion.Settings.Kinematics.CompositeKinematicSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.op_Equality(HAL.Motion.Settings.Kinematics.CompositeKinematicSettings,HAL.Motion.Settings.Kinematics.CompositeKinematicSettings)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Kinematics.CompositeKinematicConstriants" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.CompositeKinematicSettings.op_Inequality(HAL.Motion.Settings.Kinematics.CompositeKinematicSettings,HAL.Motion.Settings.Kinematics.CompositeKinematicSettings)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Kinematics.CompositeKinematicConstriants" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.Settings.Kinematics.ExplicitTargetResolver">
      <summary>Resolves to a given target.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.ExplicitTargetResolver.#ctor(HAL.Motion.Settings.Target)">
      <summary>Creates an explicit target resolver.</summary>
      <param name="target">Target to resolve to.</param>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.ExplicitTargetResolver.Target">
      <summary>Target.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.ExplicitTargetResolver.Resolve(System.Collections.Generic.IEnumerable{HAL.Motion.Settings.Target},HAL.Motion.Settings.Target@)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Motion.Settings.Kinematics.KinematicSettings">
      <summary>Settings for the kinematic solving of a mechanism.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.Create(System.String,HAL.Objects.Mechanisms.Mechanism,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints,HAL.Motion.Settings.Kinematics.KinematicSettings@)">
      <summary>Creates settings for the kinematic solving of a mechanism.</summary>
      <param name="alias">Alias.</param>
      <param name="mechanism">Mechanism on which to apply the constraints.</param>
      <param name="mechanismConstraints">Mechanical constraints.</param>
      <param name="targetConstraints">Target constraints.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.Create(System.String,HAL.Motion.Settings.Kinematics.KinematicSettings,System.Collections.Generic.List{HAL.Motion.Settings.Kinematics.KinematicSettings},HAL.Kinematics.SolverManagers.MechanismGroupSolvingStrategy,HAL.Motion.Settings.Kinematics.TargetResolver,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints,HAL.Motion.Settings.Kinematics.KinematicSettings@)">
      <summary>Creates settings for the kinematic solving of a compound mechanism.</summary>
      <param name="alias">Alias.</param>
      <param name="master">Constraints for the master sub-mechanism in this compound mechanism.</param>
      <param name="slave">Solving strategy for the compound mechanism.</param>
      <param name="solvingStrategy">Solving strategy.</param>
      <param name="masterTargetResolver">Method of resolution for the master's target if none is explicitly defined.</param>
      <param name="mechanismConstraints">Mechanical constraints.</param>
      <param name="targetConstraints">Target constraints.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.#ctor(System.String,HAL.Objects.Mechanisms.Mechanism,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverMechanismConstraints,HAL.Kinematics.Solvers.Inverse.Constraints.InverseSolverTargetConstraints)">
      <summary>Creates settings for the kinematic solving of a mechanism.</summary>
      <param name="alias">Alias.</param>
      <param name="mechanism">Mechanism on which to apply the constraints.</param>
      <param name="mechanismConstraints">Mechanical constraints.</param>
      <param name="targetConstraints">Target constraints.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.#ctor(HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Creates a new set of settings from an existing one.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.KinematicSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.KinematicSettings.Mechanism">
      <summary>Mechanism to constrain.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.KinematicSettings.MechanismConstraints">
      <summary>Constraints on the solving of the mechanics.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.KinematicSettings.TargetConstraints">
      <summary>Constraints and freedoms on the target.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.Clone">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.Equals(HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.EqualsWithoutTypeCheck(HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.op_Equality(HAL.Motion.Settings.Kinematics.KinematicSettings,HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Kinematics.KinematicConstraints" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.KinematicSettings.op_Inequality(HAL.Motion.Settings.Kinematics.KinematicSettings,HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Kinematics.KinematicConstraints" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.Settings.Kinematics.OffsetTargetResolver">
      <summary>Resolves to a target offset from the input.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.OffsetTargetResolver.#ctor(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,System.Boolean)">
      <summary>Creates an offset target resolver.</summary>
      <param name="offset">Offset frame.</param>
      <param name="reference">&gt;Reference for the offset. If none is specified the target itself is considered the reference frame.</param>
      <param name="average">Whether to average the input targets. If false, the first target will be used.</param>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.OffsetTargetResolver.Offset">
      <summary>Offset frame.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.OffsetTargetResolver.Reference">
      <summary>Reference for the offset. If none is specified the target itself is considered the reference frame.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Kinematics.OffsetTargetResolver.Average">
      <summary>Whether to average the input targets. If false, the first target will be used.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.OffsetTargetResolver.Resolve(System.Collections.Generic.IEnumerable{HAL.Motion.Settings.Target},HAL.Motion.Settings.Target@)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Motion.Settings.Kinematics.TargetResolver">
      <summary>Base class for target resolvers.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.TargetResolver.CreateAligned(HAL.Spatial.Vector3D,HAL.Spatial.Axis,System.Boolean,System.Boolean,System.Boolean,HAL.Motion.Settings.Kinematics.TargetResolver@)">
      <summary>Creates an aligned target resolver.</summary>
      <param name="direction">Direction to follow.</param>
      <param name="axis">Target axis to operate on.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="project">Whether a projection of the direction vector on the target should be used instead of the exact vector.</param>
      <param name="average">Whether to average the input targets. If false, the first target will be used.</param>
      <param name="resolver">Resolver.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.TargetResolver.CreateOffset(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,System.Boolean,HAL.Motion.Settings.Kinematics.TargetResolver@)">
      <summary>Creates an offset target resolver.</summary>
      <param name="offset">Offset frame.</param>
      <param name="reference">&gt;Reference for the offset. If none is specified the target itself is considered the reference frame.</param>
      <param name="average">Whether to average the input targets. If false, the first target will be used.</param>
      <param name="resolver">Resolver.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.TargetResolver.CreateExplicit(HAL.Motion.Settings.Target,HAL.Motion.Settings.Kinematics.TargetResolver@)">
      <summary>Creates an explicit target resolver.</summary>
      <param name="target">Target to resolve to.</param>
      <param name="resolver">Resolver.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.TargetResolver.Resolve(System.Collections.Generic.IEnumerable{HAL.Motion.Settings.Target},HAL.Motion.Settings.Target@)">
      <summary>Resolves a target given a series of referenceTargets.</summary>
      <param name="referenceTargets">Targets on which to base the resolution.</param>
      <param name="inputTarget">Final target used as input to resolver.</param>
      <returns>Target for the mechanism.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Kinematics.TargetResolver.GetAverage(HAL.Motion.Settings.Target[])">
      <summary> Gets the average of several Cartesian targets.</summary>
      <param name="targets">Targets.</param>
      <remarks>The result is undefined when the targets don't have the same references.</remarks>
    </member>
    <member name="T:HAL.Motion.Settings.MotionSettings">
      <summary>Set of settings constraining a motion.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Create(System.String,HAL.Motion.Settings.MotionSpace,HAL.Motion.Settings.SpeedSettings,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.MotionSettings@)">
      <summary>Creates a set of motion settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="space">Motion space.</param>
      <param name="speed">Motion speed.</param>
      <param name="acceleration">Motion acceleration.</param>
      <param name="blend">Blend (approximation) of the motion.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Create(System.String,HAL.Motion.Settings.MotionSpace,HAL.Motion.Settings.SpeedSettings,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.SyncSettings,HAL.Motion.Settings.Kinematics.KinematicSettings,HAL.Motion.Settings.MotionSettings@)">
      <summary>Creates a set of motion settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="space">Motion space.</param>
      <param name="speed">Motion speed.</param>
      <param name="acceleration">Motion acceleration.</param>
      <param name="blend">Blend (approximation) of the motion.</param>
      <param name="sync">Synchronization settings.</param>
      <param name="kinematics">Kinematic settings for each target.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Create(System.String,HAL.Motion.Settings.MotionSpace,HAL.Units.Time.Time,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.MotionSettings@)">
      <summary>Creates a set of motion settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="space">Motion space.</param>
      <param name="duration">Motion duration.</param>
      <param name="acceleration">Motion acceleration.</param>
      <param name="blend">Blend (approximation) of the motion.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Create(System.String,HAL.Motion.Settings.MotionSpace,HAL.Motion.Settings.SpeedSettings,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.SyncSettings,HAL.Motion.Settings.Kinematics.KinematicSettings,HAL.Motion.Settings.Target,HAL.Motion.Settings.MotionSettings@)">
      <summary>Creates a set of motion settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="space">Motion space.</param>
      <param name="speed">Motion speed.</param>
      <param name="acceleration">Motion acceleration.</param>
      <param name="blend">Blend (approximation) of the motion.</param>
      <param name="sync">Synchronization settings.</param>
      <param name="kinematics">Kinematic settings for each target.</param>
      <param name="secondary">Secondary target constraining the robot redundancy.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Create(System.String,HAL.Motion.Settings.MotionSpace,HAL.Units.Time.Time,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.SyncSettings,HAL.Motion.Settings.Kinematics.KinematicSettings,HAL.Motion.Settings.Target,HAL.Motion.Settings.MotionSettings@)">
      <summary>Creates a set of motion settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="space">Motion space.</param>
      <param name="duration">Motion duration.</param>
      <param name="acceleration">Motion acceleration.</param>
      <param name="blend">Blend (approximation) of the motion.</param>
      <param name="sync">Synchronization settings.</param>
      <param name="kinematics">Kinematic settings for each target.</param>
      <param name="secondary">Secondary target constraining the robot redundancy.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.#ctor(HAL.Motion.Settings.MotionSettings)">
      <summary>Creates a set of motion settings from an existing one.</summary>
      <param name="motionSettings">Existing settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.#ctor(HAL.Motion.Settings.MotionSpace,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Units.Time.s,HAL.Motion.Settings.SyncSettings,HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Aggregates a set of settings for a motion action constrained by a duration.</summary>
      <param name="space">Motion space.</param>
      <param name="accelerationSettings">Acceleration Settings.</param>
      <param name="blendSettings">Blend settings.</param>
      <param name="duration">Duration.</param>
      <param name="sync">Synchronization settings.</param>
      <param name="kinematicSettings">Kinematics settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.#ctor(HAL.Motion.Settings.MotionSpace,HAL.Motion.Settings.SpeedSettings,HAL.Motion.Settings.AccelerationSettings,HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.SyncSettings,HAL.Motion.Settings.Kinematics.KinematicSettings)">
      <summary>Aggregates a set of settings for a motion action constrained by a speed.</summary>
      <param name="space">Motion space.</param>
      <param name="speedSettings">Speed settings.</param>
      <param name="accelerationSettings">Acceleration Settings.</param>
      <param name="blendSettings">Blend settings.</param>
      <param name="sync">Synchronization settings.</param>
      <param name="kinematicSettings">Kinematics settings.</param>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.Target">
      <summary>Target to reach.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.SecondaryTarget">
      <summary>Secondary target to tend towards.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.Space">
      <summary>Space in which the settings must be interpreted.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.BlendSettings">
      <summary>Blend settings.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.SpeedSettings">
      <summary>Speed settings.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.Duration">
      <summary>Motion duration.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.AccelerationSettings">
      <summary>Acceleration settings.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.KinematicSettings">
      <summary>Settings for the kinematic solving of the action.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.Sync">
      <summary>Synchronization settings for this action.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.MotionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of this object .</returns>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Equals(HAL.Motion.Settings.MotionSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.op_Equality(HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Settings.MotionSettings" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.MotionSettings.op_Inequality(HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Settings.MotionSettings" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.Settings.MotionSpace">
      <summary>Enumerates the various spaces available for motion operations.</summary>
    </member>
    <member name="F:HAL.Motion.Settings.MotionSpace.Cartesian">
      <summary>Cartesian (operational) space</summary>
    </member>
    <member name="F:HAL.Motion.Settings.MotionSpace.Joint">
      <summary>Joint space</summary>
    </member>
    <member name="T:HAL.Motion.Settings.SpeedSettings">
      <summary>Represents a set of speed constraints in operational and joint spaces.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Create(System.String,HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.AngularSpeed,HAL.Motion.Settings.SpeedSettings@)">
      <summary>Creates a set of speed settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="position">Position speed.</param>
      <param name="orientation">Orientation speed.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Create(System.String,HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{System.Double},HAL.Motion.Settings.SpeedSettings@)">
      <summary>Creates a set of speed settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="mechanism">Mechanism.</param>
      <param name="joint">Joint speed for each joint of the mechanism.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Create(System.String,HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.AngularSpeed,HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{System.Double},HAL.Motion.Settings.SpeedSettings@)">
      <summary>Creates a set of speed settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="position">Position speed.</param>
      <param name="orientation">Orientation speed.</param>
      <param name="mechanism">Mechanism.</param>
      <param name="joint">Joint speed for each joint of the mechanism.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.#ctor(HAL.Motion.JointSpeeds)">
      <summary>Creates a set of speed settings.</summary>
      <param name="jointSpeeds">Joint speeds.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.#ctor(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.AngularSpeed)">
      <summary>Creates a set of speed settings.</summary>
      <param name="positionSpeed">Position speed in operational space.</param>
      <param name="orientationSpeed">Orientation speed in operational space.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.#ctor(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.AngularSpeed,HAL.Motion.JointSpeeds)">
      <summary>Creates a set of speed settings.</summary>
      <param name="positionSpeed">Position speed in operational space.</param>
      <param name="orientationSpeed">Orientation speed in operational space.</param>
      <param name="jointSpeeds">Joint speeds.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.#ctor(HAL.Motion.Settings.SpeedSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The existing settings that should be cloned.</param>
    </member>
    <member name="P:HAL.Motion.Settings.SpeedSettings.PositionSpeed">
      <summary>Position speed in operational space.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.SpeedSettings.OrientationSpeed">
      <summary>Orientation speed in operational space.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.SpeedSettings.JointSpeeds">
      <summary>Joint speeds.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.SpeedSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of this object .</returns>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Merge(HAL.Motion.Settings.SpeedSettings)">
      <summary>Overwrites any settings that are not null in the input settings thereby merging the two settings.</summary>
      <param name="newSettings">The settings that should be merged into these.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Equals(HAL.Motion.Settings.SpeedSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SpeedSettings.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="T:HAL.Motion.Settings.SyncSettings">
      <summary>Represents synchronous interpretation settings.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.Create(System.String,HAL.Motion.Settings.SyncSettings@)">
      <summary>Creates a set of synchronization settings.</summary>
      <param name="alias">Alias to give to these settings.</param>
      <param name="settings">Resulting settings.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.#ctor(System.String)">
      <summary>Creates a set of synchronous interpretation settings.</summary>
      <param name="alias">Synchronization marker alias.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.#ctor(HAL.Motion.Settings.SyncSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to copy.</param>
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of this object .</returns>
    </member>
    <member name="P:HAL.Motion.Settings.SyncSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.Equals(HAL.Motion.Settings.SyncSettings)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.SyncSettings.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Motion.Settings.Target">
      <summary>Represents a complete specification of a device position, orientation, approximation and synchronous execution.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Target.CartesianTarget(System.Collections.Generic.List{System.String},System.Collections.Generic.List{HAL.Spatial.MatrixFrame},HAL.Objects.Reference,System.Boolean,HAL.Motion.Settings.Target[]@)">
      <summary>Creates motion targets.</summary>
      <param name="alias">Targets aliases. If a single value is given, it will be used as a prefix, followed by the target index.</param>
      <param name="frame">Targets frames.</param>
      <param name="reference">Reference.</param>
      <param name="isAbsolute">Whether the frame specifies an absolute world location. If false, the frame is considered relative to the reference.</param>
      <param name="target">Targets.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.CartesianTarget(System.String,System.Collections.Generic.List{HAL.Spatial.MatrixFrame},HAL.Objects.Reference,System.Boolean,HAL.Motion.Settings.Target[]@)">
      <summary>Creates motion targets.</summary>
      <param name="alias">Targets aliases.</param>
      <param name="frame">Targets frames.</param>
      <param name="reference">Reference.</param>
      <param name="isAbsolute">Whether the frame specifies an absolute world location. If false, the frame is considered relative to the reference.</param>
      <param name="target">Targets.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.CartesianTarget(HAL.Motion.Settings.Target@,System.String,HAL.Spatial.MatrixFrame,HAL.Objects.Reference,HAL.Motion.Settings.Target@)">
      <summary>Creates a motion target.</summary>
      <param name="instance">Existing instance of this target.</param>
      <param name="alias">Target alias.</param>
      <param name="frame">Target frame.</param>
      <param name="reference">Reference.</param>
      <param name="target">Target.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.Filter(System.Collections.Generic.List{HAL.Motion.Settings.Target},HAL.Units.Length.Length,HAL.Units.Angle.Angle,System.Collections.Generic.List{HAL.Motion.Settings.Target}@,System.Collections.Generic.List{HAL.Motion.Settings.Target}@,System.Collections.Generic.List{System.Boolean}@)">
      <summary>Filters a set of targets.</summary>
      <param name="target">Targets to be filtered.</param>
      <param name="position">If &gt; 0, minimum tolerated position displacement between targets.</param>
      <param name="orientation">If &gt; 0, minimum tolerated orientation displacement between targets.</param>
      <param name="remaining">Filtered targets.</param>
      <param name="discarded">Discarded targets.</param>
      <param name="mask">Filtering mask. True for remaining, false for discarded.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.GetProperties(HAL.Motion.Settings.Target,System.String@,System.Collections.Generic.List{System.Double}@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Objects.Reference@,System.Boolean@)">
      <summary>Retrieves the properties of a target.</summary>
      <param name="target">Target to analyze.</param>
      <param name="alias">Target alias.</param>
      <param name="joint">Joint positions.</param>
      <param name="wayFrame">Way frame if the target depicts an arc.</param>
      <param name="endFrame">End frame.</param>
      <param name="reference">Reference.</param>
      <param name="isArc">Whether this target depicts an arc.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.SetProperties(HAL.Motion.Settings.Target,System.String,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,HAL.Objects.Reference,HAL.Motion.Settings.Target@)">
      <summary>Modifies the properties of a target.</summary>
      <param name="instance">Target to modify.</param>
      <param name="alias">Target alias.</param>
      <param name="wayFrame">Way frame if the target depicts an arc.</param>
      <param name="endFrame">End frame.</param>
      <param name="reference">Reference.</param>
      <param name="target">Target.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.#ctor">
      <summary>Creates an empty target.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Target.#ctor(HAL.Motion.Settings.Target)">
      <summary>Creates a target from an existing one.</summary>
      <param name="target">Existing target.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.#ctor(HAL.Spatial.CompositeFrame,System.String)">
      <summary>Creates a target for a motion to a position.</summary>
      <param name="end">End position.</param>
      <param name="alias">Target alias.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.#ctor(HAL.Spatial.CompositeFrame,HAL.Spatial.CompositeFrame,System.String)">
      <summary>Creates a target for a motion between two positions through a third, to generate an arc.</summary>
      <param name="through">Passage position.</param>
      <param name="end">End position.</param>
      <param name="alias">Target alias.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.#ctor(System.Collections.Generic.List{HAL.Spatial.CompositeFrame},HAL.Spatial.CompositeFrame,System.String)">
      <summary>Creates a target for a motion between two positions through a set of way-points, to generate a spline.</summary>
      <param name="through">Passage positions.</param>
      <param name="end">End position.</param>
      <param name="alias">Target alias.</param>
    </member>
    <member name="P:HAL.Motion.Settings.Target.Waypoints">
      <summary>Way-points (intermediary locations) to reach before the endpoint.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Target.Frame">
      <summary>Endpoint of the motion, as programmed.</summary>
    </member>
    <member name="P:HAL.Motion.Settings.Target.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Target.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Settings.Target.Clone">
      <summary>Clones this object.</summary>
    </member>
    <member name="E:HAL.Motion.Settings.Target.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Target.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Motion.Settings.Target.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Motion.Settings.Target.Equals(HAL.Motion.Settings.Target)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Target.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Target.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Target.op_Equality(HAL.Motion.Settings.Target,HAL.Motion.Settings.Target)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Settings.Target" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Settings.Target.op_Inequality(HAL.Motion.Settings.Target,HAL.Motion.Settings.Target)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Settings.Target" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.JointMeasurements`3">
      <summary>Base implementation of a set of joint measurements.</summary>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.#ctor(System.Collections.Generic.IReadOnlyList{HAL.Objects.Joint},System.Double[],System.Boolean)">
      <summary>Creates a set of joint measurements from the current state of a set of joints.</summary>
      <param name="joints">Joints to record measurements from.</param>
      <param name="values">Measurements overrides.</param>
      <param name="clamp">Whether measurements overrides should be clamped.</param>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates a set of joint measurements from an existing collection of measurements.</summary>
      <param name="measurements">Measurements to copy.</param>
    </member>
    <member name="P:HAL.Motion.JointMeasurements`3.Count">
      <summary>Number of joints.</summary>
    </member>
    <member name="P:HAL.Motion.JointMeasurements`3.JointTypes">
      <summary>Joint types.</summary>
    </member>
    <member name="P:HAL.Motion.JointMeasurements`3.Minimum">
      <summary>Lower range bound of each value, if any.</summary>
    </member>
    <member name="P:HAL.Motion.JointMeasurements`3.Maximum">
      <summary>Upper range bound of each value, if any.</summary>
    </member>
    <member name="P:HAL.Motion.JointMeasurements`3.Values">
      <summary>Measurement values.</summary>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.Clamp">
      <summary>Clamps the values to their range.</summary>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.GetRangeLengths">
      <summary>Retrieves the length of each measurement ranges.</summary>
      <returns>Range length of each measurement.</returns>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.SetRanges(HAL.Numerics.IInterval[],System.Boolean)">
      <summary>Changes the range of the joint measurements.</summary>
      <param name="ranges">New ranges.</param>
      <param name="clamp">Whether the measurement values should be clamped to these new ranges.</param>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.SetToMin">
      <summary>Sets values to minimum.</summary>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.SetToMax">
      <summary>Sets values to maximum.</summary>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.SetValue(System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Sets a measurement value and range.</summary>
      <param name="index">Value index.</param>
      <param name="value">Value.</param>
      <param name="min">Minimum.</param>
      <param name="max">Maximum.</param>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.SetValues(System.Double[],System.Boolean)">
      <summary>Sets measurement values.</summary>
      <param name="values">Values to be set.</param>
      <param name="clamp">Whether new values should be clamped within the measurement ranges.</param>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.ToMeasurement(System.Int32)">
      <summary>Retrieves the values for the specified joint and converts them to a measurement.</summary>
      <param name="index">Joint index.</param>
      <returns>Converted measurement.</returns>
    </member>
    <member name="M:HAL.Motion.JointMeasurements`3.ToMeasurements">
      <summary>Returns this set of measurements as an array of individual measurements.</summary>
      <returns>Converted measurements.</returns>
    </member>
    <member name="T:HAL.Motion.JointPositions">
      <summary>Set of joint positions.</summary>
    </member>
    <member name="M:HAL.Motion.JointPositions.#ctor(System.Collections.Generic.IReadOnlyList{HAL.Objects.Joint},System.Double[],System.Boolean)">
      <summary>Creates a set of joint positions from the current state of a set of joints.</summary>
      <param name="joints">Joints to record positions from.</param>
      <param name="positions">Positions overrides.</param>
      <param name="clamp">Whether positions overrides should be clamped.</param>
    </member>
    <member name="M:HAL.Motion.JointPositions.#ctor(System.Collections.Generic.IEnumerable{HAL.Units.IJointPosition})">
      <summary>Creates a set of joint positions from existing collection of positions.</summary>
      <param name="positions">Positions to copy.</param>
    </member>
    <member name="M:HAL.Motion.JointPositions.#ctor(HAL.Objects.JointType[],System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.JointPositions.#ctor(HAL.Motion.JointPositions)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.JointPositions.Clone">
      <summary>Clones this object.</summary>
      <returns>Copy of the original object.</returns>
    </member>
    <member name="T:HAL.Motion.JointSpeeds">
      <summary>Set of joint speeds.</summary>
    </member>
    <member name="M:HAL.Motion.JointSpeeds.#ctor(System.Collections.Generic.IReadOnlyList{HAL.Objects.Joint},System.Double[],System.Boolean)">
      <summary>Creates a set of joint measurements from the current state of a set of joints.</summary>
      <param name="joints">Joints to record measurements from.</param>
      <param name="values">Measurements overrides.</param>
      <param name="clamp">Whether measurements overrides should be clamped.</param>
    </member>
    <member name="M:HAL.Motion.JointSpeeds.#ctor(System.Collections.Generic.IEnumerable{HAL.Units.IJointSpeed})">
      <summary>Creates a set of joint measurements from an existing collection of measurements.</summary>
      <param name="measurements">Measurements to copy.</param>
    </member>
    <member name="M:HAL.Motion.JointSpeeds.Clone">
      <summary>Clones this object.</summary>
      <returns>Copy of the original object.</returns>
    </member>
    <member name="T:HAL.Motion.Planning.MotionPlanner">
      <summary>Motion planner of a single procedure.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetDisplacement(System.Double,System.Double,System.Double@)">
      <summary>Computes the displacement resulting from a motion at constant velocity during a given time.</summary>
      <param name="velocity">Constant velocity.</param>
      <param name="time">Time for which the object moved.</param>
      <param name="displacement">Resulting displacement.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetDisplacement(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the displacement resulting from a motion at variable velocity during a given time.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="finalVelocity">Final velocity.</param>
      <param name="time">Time for which the object moved.</param>
      <param name="displacement">Resulting displacement.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetDisplacementFromAcceleration(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the displacement resulting from a motion at constant acceleration during a given time.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="acceleration">Acceleration.</param>
      <param name="time">Time for which the object moved.</param>
      <param name="displacement">Resulting displacement.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetVelocity(System.Double,System.Double,System.Double@)">
      <summary>Computes the velocity from a displacement occurring in the specified time.</summary>
      <param name="displacement">Displacement.</param>
      <param name="time">Time for which the object moved.</param>
      <param name="velocity">Resulting velocity, signed as the displacement.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetAverageVelocity(System.Double,System.Double,System.Double@)">
      <summary>Computes the average velocity between two velocities.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="finalVelocity">Final velocity.</param>
      <param name="averageVelocity">Average velocity.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetFinalVelocity(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the final velocity from specified constraints.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="acceleration">Acceleration.</param>
      <param name="time">Time for which the object moved.</param>
      <param name="finalVelocity">Resulting velocity.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetLimitedFinalVelocity(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the limited final velocity from specified constraints.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="acceleration">Signed acceleration.</param>
      <param name="displacement">Signed displacement.</param>
      <param name="velocity">Resulting velocity, signed as the displacement.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetAccelerationFromTime(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the acceleration from variable velocities spanning on a given duration.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="finalVelocity">Final velocity.</param>
      <param name="time">Time for which the object moved.</param>
      <param name="acceleration">Resulting acceleration.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetAccelerationFromSpeed(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the acceleration from variable velocities and a specified displacement.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="finalVelocity">Final velocity.</param>
      <param name="displacement">Displacement.</param>
      <param name="acceleration">Resulting acceleration.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetAccelerationDuration(System.Double,System.Double,System.Double,System.Double@)">
      <summary>Computes the time taken by an acceleration or a deceleration.</summary>
      <param name="initialVelocity">Initial velocity.</param>
      <param name="finalVelocity">Final velocity.</param>
      <param name="acceleration">Acceleration.</param>
      <param name="duration">Time it took to accelerate or decelerate from the initial velocity to the final velocity with the specified acceleration.</param>
    </member>
    <member name="M:HAL.Motion.Planning.MotionPlanner.GetDuration(System.Double,System.Double,System.Double@)">
      <summary>Computes the duration of a displacement at constant velocity.</summary>
      <param name="displacement">Displacement.</param>
      <param name="velocity">Velocity.</param>
      <param name="duration">Resulting duration.</param>
    </member>
    <member name="P:HAL.Motion.Planning.MotionPlanner.SimulationGraph">
      <summary>Associated simulation graph.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.MotionPlanner.SolvingSettings">
      <summary>Solving settings.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.MotionPlanner.Progress">
      <summary>Solving progress.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.MotionPlanner.Duration">
      <summary>Simulated procedure duration.</summary>
    </member>
    <member name="T:HAL.Motion.Planning.MotionTimeline">
      <summary>Single motion time line.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.MotionTimeline.#ctor(HAL.Procedures.Actions.MotionAction,HAL.Motion.Discretization.Sample[],HAL.Units.Time.s)">
      <summary>Creates a motion action time line.</summary>
      <param name="motion">Sampled motion.</param>
      <param name="samples">Samples.</param>
      <param name="offset">Time offset at the start of this time line, relative to the procedure start.</param>
    </member>
    <member name="P:HAL.Motion.Planning.MotionTimeline.Samples">
      <summary>Samples of the time line.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.MotionTimeline.NotificationLevel">
      <summary>Notification level of the time line, as the highest notification severity of its samples.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.MotionTimeline.SampleAt(HAL.Units.Time.s,System.Boolean,HAL.Motion.Geometry.MotionGeometry,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings)">
      <summary>Retrieves a sample at the specified time parameter.</summary>
      <param name="time">Time at which the time-line should be evaluated.</param>
      <param name="solve">Whether inverse kinematics should be solved for this sample.</param>
      <param name="geometry">If the inverse kinematics must be solved, geometry of the motion. The position on the geometric path will be interpolated otherwise.</param>
      <param name="solverSettings">Inverse solver settings.</param>
      <returns>Resulting sample.</returns>
    </member>
    <member name="M:HAL.Motion.Planning.MotionTimeline.StateAt(HAL.Units.Time.s,System.Boolean,HAL.Motion.Geometry.MotionGeometry,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings)">
      <summary>Retrieves the mechanism state corresponding to a specified time parameter.</summary>
      <param name="time">Time at which the time-line should be evaluated.</param>
      <param name="solve">Whether inverse kinematics should be solved for this state.</param>
      <param name="geometry">If the inverse kinematics must be solved, geometry of the motion. The position on the geometric path will be interpolated otherwise.</param>
      <param name="inverseSolverSettings">Inverse solver settings.</param>
      <returns>Resulting state.</returns>
    </member>
    <member name="T:HAL.Motion.Planning.PlanningStep">
      <summary>Supported planning steps.</summary>
    </member>
    <member name="F:HAL.Motion.Planning.PlanningStep.Unplanned">
      <summary>Unplanned.</summary>
    </member>
    <member name="F:HAL.Motion.Planning.PlanningStep.Sequence">
      <summary>Motion sequence planning.</summary>
    </member>
    <member name="F:HAL.Motion.Planning.PlanningStep.PrimitiveGeometry">
      <summary>Initial action planning, resulting in primitive geometry.</summary>
    </member>
    <member name="F:HAL.Motion.Planning.PlanningStep.BlendedGeometry">
      <summary>Blended action geometry.</summary>
    </member>
    <member name="F:HAL.Motion.Planning.PlanningStep.Sampling">
      <summary>Action sampling.</summary>
    </member>
    <member name="F:HAL.Motion.Planning.PlanningStep.Complete">
      <summary>The planning is complete.</summary>
    </member>
    <member name="T:HAL.Motion.Planning.ProcedureSolvingProgress">
      <summary>Procedure solving progress reporter.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.ProcedureSolvingProgress.#ctor(HAL.Procedures.Procedure)">
      <summary>Creates a new procedure solving progress reporter.</summary>
      <param name="procedure">Procedure.</param>
    </member>
    <member name="M:HAL.Motion.Planning.ProcedureSolvingProgress.ReportBlendedMotionGeometryCreation">
      <summary>Reports the creation of the blended geometry of a motion action.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.ProcedureSolvingProgress.ReportSamplingCompletion">
      <summary>Reports the creation of all samples along a motion action.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.ProcedureSolvingProgress.ReportTrajectorySolvingCompletion">
      <summary>Reports the creation of the trajectory of a motion action.</summary>
    </member>
    <member name="T:HAL.Motion.Planning.SequenceMotionPlanner">
      <summary>Motion planner of a single motion sequence.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.SequenceMotionPlanner.#ctor(HAL.Motion.Planning.MotionPlanner,HAL.Procedures.Actions.MotionAction,System.Collections.Generic.List{HAL.Procedures.Actions.Action})">
      <summary>Creates a motion planner associated to a sequence of continuous motion actions.</summary>
      <param name="motionPlanner">Parent procedure motion planner.</param>
      <param name="precedingMotion">Preceding motion action, specifying the initial state at the start of this sequence.</param>
      <param name="actions">Actions belonging to the sequence.</param>
    </member>
    <member name="T:HAL.Motion.Planning.SolvingFidelity">
      <summary>Enumerates supported solving fidelities.</summary>
    </member>
    <member name="T:HAL.Motion.Planning.SolvingSettings">
      <summary>Path planning settings.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.Create(HAL.Motion.Planning.SolvingSettings@,HAL.Motion.Discretization.SamplingStrategy,System.Boolean,HAL.Motion.Planning.SolvingFidelity,HAL.Motion.Planning.SolvingSettings@)">
      <summary>Creates a set of procedure solver settings.</summary>
      <param name="instance">Prior settings instance.</param>
      <param name="strategy">Sampling strategy.</param>
      <param name="interpolate">Whether the solving can approximate calculations using interpolated measurements (faster).</param>
      <param name="fidelity">Solving fidelity.</param>
      <param name="settings">Solving settings.</param>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.Create(HAL.Motion.Planning.SolvingSettings@,HAL.Motion.Discretization.SamplingStrategy,System.Boolean,HAL.Units.Length.Length,HAL.Units.Angle.Angle,HAL.Units.Length.Length,HAL.Units.Angle.Angle,HAL.Motion.Planning.SolvingSettings@)">
      <summary>Creates a set of procedure solver settings.</summary>
      <param name="instance">Prior settings instance.</param>
      <param name="strategy">Sampling strategy.</param>
      <param name="interpolate">Whether the solving can approximate calculations using interpolated measurements (faster).</param>
      <param name="positionTolerance">Acceptable approximation of Cartesian positions. Higher values will solve faster.</param>
      <param name="orientationTolerance">Acceptable approximation of Cartesian orientations. Higher values will solve faster.</param>
      <param name="prismaticJointTolerance">Acceptable approximation of prismatic joint positions. Higher values will solve faster.</param>
      <param name="revoluteJointTolerance">Acceptable approximation of revolute joint positions. Higher values will solve faster.</param>
      <param name="settings">Solving settings.</param>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.#ctor(HAL.Motion.Discretization.SamplingSettings,System.Boolean)">
      <summary>Creates a set of trajectory solving settings.</summary>
      <param name="samplingSettings">Sampling settings.</param>
      <param name="parallelize">Whether solving should attempt to use all available processor resources.</param>
    </member>
    <member name="P:HAL.Motion.Planning.SolvingSettings.Parallelize">
      <summary>Whether solving should attempt to use all available processing resources.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.SolvingSettings.SamplingSettings">
      <summary>Sampling settings.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.SolvingSettings.Token">
      <summary>Cancellation token.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.SolvingSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.ResetCancellationToken(System.Boolean)">
      <summary>Resets the solving cancellation token.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.Equals(HAL.Motion.Planning.SolvingSettings)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.op_Equality(HAL.Motion.Planning.SolvingSettings,HAL.Motion.Planning.SolvingSettings)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Motion.Planning.SolvingSettings" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Motion.Planning.SolvingSettings.op_Inequality(HAL.Motion.Planning.SolvingSettings,HAL.Motion.Planning.SolvingSettings)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Motion.Planning.SolvingSettings" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Motion.Planning.Timeline">
      <summary>Blocking action time line.</summary>
    </member>
    <member name="M:HAL.Motion.Planning.Timeline.#ctor(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Creates a blocking action time line.</summary>
      <param name="duration">Time line duration.</param>
      <param name="offset">Time offset at the start of this time line, relative to the procedure start.</param>
    </member>
    <member name="P:HAL.Motion.Planning.Timeline.Duration">
      <summary>Time line duration.</summary>
    </member>
    <member name="P:HAL.Motion.Planning.Timeline.Offset">
      <summary>Time offset at the start of this time line, relative to the procedure start.</summary>
    </member>
    <member name="T:HAL.Numerics.AbsoluteInterval">
      <summary>Interval, as a continuous domain between two bounds.</summary>
    </member>
    <member name="M:HAL.Numerics.AbsoluteInterval.#ctor">
      <summary>Empty constructor, initializing a zero-length interval.</summary>
    </member>
    <member name="M:HAL.Numerics.AbsoluteInterval.#ctor(HAL.Numerics.AbsoluteInterval)">
      <summary>Creates an interval from an existing one.</summary>
      <param name="interval">Existing interval.</param>
    </member>
    <member name="M:HAL.Numerics.AbsoluteInterval.#ctor(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Creates an interval from existing values</summary>
      <param name="ts">Lower bound of the interval.</param>
      <param name="te">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Numerics.AbsoluteInterval.#ctor(HAL.Units.Absolute.abs)">
      <summary>Creates an interval from 0 to a given terminal value</summary>
      <param name="te">Upper bound of the interval.</param>
    </member>
    <member name="T:HAL.Numerics.DualQuaternion">
      <summary>Dual quaternion, composed of two quaternions.</summary>
      <remarks>The dual quaternion can also be used to express translations, i.e: Dual = 1/2Position*Rotation, Real = Rotation.</remarks>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.#ctor">
      <summary>Empty constructor, initializing a null dual quaternion.</summary>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.#ctor(HAL.Numerics.DualQuaternion)">
      <summary>Creates a dual quaternion from an existing one.</summary>
      <param name="dualQuaternion">Existing dual quaternion.</param>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.#ctor(HAL.Numerics.Quaternion,HAL.Numerics.Quaternion,System.Boolean)">
      <summary>Creates a dual quaternion from two existing quaternions.</summary>
      <param name="dual">Dual quaternion.</param>
      <param name="real">Real quaternion.</param>
      <param name="normalize">Normalize real part?.</param>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.#ctor(HAL.Spatial.QuaternionFrame,System.Boolean)">
      <summary>Converts a quaternion frame to a dual quaternion.</summary>
      <param name="quaternionFrame">Quaternion frame to translate.</param>
      <param name="normalize">Normalize real part?.</param>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates a dual quaternion from a matrix frame.</summary>
      <param name="matrixFrame">Matrix frame.</param>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.FromMatrix(HAL.Spatial.MatrixFrame)">
      <summary>Utility converter to enable the use of MatrixFrame in kinematics solvers.</summary>
      <param name="matrix">Matrix frame to convert to DualQuaternion.</param>
      <returns>Returns a converted matrix frame.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.FromDualQuaternion(HAL.Numerics.DualQuaternion)">
      <summary>Utility converter to enable the use of DualQuaternion in kinematics solvers.</summary>
      <param name="dualQuaternion">DualQuaternion frame to convert to DualQuaternion.</param>
      <returns>Returns a converted DualQuaternion.</returns>
    </member>
    <member name="P:HAL.Numerics.DualQuaternion.Unset">
      <summary>Unset quaternion.</summary>
    </member>
    <member name="P:HAL.Numerics.DualQuaternion.Dual">
      <summary>Dual component of the dual quaternion.</summary>
    </member>
    <member name="P:HAL.Numerics.DualQuaternion.Real">
      <summary>Real component of the dual quaternion.</summary>
    </member>
    <member name="P:HAL.Numerics.DualQuaternion.IsValid">
      <summary>Verifies that the dual quaternion is valid.</summary>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.Conjugate">
      <summary>Conjugate of the dual quaternion.</summary>
      <returns>Conjugated dual quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.ComplexConjugate">
      <summary>Complex conjugate of the dual quaternion.</summary>
      <returns>Processed dual quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.FullConjugate">
      <summary>Full conjugate of the dual quaternion.</summary>
      <returns>Processed dual quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.Inverse">
      <summary>Inverse of the dual quaternion.</summary>
      <returns>Processed dual quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.Add(HAL.Numerics.DualQuaternion)">
      <summary>Add a dual quaternion to this dual quaternion.</summary>
      <param name="q">Dual quaternion to add.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.Substract(HAL.Numerics.DualQuaternion)">
      <summary>Subtract a dual quaternion to this dual quaternion.</summary>
      <param name="q">Dual quaternion to subtract.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.Multiply(System.Double)">
      <summary>Multiply this dual quaternion with a scalar.</summary>
      <param name="scalar">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.Multiply(HAL.Numerics.DualQuaternion,System.Boolean)">
      <returns>Multiplied dual quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.op_Addition(HAL.Numerics.DualQuaternion,HAL.Numerics.DualQuaternion)">
      <summary>Dual quaternion addition.</summary>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.op_Subtraction(HAL.Numerics.DualQuaternion,HAL.Numerics.DualQuaternion)">
      <summary>Dual quaternion subtraction.</summary>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.op_Multiply(HAL.Numerics.DualQuaternion,HAL.Numerics.DualQuaternion)">
      <summary>Dual quaternion product.</summary>
    </member>
    <member name="M:HAL.Numerics.DualQuaternion.op_Multiply(HAL.Numerics.DualQuaternion,System.Double)">
      <summary>Dual quaternion product with a scalar.</summary>
    </member>
    <member name="T:HAL.Numerics.HAL_Expression">
      <summary>Marks a class as a mathematical expression.</summary>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.#ctor(HAL.Numerics.HAL_Expression)">
      <summary>Creates a nested expression from a single expression.</summary>
      <param name="baseValue">Base value.</param>
    </member>
    <member name="P:HAL.Numerics.HAL_Expression.Result">
      <summary>The result of the previous evaluation of this expression.</summary>
    </member>
    <member name="P:HAL.Numerics.HAL_Expression.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.Evaluate">
      <summary>Evaluates this expression.</summary>
      <returns>The numeric result of this expression in the relevant units.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.AssignVariableValue(System.String,System.Double)">
      <summary>Assigns a value to a variable within this expression.</summary>
      <param name="symbol">Variable symbol.</param>
      <param name="value">Value to assign.</param>
      <returns>Whether the variable was found and assigned.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.AssignVariableValue(System.String,HAL.Units.IUnitizedValue)">
      <summary>Assigns a value to a variable within this expression.</summary>
      <param name="symbol">Variable symbol.</param>
      <param name="value">Value to assign.</param>
      <returns>Whether the variable was found and assigned.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.Clone">
      <inheritdoc />
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.op_Implicit(System.Double)~HAL.Numerics.HAL_Expression">
      <summary>Implicitly casts a <c>double</c> to a <see cref="T:HAL.Numerics.HAL_Expression" /> by creating a new <see cref="T:HAL.Numerics.HAL_Numeric" /> with the value of the <c>double</c>.</summary>
    </member>
    <member name="E:HAL.Numerics.HAL_Expression.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_Expression.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Numerics.HAL_ExpressionVisitor">
      <summary>Visitor to extract relevant information from an expression and return a complete, evaluable expression.</summary>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>Extracts a bracketed expression from a complex to ensure that it is calculated separately.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>The expression contained within a pair of brackets.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>Extracts an exponential expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>An exponential expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>Extracts a trigonometric expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>Extracts a conditional expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A conditional expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>Creates a conditional expression from a comparator.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A conditional expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>Extracts a multiplication expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A multiplication expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>Extracts a division expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A division expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>Extracts an addition expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>An addition expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>Extracts a subtraction expression from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A subtraction expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>Extracts a measurement from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A unitized value.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>Extracts an atomic expression from syntax and ensures appropriate negation.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>An atomic expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>Extracts a variable from syntax and stores its symbol.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A variable.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>Extracts a numeric constant from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A numeric constant.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>Extracts a square root function from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A square root expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>Extracts the numeric constant pi from syntax.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A numeric constant with the value pi.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>Extracts a trigonometric expression from syntax and sets it as a cosine.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>Extracts a trigonometric expression from syntax and sets it as an arccosine.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>Extracts a trigonometric expression from syntax and sets it as a sine.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>Extracts a trigonometric expression from syntax and sets it as an arcsine.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>Extracts a trigonometric expression from syntax and sets it as a tangent.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionVisitor.VisitAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>Extracts a trigonometric expression from syntax and sets it as an arctangent.</summary>
      <param name="context">The ANTLR context in which this method was called.</param>
      <returns>A trigonometric expression.</returns>
    </member>
    <member name="T:HAL.Numerics.HAL_TrigonometricFunction">
      <summary>Denotes a type of trigonometric expression.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Unset">
      <summary>Unset.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Sin">
      <summary>Sine.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Cos">
      <summary>Cosine.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Tan">
      <summary>Tangent.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Asin">
      <summary>Arcsine.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Acos">
      <summary>Arccosine.</summary>
    </member>
    <member name="F:HAL.Numerics.HAL_TrigonometricFunction.Atan">
      <summary>Arctangent.</summary>
    </member>
    <member name="T:HAL.Numerics.IInterval">
      <summary>Qualifies an interval, as a continuous domain between two bounds.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.T0">
      <summary>Lower bound of the interval.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.T1">
      <summary>Upper bound of the interval.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.Length">
      <summary>Length of the interval.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.Min">
      <summary>Smallest of T0 and T1.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.Mid">
      <summary>Middle of the interval.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.Max">
      <summary>Larger of T0 and T1.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.Sign">
      <summary>Returns the sign of the difference between the end and start bounds.</summary>
    </member>
    <member name="P:HAL.Numerics.IInterval.IsValid">
      <summary>True if the bounds are valid numbers.</summary>
    </member>
    <member name="M:HAL.Numerics.IInterval.Contains(HAL.Units.IUnitizedValue,System.Boolean,System.Boolean)">
      <summary>Evaluates if a parameter is contained by the interval.</summary>
      <param name="t">Parameter to evaluate.</param>
      <param name="strictAtStart">If true, will return false if the parameter is equal to the enter bound.</param>
      <param name="strictAtEnd">If true, will return false if the parameter is equal to the exit bound.</param>
      <returns>True if the parameter is contained.</returns>
    </member>
    <member name="M:HAL.Numerics.IInterval.Contains(HAL.Units.IUnitizedValue,System.Boolean@,System.Boolean@,System.Boolean,System.Boolean)">
      <summary>Evaluates if a parameter is contained by the interval.</summary>
      <param name="t">Parameter to evaluate.</param>
      <param name="testAtStart">Containment test against the interval start.</param>
      <param name="testAtEnd">Containment test against the interval end.</param>
      <param name="strictAtStart">If true, will return false if the parameter is equal to the enter bound.</param>
      <param name="strictAtEnd">If true, will return false if the parameter is equal to the exit bound.</param>
      <returns>True if the parameter is contained.</returns>
    </member>
    <member name="M:HAL.Numerics.IInterval.Clamp(HAL.Units.IUnitizedValue)">
      <summary>Clamps a value to this interval.</summary>
      <param name="value">Value to be tested.</param>
      <returns>Clamped value.</returns>
    </member>
    <member name="T:HAL.Numerics.Matrix">
      <summary>Generic matrix, in column-major order.</summary>
    </member>
    <member name="M:HAL.Numerics.Matrix.#ctor">
      <summary>Creates an empty matrix.</summary>
    </member>
    <member name="M:HAL.Numerics.Matrix.#ctor(System.Int32,System.Int32)">
      <summary>Creates a zeroed matrix.</summary>
      <param name="rows">Number of rows, must be positive.</param>
      <param name="columns">Number of Columns, must be positive.</param>
    </member>
    <member name="M:HAL.Numerics.Matrix.#ctor(System.Int32,System.Int32,System.Double[])">
      <summary>Creates a matrix filled with specified values.</summary>
      <param name="rows">Number of rows, must be positive.</param>
      <param name="columns">Number of Columns, must be positive.</param>
      <param name="filler">Values filling the matrix.</param>
    </member>
    <member name="M:HAL.Numerics.Matrix.#ctor(HAL.Numerics.Matrix)">
      <summary>Creates a matrix from an existing one.</summary>
      <param name="matrix">Existing matrix.</param>
    </member>
    <member name="P:HAL.Numerics.Matrix.Values">
      <summary>Matrix values, as a column-wise array of values.</summary>
    </member>
    <member name="P:HAL.Numerics.Matrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a matrix value at the given [row,column] index.</summary>
      <param name="row">Row index.</param>
      <param name="column">Column index.</param>
      <returns>
      </returns>
    </member>
    <member name="P:HAL.Numerics.Matrix.RowCount">
      <summary>Number of rows of the matrix.</summary>
    </member>
    <member name="P:HAL.Numerics.Matrix.ColumnCount">
      <summary>Number of columns of the matrix.</summary>
    </member>
    <member name="P:HAL.Numerics.Matrix.IsValid">
      <summary>True if the matrix is valid.</summary>
    </member>
    <member name="M:HAL.Numerics.Matrix.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.SetColumn(System.Int32,System.Double[])">
      <summary>Copies given values to a specified column.</summary>
      <param name="columnIndex">Index of the column in which to copy the values.</param>
      <param name="content">New values.</param>
    </member>
    <member name="M:HAL.Numerics.Matrix.SetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32,HAL.Numerics.Matrix)">
      <summary>Sets the values of a subset of this matrix.</summary>
      <param name="rowIndex">Row index from which to start replacing.</param>
      <param name="rowCount">Number of rows to replace.</param>
      <param name="columnIndex">Column index from which to start replacing.</param>
      <param name="columnCount">Number of columns to replace.</param>
      <param name="content">New values.</param>
    </member>
    <member name="M:HAL.Numerics.Matrix.At(System.Int32,System.Int32)">
      <summary>Retrieves a value at a given row and column index.</summary>
      <param name="row">Row index.</param>
      <param name="column">Column index.</param>
      <returns>Value retrieved at the given location.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.ToColumnMajorArray">
      <summary>Returns the matrix as a column-wise array.</summary>
      <returns>Column-wise array.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.ToRowMajorArray">
      <summary>Returns the matrix as a row-wise array.</summary>
      <returns>Row-wise array.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.ToColumnArrays">
      <summary>Returns the matrix as a column array.</summary>
      <returns>Column array.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.ToRowArrays">
      <summary>Returns the matrix as a row array.</summary>
      <returns>Row array.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Diagonal">
      <summary>Returns the elements of the diagonal.</summary>
      <returns>The elements of the diagonal.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.LowerTriangle">
      <summary>Returns a new matrix containing the lower triangle of this matrix.</summary>
      <returns>Lower triangle of this matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.UpperTriangle">
      <summary>Returns a new matrix containing the upper triangle of this matrix.</summary>
      <returns>Upper triangle of this matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.RemoveColumn(System.Int32)">
      <summary>Creates a new matrix with the given column removed.</summary>
      <param name="columnIndex">The index of the row to remove.</param>
      <returns>A new matrix without the chosen column.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.RemoveRow(System.Int32)">
      <summary>Removes a given row from the matrix.</summary>
      <param name="rowIndex">Row index.</param>
      <returns>Culled matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Column(System.Int32)">
      <summary>Copies a column.</summary>
      <param name="index">The column to copy.</param>
      <returns>Vector containing the copied elements.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Gets the values of a subset of this matrix.</summary>
      <param name="rowIndex">Row index from which to start copying.</param>
      <param name="rowCount">Number of rows to copy.</param>
      <param name="columnIndex">Column index from which to start copying.</param>
      <param name="columnCount">Number of columns to copy.</param>
      <returns>Sub-matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Add(HAL.Numerics.Matrix)">
      <summary>Performs an addition between this matrix and a second one.</summary>
      <param name="matrix">Matrix to add.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Add(System.Double)">
      <summary>Performs an addition between this matrix and a scalar.</summary>
      <param name="scalar">Scalar to add.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.ColumnSums">
      <summary>Calculates the value sum of each column vector.</summary>
      <returns>A vector of the sum.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Subtract(HAL.Numerics.Matrix)">
      <summary>Performs a subtraction between this matrix and a second one.</summary>
      <param name="matrix">Matrix to subtract.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Subtract(System.Double)">
      <summary>Performs a subtraction between this matrix and a scalar.</summary>
      <param name="scalar">Scalar to subtract.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Multiply(HAL.Numerics.Matrix)">
      <summary>Performs a multiplication between this matrix and a second one.</summary>
      <param name="matrix">Multiplier.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Multiply(HAL.Numerics.Vector)">
      <summary>Performs a multiplication between this matrix and a vector.</summary>
      <param name="vector">Multiplier.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Multiply(System.Double)">
      <summary>Performs a multiplication between this matrix and a scalar.</summary>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Divide(System.Double)">
      <summary>Performs a division between this matrix and a scalar.</summary>
      <param name="scalar">Divisor.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Svd(System.Boolean)">
      <summary>Singular value decomposition of this matrix.</summary>
      <returns>SVD factorization.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Transpose">
      <summary>Returns the transpose of this matrix.</summary>
      <returns>The transpose of this matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.Inverse">
      <summary>Computes the inverse of this matrix.</summary>
      <returns>The inverse of this matrix.</returns>
    </member>
    <member name="M:HAL.Numerics.Matrix.op_Implicit(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)~HAL.Numerics.Matrix">
      <summary>Converts a Math.NET matrix to a HAL matrix.</summary>
      <param name="matrix">Matrix to convert.</param>
    </member>
    <member name="M:HAL.Numerics.Matrix.op_Implicit(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})~HAL.Numerics.Matrix">
      <summary>Converts a Math.NET matrix to a HAL matrix.</summary>
      <param name="matrix">Matrix to convert.</param>
    </member>
    <member name="M:HAL.Numerics.Matrix.op_Implicit(HAL.Numerics.Matrix)~MathNet.Numerics.LinearAlgebra.Double.DenseMatrix">
      <summary>Converts a HALmatrix to a Math.NET matrix.</summary>
      <param name="matrix">Matrix to convert.</param>
    </member>
    <member name="T:HAL.Numerics.Quaternion">
      <summary>Quaternion.</summary>
    </member>
    <member name="M:HAL.Numerics.Quaternion.DistanceTo(HAL.Numerics.Quaternion@)">
      <summary>Angular distance from this quaternion to a second one.</summary>
      <param name="quaternion">Second quaternion.</param>
      <returns>Total rotation displacement.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.HAL#Spatial#ISpatialObject0D#DistanceTo(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Numerics.Quaternion.ToString">
      <summary>Cast to <see cref="T:System.String" />.</summary>
      <returns>Returns a <see cref="T:System.String" /> representation of this <see cref="T:HAL.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(HAL.Spatial.Vector3D,HAL.Units.Angle.rad)">
      <summary>Creates a rotation <see cref="T:HAL.Numerics.Quaternion" /> from an axis-angle rotation.</summary>
      <param name="angle">Angle of rotation around the axis.</param>
      <param name="axis">Rotation axis.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(HAL.Spatial.Vector3D@,HAL.Units.Angle.rad)">
      <summary>Creates a rotation <see cref="T:HAL.Numerics.Quaternion" /> from an axis-angle rotation.</summary>
      <param name="angle">Angle of rotation around the axis.</param>
      <param name="axis">Rotation axis.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(HAL.Spatial.RotationMatrix)">
      <summary>Creates a rotation <see cref="T:HAL.Numerics.Quaternion" /> from a <see cref="T:HAL.Spatial.RotationMatrix" />.</summary>
      <param name="rotationMatrix">Rotation matrix.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(HAL.Spatial.EulerRotation)">
      <summary>Creates a rotation <see cref="T:HAL.Numerics.Quaternion" /> from a rotation in Euler angles.</summary>
      <param name="eulerRotation">Rotation in Euler angles.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Explicit(HAL.Numerics.Quaternion)~HAL.Spatial.Vector3D">
      <summary>Converts a quaternion to a vector.</summary>
      <param name="quaternion">Quaternion to be converted.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Explicit(HAL.Numerics.Quaternion)~HAL.Spatial.RotationMatrix">
      <summary>Converts a quaternion to a rotation matrix.</summary>
      <param name="quaternion">Quaternion to be converted.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Explicit(HAL.Numerics.Quaternion)~HAL.Spatial.EulerRotation">
      <summary>Converts a quaternion to a Euler rotation.</summary>
      <param name="quaternion">Quaternion to be converted.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(HAL.Numerics.Quaternion@,System.Boolean)">
      <summary>Creates a <see cref="T:HAL.Numerics.Quaternion" /> from an existing one.</summary>
      <param name="quaternion">Existing <see cref="T:HAL.Numerics.Quaternion" />.</param>
      <param name="normalize">Whether this <see cref="T:HAL.Numerics.Quaternion" /> should be normalized.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Creates a <see cref="T:HAL.Numerics.Quaternion" /> from its components.</summary>
      <param name="real">Real part of the <see cref="T:HAL.Numerics.Quaternion" />.</param>
      <param name="x">Imaginary X (coefficient of complex I) part of the <see cref="T:HAL.Numerics.Quaternion" />.</param>
      <param name="y">Imaginary Y (coefficient of complex J) part of the <see cref="T:HAL.Numerics.Quaternion" />.</param>
      <param name="z">Imaginary Z (coefficient of complex K) part of the <see cref="T:HAL.Numerics.Quaternion" />.</param>
      <param name="normalize">Whether this <see cref="T:HAL.Numerics.Quaternion" /> should be normalized.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(System.Double[])">
      <summary>Creates a <see cref="T:HAL.Numerics.Quaternion" /> from its components.</summary>
      <param name="components">Array of four numbers such as [0]: W (Real), [1]: X, [2]: Y, [3]: Z.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.#ctor(HAL.Spatial.Vector3D,System.Boolean)">
      <summary>Creates a position <see cref="T:HAL.Numerics.Quaternion" /> from a position <see cref="T:HAL.Spatial.Vector3D" />.</summary>
      <param name="position">Position <see cref="T:HAL.Spatial.Vector3D" />.</param>
      <param name="normalize">Whether this <see cref="T:HAL.Numerics.Quaternion" /> should be normalized.</param>
    </member>
    <member name="P:HAL.Numerics.Quaternion.Components">
      <summary>Quaternion components, in the Real, X, Y, Z order.</summary>
    </member>
    <member name="F:HAL.Numerics.Quaternion.Real">
      <summary>Real (W) part of the quaternion.</summary>
    </member>
    <member name="F:HAL.Numerics.Quaternion.X">
      <summary>Imaginary X part (coefficient of complex I) of the quaternion.</summary>
    </member>
    <member name="F:HAL.Numerics.Quaternion.Y">
      <summary>Imaginary Y part (coefficient of complex J) of the quaternion.</summary>
    </member>
    <member name="F:HAL.Numerics.Quaternion.Z">
      <summary>Imaginary Z part (coefficient of complex K) of the quaternion.</summary>
    </member>
    <member name="P:HAL.Numerics.Quaternion.Length">
      <summary>Standard euclidean length |quaternion| of the quaternion.</summary>
    </member>
    <member name="P:HAL.Numerics.Quaternion.Norm">
      <summary>Norm ||quaternion|| of the quaternion.</summary>
    </member>
    <member name="P:HAL.Numerics.Quaternion.Phi">
      <summary>Phi of the <see cref="T:HAL.Numerics.Quaternion" />, such as the resulting <see cref="T:HAL.Numerics.Quaternion" /> = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where r is the absolute and u the unit vector of <see cref="T:HAL.Numerics.Quaternion" />.</summary>
    </member>
    <member name="P:HAL.Numerics.Quaternion.IsUnitQuaternion">
      <summary>Whether this <see cref="T:HAL.Numerics.Quaternion" /> is of length |quaternion| = 1.</summary>
    </member>
    <member name="F:HAL.Numerics.Quaternion.Zero">
      <summary>Default zero quaternion, as (0,0,0,0).</summary>
    </member>
    <member name="F:HAL.Numerics.Quaternion.Unit">
      <summary>Default unit quaternion, as (1,0,0,0).</summary>
    </member>
    <member name="P:HAL.Numerics.Quaternion.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="P:HAL.Numerics.Quaternion.IsValid">
      <summary>False if this <see cref="T:HAL.Numerics.Quaternion" /> contains <c>NaN</c> components.</summary>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Equals(HAL.Numerics.Quaternion)">
      <summary>Equality test between two quaternions.</summary>
      <param name="quaternion">Quaternion to test equality with.</param>
      <returns>True if the quaternion components are equal.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Equals(HAL.Numerics.Quaternion,System.Int32)">
      <summary>Equality test between two quaternions.</summary>
      <param name="quaternion">Quaternion to test equality with.</param>
      <param name="precision">Test precision.</param>
      <returns>True if the quaternion components are equal.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.ToUnitQuaternion">
      <summary>Computes a unitized equivalent of this quaternion.</summary>
      <returns>New unitized quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Log(System.Double)">
      <summary>Logarithm to a given base.</summary>
      <param name="base">Base.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Ln">
      <summary>Natural logarithm to base E.</summary>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Exp">
      <summary>Exponential function.</summary>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Conjugate(System.Boolean)">
      <summary>Computes the conjugate of a copy of this <see cref="T:HAL.Numerics.Quaternion" />.</summary>
      <param name="normalize">Whether this <see cref="T:HAL.Numerics.Quaternion" /> should be normalized.</param>
      <returns>New conjugated <see cref="T:HAL.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Inverse">
      <summary>Inverts a copy of this <see cref="T:HAL.Numerics.Quaternion" />.</summary>
      <returns>New inverted <see cref="T:HAL.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Interpolate(HAL.Numerics.Quaternion,System.Double)">
      <summary>Computes the interpolated quaternion at a given abscissa between this and a second quaternion.</summary>
      <param name="quaternion">Target quaternion.</param>
      <param name="abscissa">Interpolation abscissa.</param>
      <returns>Interpolated quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Interpolate(HAL.Numerics.Quaternion@,System.Double)">
      <summary>Computes the interpolated quaternion at a given abscissa between this and a second quaternion.</summary>
      <param name="quaternion">Target quaternion.</param>
      <param name="abscissa">Interpolation abscissa.</param>
      <returns>Interpolated quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Average(HAL.Numerics.Quaternion[])">
      <summary>Averages a series of quaternions.</summary>
      <param name="quaternions">Quaternions.</param>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Negate">
      <summary>Negates this quaternion.</summary>
      <returns>Updated <see cref="T:HAL.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_UnaryNegation(HAL.Numerics.Quaternion@)">
      <summary>Negates this quaternion.</summary>
      <param name="quaternion">Quaternion to negate.</param>
      <returns>Updated <see cref="T:HAL.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Add(HAL.Numerics.Quaternion@,System.Boolean)">
      <summary>Adds a quaternion to this quaternion.</summary>
      <param name="quaternion">Quaternion to be added.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Add(System.Double,System.Boolean)">
      <summary>Adds a scalar to this quaternion.</summary>
      <param name="scalar">Scalar to be added.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Addition(HAL.Numerics.Quaternion@,HAL.Numerics.Quaternion@)">
      <summary>Adds a quaternion to another quaternion.</summary>
      <param name="firstQuaternion">First quaternion to add to.</param>
      <param name="secondQuaternion">Second quaternion to be added.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Addition(HAL.Numerics.Quaternion@,System.Double)">
      <summary>Adds a scalar to a quaternion.</summary>
      <param name="quaternion">Quaternion to add to.</param>
      <param name="scalar">Scalar to be added.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Addition(System.Double,HAL.Numerics.Quaternion@)">
      <summary>Adds a scalar to a quaternion.</summary>
      <param name="scalar">Scalar to be added.</param>
      <param name="quaternion">Quaternion to add to.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Subtract(HAL.Numerics.Quaternion@,System.Boolean)">
      <summary>Subtracts a quaternion from this quaternion.</summary>
      <param name="quaternion">Quaternion to be subtracted.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Subtract(System.Double,System.Boolean)">
      <summary>Subtracts a scalar from this quaternion.</summary>
      <param name="scalar">Scalar to be subtracted.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Subtraction(HAL.Numerics.Quaternion@,HAL.Numerics.Quaternion@)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="firstQuaternion">Quaternion to subtract from.</param>
      <param name="secondQuaternion">Quaternion to subtract.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Subtraction(HAL.Numerics.Quaternion@,System.Double)">
      <summary>Subtracts a scalar from this quaternion.</summary>
      <param name="quaternion">Quaternion to subtract from.</param>
      <param name="scalar">Scalar to be subtracted.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Multiply(HAL.Numerics.Quaternion@,System.Boolean)">
      <summary>Multiplies this quaternion by another.</summary>
      <param name="quaternion">Multiplier.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Multiply(System.Double,System.Boolean)">
      <summary>Multiplies this quaternion by a scalar.</summary>
      <param name="scalar">Multiplier.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Multiply(HAL.Numerics.Quaternion@,HAL.Numerics.Quaternion@)">
      <summary>Multiplies a quaternion by another one.</summary>
      <param name="firstQuaternion">Multiplied.</param>
      <param name="secondQuaternion">Multiplier.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Multiply(HAL.Numerics.Quaternion@,System.Double)">
      <summary>Multiplies a quaternion by a scalar.</summary>
      <param name="quaternion">Multiplied.</param>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Multiply(System.Double,HAL.Numerics.Quaternion@)">
      <summary>Multiplies a quaternion by a scalar.</summary>
      <param name="quaternion">Multiplied.</param>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.DotProduct(HAL.Numerics.Quaternion@)">
      <summary>Computes the dot product of this quaternion and a second one.</summary>
      <param name="quaternion">Second quaternion.</param>
      <returns>Dot product.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Divide(HAL.Numerics.Quaternion@,System.Boolean)">
      <summary>Multiplies a Quaternion with the inverse of another quaternion (quaternion*quaternion<sup>-1</sup>).</summary>
      <remarks>Note that for quaternions quaternion*quaternion<sup>-1</sup> is not the same then quaternion<sup>-1</sup>*quaternion, because this will lead to a rotation in the other direction.</remarks>
      <param name="quaternion">Divisor.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Divide(System.Double,System.Boolean)">
      <summary>Multiplies a Quaternion with the inverse of a scalar.</summary>
      <param name="scalar">Divisor.</param>
      <param name="normalize">If true, normalizes the resulting quaternion.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Division(HAL.Numerics.Quaternion@,HAL.Numerics.Quaternion@)">
      <summary>Multiplies a Quaternion with the inverse of another quaternion (quaternion*quaternion<sup>-1</sup>).</summary>
      <remarks>Note that for quaternions quaternion*quaternion<sup>-1</sup> is not the same then quaternion<sup>-1</sup>*quaternion, because this will lead to a rotation in the other direction.</remarks>
      <param name="firstQuaternion">Divided.</param>
      <param name="secondQuaternion">Divisor.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_Division(HAL.Numerics.Quaternion@,System.Double)">
      <summary>Multiplies a Quaternion with the inverse of a scalar.</summary>
      <param name="quaternion">Divided.</param>
      <param name="scalar">Divisor.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Power(System.Double)">
      <summary>Raises this quaternion to a given power.</summary>
      <param name="power">Power.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.Power(HAL.Numerics.Quaternion@)">
      <summary>Raises this quaternion to a given power.</summary>
      <param name="power">Power.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_ExclusiveOr(HAL.Numerics.Quaternion@,System.Double)">
      <summary>Raises this quaternion to a given power.</summary>
      <param name="quaternion">Quaternion to raise.</param>
      <param name="power">Power.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="M:HAL.Numerics.Quaternion.op_ExclusiveOr(HAL.Numerics.Quaternion@,HAL.Numerics.Quaternion@)">
      <summary>Raises this quaternion to a given power.</summary>
      <param name="firstQuaternion">Quaternion to raise.</param>
      <param name="secondQuaternion">Power.</param>
      <returns>Resulting quaternion.</returns>
    </member>
    <member name="T:HAL.Numerics.Vector">
      <summary>Column vector.</summary>
    </member>
    <member name="M:HAL.Numerics.Vector.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Implicit(MathNet.Numerics.LinearAlgebra.Vector{System.Double})~HAL.Numerics.Vector">
      <summary>Converts a Math.NET vector to a HAL vector.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Implicit(MathNet.Numerics.LinearAlgebra.Double.DenseVector)~HAL.Numerics.Vector">
      <summary>Converts a Math.NET vector to a HAL vector.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Implicit(HAL.Numerics.Vector)~MathNet.Numerics.LinearAlgebra.Double.DenseVector">
      <summary>Converts a HAL vector to a Math.NET vector.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="P:HAL.Numerics.Vector.Default">
      <summary>Creates a default vector of size 1.</summary>
    </member>
    <member name="M:HAL.Numerics.Vector.#ctor(System.Int32)">
      <summary>Creates a vector of a specified dimension.</summary>
      <param name="dimension">Vector dimension.</param>
    </member>
    <member name="M:HAL.Numerics.Vector.#ctor(System.Double[])">
      <summary>Creates a vector from existing vector values.</summary>
      <param name="values">Vector values.</param>
    </member>
    <member name="P:HAL.Numerics.Vector.Values">
      <summary>Vector components.</summary>
    </member>
    <member name="P:HAL.Numerics.Vector.IsValid">
      <summary>True if the object is valid.</summary>
    </member>
    <member name="P:HAL.Numerics.Vector.ManhattanNorm">
      <summary>Manhattan (L1) norm.</summary>
    </member>
    <member name="P:HAL.Numerics.Vector.EuclideanNorm">
      <summary>Euclidean (L2) norm.</summary>
    </member>
    <member name="P:HAL.Numerics.Vector.Count">
      <summary>Number of components (dimension) of this vector.</summary>
    </member>
    <member name="P:HAL.Numerics.Vector.Item(System.Int32)">
      <summary>Retrieves a vector component at a given index.</summary>
      <param name="i">Index.</param>
      <returns>Corresponding component.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.At(System.Int32)">
      <summary>Retrieves a value at a given index.</summary>
      <param name="index">Index of the value to be retrieved.</param>
      <returns>Retrieved value.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Norm(System.Double)">
      <summary>Computes the p-norm of the vector.</summary>
      <param name="p">p argument.</param>
      <returns>P-norm of the vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Normalize(System.Double)">
      <summary>Normalizes this vector to a unit vector with respect to a given norm.</summary>
      <param name="norm">Norm.</param>
      <returns>Normalized vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Negate">
      <summary>Negates this vector.</summary>
      <returns>Negated vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_UnaryNegation(HAL.Numerics.Vector)">
      <summary>Negates a vector.</summary>
      <param name="vector">Vector to negate.</param>
      <returns>Negated vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Add(HAL.Numerics.Vector)">
      <summary>Creates a new vector from the addition of this vector and a given second vector.</summary>
      <param name="vector">Vector to be added.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Add(System.Double)">
      <summary>Creates a new vector from the addition of this vector and a given scalar.</summary>
      <param name="scalar">Scalar to be added.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Addition(HAL.Numerics.Vector,HAL.Numerics.Vector)">
      <summary>Creates a new vector from the addition of two vectors.</summary>
      <param name="firstVector">First vector to add.</param>
      <param name="secondVector">Second vector to add.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Addition(HAL.Numerics.Vector,System.Double)">
      <summary>Creates a new vector from the addition of a vector and a scalar.</summary>
      <param name="vector">Vector to add.</param>
      <param name="scalar">Scalar to add.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Addition(System.Double,HAL.Numerics.Vector)">
      <summary>Creates a new vector from the addition of a vector and a scalar.</summary>
      <param name="vector">Vector to add.</param>
      <param name="scalar">Scalar to add.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Subtract(HAL.Numerics.Vector)">
      <summary>Creates a new vector from the subtraction of this vector and a given second vector.</summary>
      <param name="vector">Vector to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Subtract(System.Double)">
      <summary>Creates a new vector from the subtraction of this vector and a given scalar.</summary>
      <param name="scalar">Scalar to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Subtraction(HAL.Numerics.Vector,HAL.Numerics.Vector)">
      <summary>Creates a new vector from the subtraction of two vectors.</summary>
      <param name="firstVector">Vector to subtract from.</param>
      <param name="secondVector">Vector to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Subtraction(HAL.Numerics.Vector,System.Double)">
      <summary>Creates a new vector from the subtraction of a scalar from a vector.</summary>
      <param name="firstVector">Vector to subtract from.</param>
      <param name="scalar">Scalar to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.DotProduct(HAL.Numerics.Vector)">
      <summary>Computes the dot product of this vector and a second one.</summary>
      <param name="vector">Second vector.</param>
      <returns>Dot product.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Multiply(System.Double)">
      <summary>Creates a new vector from the multiplication of this vector and a given scalar.</summary>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Multiply(HAL.Numerics.Vector,System.Double)">
      <summary>Creates a new vector from the multiplication of a vector and a scalar.</summary>
      <param name="vector">Vector to multiply.</param>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Multiply(System.Double,HAL.Numerics.Vector)">
      <summary>Creates a new vector from the multiplication of a vector and a scalar.</summary>
      <param name="scalar">Multiplier.</param>
      <param name="vector">Vector to multiply.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.Divide(System.Double)">
      <summary>Creates a new vector from the division of this vector and a given scalar.</summary>
      <param name="scalar">Divisor.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Numerics.Vector.op_Division(HAL.Numerics.Vector,System.Double)">
      <summary>Creates a new vector from the division of a vector by a scalar.</summary>
      <param name="vector">Vector to multiply.</param>
      <param name="scalar">Divisor.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="T:HAL.Numerics.IHAL_ExpressionGrammarListener">
      <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:HAL.Numerics.HAL_ExpressionGrammarParser" />.
            </summary>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterEqual(HAL.Numerics.HAL_ExpressionGrammarParser.EqualContext)">
      <summary>
            Enter a parse tree produced by the <c>Equal</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitEqual(HAL.Numerics.HAL_ExpressionGrammarParser.EqualContext)">
      <summary>
            Exit a parse tree produced by the <c>Equal</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterNotEqual(HAL.Numerics.HAL_ExpressionGrammarParser.NotEqualContext)">
      <summary>
            Enter a parse tree produced by the <c>NotEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitNotEqual(HAL.Numerics.HAL_ExpressionGrammarParser.NotEqualContext)">
      <summary>
            Exit a parse tree produced by the <c>NotEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterLessThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanOrEqualContext)">
      <summary>
            Enter a parse tree produced by the <c>LessThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitLessThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanOrEqualContext)">
      <summary>
            Exit a parse tree produced by the <c>LessThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterGreaterThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanOrEqualContext)">
      <summary>
            Enter a parse tree produced by the <c>GreaterThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitGreaterThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanOrEqualContext)">
      <summary>
            Exit a parse tree produced by the <c>GreaterThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterLessThan(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanContext)">
      <summary>
            Enter a parse tree produced by the <c>LessThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitLessThan(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanContext)">
      <summary>
            Exit a parse tree produced by the <c>LessThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterGreaterThan(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanContext)">
      <summary>
            Enter a parse tree produced by the <c>GreaterThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitGreaterThan(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanContext)">
      <summary>
            Exit a parse tree produced by the <c>GreaterThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterCompleteStatement(HAL.Numerics.HAL_ExpressionGrammarParser.CompleteStatementContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.completeStatement" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitCompleteStatement(HAL.Numerics.HAL_ExpressionGrammarParser.CompleteStatementContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.completeStatement" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterExpression(HAL.Numerics.HAL_ExpressionGrammarParser.ExpressionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.expression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitExpression(HAL.Numerics.HAL_ExpressionGrammarParser.ExpressionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.expression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.conditional" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.conditional" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparison" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparison" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.bracketed" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.bracketed" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterContained(HAL.Numerics.HAL_ExpressionGrammarParser.ContainedContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.contained" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitContained(HAL.Numerics.HAL_ExpressionGrammarParser.ContainedContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.contained" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponential" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponential" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterExponentialInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitExponentialInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterExponentialInput(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitExponentialInput(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functional" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functional" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multiplication" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multiplication" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterMultInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitMultInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterMultInput(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitMultInput(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.division" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.division" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterDivInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitDivInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterDivInput(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitDivInput(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterSumExpression(HAL.Numerics.HAL_ExpressionGrammarParser.SumExpressionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sumExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitSumExpression(HAL.Numerics.HAL_ExpressionGrammarParser.SumExpressionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sumExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addition" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addition" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subtraction" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subtraction" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAddInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAddInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAddInput(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAddInput(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterSubInput(HAL.Numerics.HAL_ExpressionGrammarParser.SubInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitSubInput(HAL.Numerics.HAL_ExpressionGrammarParser.SubInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subInput" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.measurement" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.measurement" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atomic" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atomic" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterComparator(HAL.Numerics.HAL_ExpressionGrammarParser.ComparatorContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitComparator(HAL.Numerics.HAL_ExpressionGrammarParser.ComparatorContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterConstant(HAL.Numerics.HAL_ExpressionGrammarParser.ConstantContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.constant" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitConstant(HAL.Numerics.HAL_ExpressionGrammarParser.ConstantContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.constant" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.variable" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.variable" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.num" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.num" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterDec(HAL.Numerics.HAL_ExpressionGrammarParser.DecContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.dec" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitDec(HAL.Numerics.HAL_ExpressionGrammarParser.DecContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.dec" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterWhole(HAL.Numerics.HAL_ExpressionGrammarParser.WholeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitWhole(HAL.Numerics.HAL_ExpressionGrammarParser.WholeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.pi" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.pi" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterFunctionKW(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionKWContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functionKW" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitFunctionKW(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionKWContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functionKW" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sqrt" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sqrt" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sin" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sin" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.asin" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.asin" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.cos" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.cos" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.acos" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.acos" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.tan" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.tan" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atan" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atan" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.EnterId(HAL.Numerics.HAL_ExpressionGrammarParser.IdContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.id" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarListener.ExitId(HAL.Numerics.HAL_ExpressionGrammarParser.IdContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.id" />.
            </summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="T:HAL.Numerics.HAL_ExpressionGrammarBaseListener">
      <summary>
            This class provides an empty implementation of <see cref="T:HAL.Numerics.IHAL_ExpressionGrammarListener" />,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterEqual(HAL.Numerics.HAL_ExpressionGrammarParser.EqualContext)">
      <summary>
            Enter a parse tree produced by the <c>Equal</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitEqual(HAL.Numerics.HAL_ExpressionGrammarParser.EqualContext)">
      <summary>
            Exit a parse tree produced by the <c>Equal</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterNotEqual(HAL.Numerics.HAL_ExpressionGrammarParser.NotEqualContext)">
      <summary>
            Enter a parse tree produced by the <c>NotEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitNotEqual(HAL.Numerics.HAL_ExpressionGrammarParser.NotEqualContext)">
      <summary>
            Exit a parse tree produced by the <c>NotEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterLessThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanOrEqualContext)">
      <summary>
            Enter a parse tree produced by the <c>LessThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitLessThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanOrEqualContext)">
      <summary>
            Exit a parse tree produced by the <c>LessThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterGreaterThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanOrEqualContext)">
      <summary>
            Enter a parse tree produced by the <c>GreaterThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitGreaterThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanOrEqualContext)">
      <summary>
            Exit a parse tree produced by the <c>GreaterThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterLessThan(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanContext)">
      <summary>
            Enter a parse tree produced by the <c>LessThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitLessThan(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanContext)">
      <summary>
            Exit a parse tree produced by the <c>LessThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterGreaterThan(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanContext)">
      <summary>
            Enter a parse tree produced by the <c>GreaterThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitGreaterThan(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanContext)">
      <summary>
            Exit a parse tree produced by the <c>GreaterThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterCompleteStatement(HAL.Numerics.HAL_ExpressionGrammarParser.CompleteStatementContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.completeStatement" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitCompleteStatement(HAL.Numerics.HAL_ExpressionGrammarParser.CompleteStatementContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.completeStatement" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterExpression(HAL.Numerics.HAL_ExpressionGrammarParser.ExpressionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.expression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitExpression(HAL.Numerics.HAL_ExpressionGrammarParser.ExpressionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.expression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.conditional" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.conditional" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparison" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparison" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.bracketed" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.bracketed" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterContained(HAL.Numerics.HAL_ExpressionGrammarParser.ContainedContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.contained" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitContained(HAL.Numerics.HAL_ExpressionGrammarParser.ContainedContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.contained" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponential" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponential" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterExponentialInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitExponentialInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterExponentialInput(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitExponentialInput(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functional" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functional" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multiplication" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multiplication" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterMultInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitMultInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterMultInput(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitMultInput(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.division" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.division" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterDivInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitDivInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterDivInput(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitDivInput(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterSumExpression(HAL.Numerics.HAL_ExpressionGrammarParser.SumExpressionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sumExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitSumExpression(HAL.Numerics.HAL_ExpressionGrammarParser.SumExpressionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sumExpression" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addition" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addition" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subtraction" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subtraction" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAddInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputRecurContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAddInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputRecurContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInputRecur" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAddInput(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAddInput(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterSubInput(HAL.Numerics.HAL_ExpressionGrammarParser.SubInputContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitSubInput(HAL.Numerics.HAL_ExpressionGrammarParser.SubInputContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subInput" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.measurement" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.measurement" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atomic" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atomic" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterComparator(HAL.Numerics.HAL_ExpressionGrammarParser.ComparatorContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitComparator(HAL.Numerics.HAL_ExpressionGrammarParser.ComparatorContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterConstant(HAL.Numerics.HAL_ExpressionGrammarParser.ConstantContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.constant" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitConstant(HAL.Numerics.HAL_ExpressionGrammarParser.ConstantContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.constant" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.variable" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.variable" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.num" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.num" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterDec(HAL.Numerics.HAL_ExpressionGrammarParser.DecContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.dec" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitDec(HAL.Numerics.HAL_ExpressionGrammarParser.DecContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.dec" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterWhole(HAL.Numerics.HAL_ExpressionGrammarParser.WholeContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.whole" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitWhole(HAL.Numerics.HAL_ExpressionGrammarParser.WholeContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.whole" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.pi" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.pi" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterFunctionKW(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionKWContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functionKW" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitFunctionKW(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionKWContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functionKW" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sqrt" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sqrt" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sin" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sin" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.asin" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.asin" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.cos" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.cos" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.acos" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.acos" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.tan" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.tan" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atan" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atan" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterId(HAL.Numerics.HAL_ExpressionGrammarParser.IdContext)">
      <summary>
            Enter a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.id" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitId(HAL.Numerics.HAL_ExpressionGrammarParser.IdContext)">
      <summary>
            Exit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.id" />.
            <para>The default implementation does nothing.</para></summary>
      <param name="context">The parse tree.</param>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
      <inheritdoc />
      <remarks>The default implementation does nothing.</remarks>
    </member>
    <member name="T:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1">
      <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:HAL.Numerics.HAL_ExpressionGrammarParser" />.
            </summary>
      <typeparam name="Result">The return type of the visit operation.</typeparam>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitEqual(HAL.Numerics.HAL_ExpressionGrammarParser.EqualContext)">
      <summary>
            Visit a parse tree produced by the <c>Equal</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitNotEqual(HAL.Numerics.HAL_ExpressionGrammarParser.NotEqualContext)">
      <summary>
            Visit a parse tree produced by the <c>NotEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitLessThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanOrEqualContext)">
      <summary>
            Visit a parse tree produced by the <c>LessThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitGreaterThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanOrEqualContext)">
      <summary>
            Visit a parse tree produced by the <c>GreaterThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitLessThan(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanContext)">
      <summary>
            Visit a parse tree produced by the <c>LessThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitGreaterThan(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanContext)">
      <summary>
            Visit a parse tree produced by the <c>GreaterThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitCompleteStatement(HAL.Numerics.HAL_ExpressionGrammarParser.CompleteStatementContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.completeStatement" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitExpression(HAL.Numerics.HAL_ExpressionGrammarParser.ExpressionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.expression" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.conditional" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparison" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.bracketed" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitContained(HAL.Numerics.HAL_ExpressionGrammarParser.ContainedContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.contained" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponential" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitExponentialInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitExponentialInput(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInput" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functional" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multiplication" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitMultInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitMultInput(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInput" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.division" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitDivInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitDivInput(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInput" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitSumExpression(HAL.Numerics.HAL_ExpressionGrammarParser.SumExpressionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sumExpression" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addition" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subtraction" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAddInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInputRecur" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAddInput(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInput" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitSubInput(HAL.Numerics.HAL_ExpressionGrammarParser.SubInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subInput" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.measurement" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atomic" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitComparator(HAL.Numerics.HAL_ExpressionGrammarParser.ComparatorContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitConstant(HAL.Numerics.HAL_ExpressionGrammarParser.ConstantContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.constant" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.variable" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.num" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitDec(HAL.Numerics.HAL_ExpressionGrammarParser.DecContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.dec" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitWhole(HAL.Numerics.HAL_ExpressionGrammarParser.WholeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.whole" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.pi" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitFunctionKW(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionKWContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functionKW" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sqrt" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sin" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.asin" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.cos" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.acos" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.tan" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atan" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1.VisitId(HAL.Numerics.HAL_ExpressionGrammarParser.IdContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.id" />.
            </summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="T:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1">
      <summary>
            This class provides an empty implementation of <see cref="T:HAL.Numerics.IHAL_ExpressionGrammarVisitor`1" />,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
      <typeparam name="Result">The return type of the visit operation.</typeparam>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitEqual(HAL.Numerics.HAL_ExpressionGrammarParser.EqualContext)">
      <summary>
            Visit a parse tree produced by the <c>Equal</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitNotEqual(HAL.Numerics.HAL_ExpressionGrammarParser.NotEqualContext)">
      <summary>
            Visit a parse tree produced by the <c>NotEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitLessThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanOrEqualContext)">
      <summary>
            Visit a parse tree produced by the <c>LessThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitGreaterThanOrEqual(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanOrEqualContext)">
      <summary>
            Visit a parse tree produced by the <c>GreaterThanOrEqual</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitLessThan(HAL.Numerics.HAL_ExpressionGrammarParser.LessThanContext)">
      <summary>
            Visit a parse tree produced by the <c>LessThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitGreaterThan(HAL.Numerics.HAL_ExpressionGrammarParser.GreaterThanContext)">
      <summary>
            Visit a parse tree produced by the <c>GreaterThan</c>
            labeled alternative in <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitCompleteStatement(HAL.Numerics.HAL_ExpressionGrammarParser.CompleteStatementContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.completeStatement" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitExpression(HAL.Numerics.HAL_ExpressionGrammarParser.ExpressionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.expression" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitConditional(HAL.Numerics.HAL_ExpressionGrammarParser.ConditionalContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.conditional" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitComparison(HAL.Numerics.HAL_ExpressionGrammarParser.ComparisonContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparison" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitBracketed(HAL.Numerics.HAL_ExpressionGrammarParser.BracketedContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.bracketed" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitContained(HAL.Numerics.HAL_ExpressionGrammarParser.ContainedContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.contained" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitExponential(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponential" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitExponentialInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInputRecur" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitExponentialInput(HAL.Numerics.HAL_ExpressionGrammarParser.ExponentialInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.exponentialInput" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitFunctional(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionalContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functional" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitMultiplication(HAL.Numerics.HAL_ExpressionGrammarParser.MultiplicationContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multiplication" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitMultInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInputRecur" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitMultInput(HAL.Numerics.HAL_ExpressionGrammarParser.MultInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.multInput" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitDivision(HAL.Numerics.HAL_ExpressionGrammarParser.DivisionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.division" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitDivInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInputRecur" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitDivInput(HAL.Numerics.HAL_ExpressionGrammarParser.DivInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.divInput" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitSumExpression(HAL.Numerics.HAL_ExpressionGrammarParser.SumExpressionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sumExpression" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAddition(HAL.Numerics.HAL_ExpressionGrammarParser.AdditionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addition" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitSubtraction(HAL.Numerics.HAL_ExpressionGrammarParser.SubtractionContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subtraction" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAddInputRecur(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputRecurContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInputRecur" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAddInput(HAL.Numerics.HAL_ExpressionGrammarParser.AddInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.addInput" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitSubInput(HAL.Numerics.HAL_ExpressionGrammarParser.SubInputContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.subInput" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitMeasurement(HAL.Numerics.HAL_ExpressionGrammarParser.MeasurementContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.measurement" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAtomic(HAL.Numerics.HAL_ExpressionGrammarParser.AtomicContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atomic" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitComparator(HAL.Numerics.HAL_ExpressionGrammarParser.ComparatorContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.comparator" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitConstant(HAL.Numerics.HAL_ExpressionGrammarParser.ConstantContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.constant" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitVariable(HAL.Numerics.HAL_ExpressionGrammarParser.VariableContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.variable" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitNum(HAL.Numerics.HAL_ExpressionGrammarParser.NumContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.num" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitDec(HAL.Numerics.HAL_ExpressionGrammarParser.DecContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.dec" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitWhole(HAL.Numerics.HAL_ExpressionGrammarParser.WholeContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.whole" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitPi(HAL.Numerics.HAL_ExpressionGrammarParser.PiContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.pi" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitFunctionKW(HAL.Numerics.HAL_ExpressionGrammarParser.FunctionKWContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.functionKW" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitSqrt(HAL.Numerics.HAL_ExpressionGrammarParser.SqrtContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sqrt" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitSin(HAL.Numerics.HAL_ExpressionGrammarParser.SinContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.sin" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAsin(HAL.Numerics.HAL_ExpressionGrammarParser.AsinContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.asin" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitCos(HAL.Numerics.HAL_ExpressionGrammarParser.CosContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.cos" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAcos(HAL.Numerics.HAL_ExpressionGrammarParser.AcosContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.acos" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitTan(HAL.Numerics.HAL_ExpressionGrammarParser.TanContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.tan" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitAtan(HAL.Numerics.HAL_ExpressionGrammarParser.AtanContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.atan" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="M:HAL.Numerics.HAL_ExpressionGrammarBaseVisitor`1.VisitId(HAL.Numerics.HAL_ExpressionGrammarParser.IdContext)">
      <summary>
            Visit a parse tree produced by <see cref="M:HAL.Numerics.HAL_ExpressionGrammarParser.id" />.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)" />
            on <paramref name="context" />.
            </para></summary>
      <param name="context">The parse tree.</param>
      <return>The visitor result.</return>
    </member>
    <member name="T:HAL.Objects.Connection">
      <summary>Fixed connection between two <see cref="T:HAL.Objects.IObjectGraphVertex" />s.</summary>
    </member>
    <member name="M:HAL.Objects.Connection.Create(HAL.Objects.Connection@,System.String,HAL.Objects.Reference,HAL.Objects.Reference,HAL.Spatial.MatrixFrame,System.Boolean,HAL.Objects.Connection@)">
      <summary>Creates a fixed connection from specified properties.</summary>
      <param name="instance">Existing instance of the connection.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part. If null, a placeholder will be created in position.</param>
      <param name="frame">Connection frame.</param>
      <param name="isEndpoint">Whether this connection should be considered the end of an object, like a flange.</param>
      <param name="connection">Fixed joint.</param>
    </member>
    <member name="M:HAL.Objects.Connection.GetProperties(HAL.Objects.Connection,HAL.Objects.ObjectGraph,HAL.Objects.IObjectGraphVertex@,HAL.Objects.IObjectGraphVertex@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,System.Boolean@,System.Boolean@,System.Boolean@)">
      <summary>Retrieves the properties of a connection.</summary>
      <param name="connection">Connection to retrieve properties from.</param>
      <param name="objectGraph">Object graph in which to perform the analysis. Default = session object graph.</param>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="locationOnSource">Location relative to the source vertex.</param>
      <param name="locationOnTarget">Location relative to the target vertex.</param>
      <param name="targetLocationInParent">Target part location relative to the source vertex.</param>
      <param name="isDefaultRootConnection">Whether this edge is a default edge attached to the root.</param>
      <param name="isSocket">Whether this joint is a socket.</param>
      <param name="isEndpoint">Whether this joint is an end point.</param>
    </member>
    <member name="E:HAL.Objects.Connection.Replaced">
      <summary>Raised when this edge is replaced.</summary>
    </member>
    <member name="M:HAL.Objects.Connection.NotifyReplacement(HAL.Objects.IObjectGraphEdge)">
      <summary>Notifies subscribers that this edge was replaced.</summary>
      <param name="replacing">Replacing edge.</param>
    </member>
    <member name="M:HAL.Objects.Connection.#ctor(HAL.Objects.Reference,HAL.Objects.IObjectGraphVertex,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,HAL.Identifier,System.Boolean,System.Boolean)">
      <summary>Creates a <see cref="T:HAL.Objects.Connection" />.</summary>
      <param name="source">Source.</param>
      <param name="target">Target.</param>
      <param name="locationOnSource">Location of this connection relative to its source.</param>
      <param name="locationOnTarget">Location of this connection relative to its target.</param>
      <param name="identifier">Connection identity.</param>
      <param name="endPoint">Whether this connection should be considered a potential end point i.e. flange, TCP etc.</param>
      <param name="socket">Whether this connection should be considered a permanent socket and therefore retained when a target object is disconnected.</param>
    </member>
    <member name="P:HAL.Objects.Connection.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.Source">
      <summary>Source vertex.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.Target">
      <summary>Target vertex.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.LocationOnSource">
      <summary>Location of this connection relative to its source.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.LocationOnTarget">
      <summary>Location of this connection relative to its target.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.TargetLocationInParent">
      <summary>Location of this connection's target relative to its parent.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.DualLocationOnSource">
      <summary>Location of this connection relative to its source.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.DualLocationOnTarget">
      <summary>Location of this connection relative to its target.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.DualTargetLocationInParent">
      <summary>Location of this connection's target relative to its parent.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.Ordinal">
      <summary>Index defining the position of this connection in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.IsDefaultRootConnection">
      <summary>Whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.IsEndPoint">
      <summary>Whether this connection should be considered a potential end point i.e. flange, TCP etc.</summary>
    </member>
    <member name="P:HAL.Objects.Connection.IsSocket">
      <summary>Whether this connection should be considered a permanent socket and therefore retained when a target object is disconnected.</summary>
    </member>
    <member name="M:HAL.Objects.Connection.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.Connection.ExpireCache">
      <summary>Expires this object location cache.</summary>
    </member>
    <member name="M:HAL.Objects.Connection.CloneEdge">
      <summary>Clones this <see cref="T:HAL.Objects.Connection" />.</summary>
      <returns>Cloned connection.</returns>
    </member>
    <member name="M:HAL.Objects.Connection.CloneEdgeTo(HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex,System.Boolean)">
      <summary>Creates a new <see cref="T:HAL.Objects.IObjectGraphEdge" /> with the same properties as the original but a new source and target.</summary>
      <param name="source">Source.</param>
      <param name="target">Target.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>Cloned <see cref="T:HAL.Objects.IObjectGraphEdge" /> between specified source and target vertices.</returns>
    </member>
    <member name="M:HAL.Objects.Connection.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Objects.Connection.Equals(HAL.Objects.IObjectGraphEdge)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Objects.Connection.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Objects.Connection.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Objects.ICached">
      <summary>Qualifies an object with a cache.</summary>
    </member>
    <member name="M:HAL.Objects.ICached.ExpireCache">
      <summary>Expires this object cache.</summary>
    </member>
    <member name="T:HAL.Objects.ILocatable">
      <summary>Qualifies an object that can be located in a <see cref="T:HAL.Objects.ObjectGraph" />.</summary>
    </member>
    <member name="M:HAL.Objects.ILocatable.LocationWithRespectTo(HAL.Objects.Reference,HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified reference.</summary>
      <param name="reference">Reference.</param>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the reference.</returns>
    </member>
    <member name="M:HAL.Objects.ILocatable.LocationInWorld(System.Boolean)">
      <summary>Retrieves the location of this object relative to the current <see cref="T:HAL.Runtime.Session">session</see>'s <see cref="T:HAL.Objects.ObjectGraph">graph.</see></summary>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
    </member>
    <member name="M:HAL.Objects.ILocatable.LocationIn(HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified graph root.</summary>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the graph root.</returns>
    </member>
    <member name="T:HAL.Objects.IObjectGraphEdge">
      <summary>Qualifies a connection between two <see cref="T:HAL.Objects.IObjectGraphVertex">vertices</see>.</summary>
    </member>
    <member name="E:HAL.Objects.IObjectGraphEdge.Replaced">
      <summary>Raised when this edge is replaced.</summary>
    </member>
    <member name="M:HAL.Objects.IObjectGraphEdge.NotifyReplacement(HAL.Objects.IObjectGraphEdge)">
      <summary>Notifies subscribers that this edge was replaced.</summary>
      <param name="replacing">Replacing edge.</param>
    </member>
    <member name="P:HAL.Objects.IObjectGraphEdge.LocationOnSource">
      <summary>Location of this connection relative to its source.</summary>
    </member>
    <member name="P:HAL.Objects.IObjectGraphEdge.LocationOnTarget">
      <summary>Location of this connection relative to its target.</summary>
    </member>
    <member name="P:HAL.Objects.IObjectGraphEdge.TargetLocationInParent">
      <summary>Location of this connection's target relative to its parent.</summary>
    </member>
    <member name="P:HAL.Objects.IObjectGraphEdge.DualLocationOnSource">
      <summary>Location of this connection relative to its source.</summary>
    </member>
    <member name="P:HAL.Objects.IObjectGraphEdge.DualLocationOnTarget">
      <summary>Location of this connection relative to its target.</summary>
    </member>
    <member name="P:HAL.Objects.IObjectGraphEdge.DualTargetLocationInParent">
      <summary>Location of this connection's target relative to its parent.</summary>
    </member>
    <member name="T:HAL.Objects.IObjectGraphEntity">
      <summary>Qualifies an object participating in one or multiple <see cref="T:HAL.Objects.ObjectGraph" />s.</summary>
    </member>
    <member name="T:HAL.Objects.IObjectGraphVertex">
      <summary>Qualifies a object participating in one ore multiple <see cref="T:HAL.Objects.ObjectGraph" />s.</summary>
    </member>
    <member name="T:HAL.Objects.IState">
      <summary>Qualifies the state of an object.</summary>
    </member>
    <member name="P:HAL.Objects.IState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Objects.IState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="M:HAL.Objects.IState.TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="T:HAL.Objects.IState`1">
      <summary>Qualifies the state of a typed object.</summary>
      <typeparam name="T">Type of object.</typeparam>
    </member>
    <member name="P:HAL.Objects.IState`1.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="M:HAL.Objects.IState`1.TryAssign(`0)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="P:HAL.Objects.IState`1.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="T:HAL.Objects.Joint">
      <summary>Mechanical joint.</summary>
    </member>
    <member name="M:HAL.Objects.Joint.Revolute(HAL.Objects.Joint@,System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Speed.AngularSpeed,HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Torque.Torque,System.Int32,HAL.Objects.Joint@)">
      <summary>Creates a revolute joint between two parts.</summary>
      <param name="instance">Existing instance of this joint.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="frame">Actuated joint frame, at the position given. The Z axis of this frame is the rotation axis of the joint.</param>
      <param name="position">Current joint position.</param>
      <param name="minPosition">Minimum joint position.</param>
      <param name="maxPosition">Maximum joint position.</param>
      <param name="maxSpeed">Maximum joint speed.</param>
      <param name="maxAcceleration">Maximum joint acceleration.</param>
      <param name="maxTorque">Maximum joint torque.</param>
      <param name="mapping">Index override of this joint within its host mechanism.</param>
      <param name="joint">Revolute joint.</param>
    </member>
    <member name="M:HAL.Objects.Joint.Revolute(HAL.Objects.Joint@,System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Speed.AngularSpeed,HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Torque.Torque,HAL.Objects.Joint,HAL.Units.Angle.Angle,System.Int32,HAL.Objects.Joint@)">
      <summary>Creates a revolute joint between two parts.</summary>
      <param name="instance">Existing instance of this joint.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="frame">Actuated joint frame, at the position given. The Z axis of this frame is the rotation axis of the joint.</param>
      <param name="position">Current joint position.</param>
      <param name="minPosition">Minimum joint position.</param>
      <param name="maxPosition">Maximum joint position.</param>
      <param name="maxSpeed">Maximum joint speed.</param>
      <param name="maxAcceleration">Maximum joint acceleration.</param>
      <param name="maxTorque">Maximum joint torque.</param>
      <param name="driver">Driver joint.</param>
      <param name="driverOffset">Driver joint offset.</param>
      <param name="mapping">Index override of this joint within its host mechanism.</param>
      <param name="joint">Revolute joint.</param>
    </member>
    <member name="M:HAL.Objects.Joint.Revolute(HAL.Objects.Joint@,System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Objects.Joint@)">
      <summary>Creates a passive revolute joint between two parts.</summary>
      <param name="instance">Existing instance of this joint.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="frame">Actuated joint frame, at the position given. The Z axis of this frame is the rotation axis of the joint.</param>
      <param name="position">Current joint position.</param>
      <param name="minPosition">Minimum joint position.</param>
      <param name="maxPosition">Maximum joint position.</param>
      <param name="joint">Passive revolute joint.</param>
    </member>
    <member name="M:HAL.Objects.Joint.Prismatic(HAL.Objects.Joint@,System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Speed.LinearSpeed,HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Torque.Torque,System.Int32,HAL.Objects.Joint@)">
      <summary>Creates a prismatic joint between two parts.</summary>
      <param name="instance">Existing instance of this joint.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="frame">Actuated joint frame, at the position given. The Z axis of this frame is the rotation axis of the joint.</param>
      <param name="position">Current joint position.</param>
      <param name="minPosition">Minimum joint position.</param>
      <param name="maxPosition">Maximum joint position.</param>
      <param name="maxSpeed">Maximum joint speed.</param>
      <param name="maxAcceleration">Maximum joint acceleration.</param>
      <param name="maxTorque">Maximum joint torque.</param>
      <param name="mapping">Index override of this joint within its host mechanism.</param>
      <param name="joint">Prismatic joint.</param>
    </member>
    <member name="M:HAL.Objects.Joint.Prismatic(HAL.Objects.Joint@,System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Speed.LinearSpeed,HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Torque.Torque,HAL.Objects.Joint,HAL.Units.Length.Length,System.Int32,HAL.Objects.Joint@)">
      <summary>Creates a prismatic joint between two parts.</summary>
      <param name="instance">Existing instance of this joint.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="frame">Actuated joint frame, at the position given. The Z axis of this frame is the rotation axis of the joint.</param>
      <param name="position">Current joint position.</param>
      <param name="minPosition">Minimum joint position.</param>
      <param name="maxPosition">Maximum joint position.</param>
      <param name="maxSpeed">Maximum joint speed.</param>
      <param name="maxAcceleration">Maximum joint acceleration.</param>
      <param name="maxTorque">Maximum joint torque.</param>
      <param name="driver">Driver joint.</param>
      <param name="driverOffset">Driver joint offset.</param>
      <param name="mapping">Index override of this joint within its host mechanism.</param>
      <param name="joint">Prismatic joint.</param>
    </member>
    <member name="M:HAL.Objects.Joint.Prismatic(HAL.Objects.Joint@,System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Objects.Joint@)">
      <summary>Creates a passive prismatic joint between two parts.</summary>
      <param name="instance">Existing instance of this joint.</param>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="frame">Actuated joint frame, at the position given. The Z axis of this frame is the rotation axis of the joint.</param>
      <param name="position">Current joint position.</param>
      <param name="minPosition">Minimum joint position.</param>
      <param name="maxPosition">Maximum joint position.</param>
      <param name="joint">Passive prismatic joint.</param>
    </member>
    <member name="M:HAL.Objects.Joint.GetProperties(HAL.Objects.Joint,HAL.Objects.ObjectGraph,HAL.Objects.Parts.Part@,HAL.Objects.Parts.Part@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,System.Boolean@,HAL.Objects.JointType@,HAL.Units.IJointPosition@,HAL.Units.IJointSpeed@,HAL.Units.IJointAcceleration@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@)">
      <summary>Retrieves the properties of a specified joint.</summary>
      <param name="joint">Joint to retrieve properties from.</param>
      <param name="objectGraph">Object graph in which to perform the analysis. Default = session object graph.</param>
      <param name="source">Source (parent) part.</param>
      <param name="target">Target (child) part.</param>
      <param name="locationOnSource">Location relative to the source part.</param>
      <param name="locationOnTarget">Location relative to the target part.</param>
      <param name="targetLocationInParent">Target part location relative to the source part.</param>
      <param name="isDefaultRootConnection">Whether this joint is a default joint attached to the root.</param>
      <param name="type">Joint type.</param>
      <param name="position">Joint position.</param>
      <param name="speed">Joint speed.</param>
      <param name="acceleration">Joint acceleration.</param>
      <param name="neutralTargetLocationInParent">
      </param>
      <param name="actuatedFrame">Joint frame at its current position.</param>
    </member>
    <member name="E:HAL.Objects.Joint.Replaced">
      <summary>Raised when this edge is replaced.</summary>
    </member>
    <member name="M:HAL.Objects.Joint.NotifyReplacement(HAL.Objects.IObjectGraphEdge)">
      <summary>Notifies subscribers that this edge was replaced.</summary>
      <param name="replacing">Replacing edge.</param>
    </member>
    <member name="M:HAL.Objects.Joint.#ctor(HAL.Identifier,HAL.Objects.JointType,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.IJointPosition,HAL.Units.IJointSpeed,HAL.Units.IJointAcceleration,HAL.Units.Torque.Torque,HAL.Objects.Joint,HAL.Units.IJointPosition,System.Int32,HAL.Extensibility.HAL_PropertyManager)">
      <summary>Creates a new active <see cref="T:HAL.Objects.Joint" />.</summary>
      <param name="identity">Identity.</param>
      <param name="type">Type.</param>
      <param name="position">Position.</param>
      <param name="speed">Speed.</param>
      <param name="acceleration">Acceleration.</param>
      <param name="torque">Torque</param>
      <param name="source">Source part.</param>
      <param name="locationOnSource">Location relative to the source part.</param>
      <param name="target">Target part.</param>
      <param name="locationOnTarget">Location relative to the target part.</param>
      <param name="driver">Driver joint.</param>
      <param name="driverOffset">Driver offset.</param>
      <param name="mapping">Index override of this joint within its host mechanism.</param>
      <param name="properties">Additional properties to give this object.</param>
    </member>
    <member name="M:HAL.Objects.Joint.#ctor(HAL.Identifier,HAL.Objects.JointType,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Units.IJointPosition,HAL.Objects.Joint,HAL.Units.IJointPosition,System.Int32,HAL.Extensibility.HAL_PropertyManager)">
      <summary>Creates a new passive <see cref="T:HAL.Objects.Joint" />.</summary>
      <param name="identity">Identity.</param>
      <param name="type">Type.</param>
      <param name="position">Position.</param>
      <param name="source">Source part.</param>
      <param name="locationOnSource">Location relative to the source part.</param>
      <param name="target">Target part.</param>
      <param name="locationOnTarget">Location relative to the target part.</param>
      <param name="driver">Driver joint.</param>
      <param name="driverOffset">Driver offset.</param>
      <param name="mapping">Index override of this joint within its host mechanism.</param>
      <param name="properties">Additional properties to give this object.</param>
    </member>
    <member name="P:HAL.Objects.Joint.Source">
      <summary>Source vertex.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Target">
      <summary>Target vertex.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Controller">
      <summary>Controller of this object.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.ActuatedFrame">
      <summary>Joint frame in position.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Type">
      <summary>Type of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.IsPassive">
      <summary>Passive joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Position">
      <summary>Gets or sets the position of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Speed">
      <summary>Speed of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Acceleration">
      <summary>Acceleration of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Torque">
      <summary>Torque of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.LocationOnSource">
      <summary>Location of this connection relative to its source.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.LocationOnTarget">
      <summary>Location of this connection relative to its target.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.TargetLocationInParent">
      <summary>The location of the target relative to its parent object.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.NeutralTargetLocationInParent">
      <summary>The location of the target relative to its parent object.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.DualLocationOnSource">
      <summary>Location of this connection relative to its source.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.DualLocationOnTarget">
      <summary>Location of this connection relative to its target.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.DualTargetLocationInParent">
      <summary>Location of this connection's target relative to its parent.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Ordinal">
      <summary>Index defining the position of this connection in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.IsDefaultRootConnection">
      <summary>Whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Driver">
      <summary>Driver joint.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.DriverOffset">
      <summary>Driver joint offset.</summary>
    </member>
    <member name="P:HAL.Objects.Joint.Mapping">
      <summary>Zero-based index of this joint in its host mechanism, -1 if the kinematic order is to be maintained.</summary>
      <remarks>If one or more joints in a mechanism has a mapping &gt; 0 then all joints must.</remarks>
    </member>
    <member name="M:HAL.Objects.Joint.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.Joint.Actuate(HAL.Units.IJointPosition,System.Boolean,System.Boolean)">
      <summary>Actuates a joint to reach the specified position.</summary>
      <param name="position">Desired position.</param>
      <param name="override">Whether the new position should be stored as the current joint position.</param>
      <param name="clamp">Whether the position should be clamped before being applied.</param>
      <returns>Actuated joint frame.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.Actuate(System.Double,System.Boolean,System.Boolean)">
      <summary>Actuates a joint to reach the specified position.</summary>
      <param name="position">Desired position.</param>
      <param name="override">Whether the new position should be stored as the current joint position.</param>
      <param name="clamp">Whether the position should be clamped before being applied.</param>
      <returns>Actuated joint frame.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.ActuateDual(HAL.Units.IJointPosition,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Actuates a joint to reach the specified position.</summary>
      <param name="position">Desired position.</param>
      <param name="override">Whether the new position should be stored as the current joint position. Requires that <see param="derivative" /> is false.</param>
      <param name="derivative">Whether the derivative joint frame should be returned instead of the joint frame.</param>
      <param name="clamp">Whether the position should be clamped before being applied.</param>
      <returns>Actuated joint frame.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.ActuateDual(System.Double,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Actuates a joint to reach the specified position.</summary>
      <param name="position">Desired position.</param>
      <param name="override">Whether the new position should be stored as the current joint position. Requires that <see param="derivative" /> is false.</param>
      <param name="derivative">Whether the derivative joint frame should be returned instead of the joint frame.</param>
      <param name="clamp">Whether the position should be clamped before being applied.</param>
      <returns>Actuated joint frame.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.LocationWithRespectTo(HAL.Objects.Reference,HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified reference.</summary>
      <param name="reference">Reference.</param>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the reference.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.LocationInWorld(System.Boolean)">
      <summary>Retrieves the location of this object relative to the current <see cref="T:HAL.Runtime.Session">session</see>'s <see cref="T:HAL.Objects.ObjectGraph">graph.</see></summary>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
    </member>
    <member name="M:HAL.Objects.Joint.LocationIn(HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified graph root.</summary>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the graph root.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.ExpireCache">
      <summary>Expires this object location cache.</summary>
    </member>
    <member name="M:HAL.Objects.Joint.CloneEdge">
      <summary>Clones this <see cref="T:HAL.Objects.Joint" />.</summary>
      <returns>Cloned connection.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.CloneEdgeTo(HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex,System.Boolean)">
      <summary>Creates a new <see cref="T:HAL.Objects.IObjectGraphEdge" /> with the same properties as the original but a new source and target.</summary>
      <param name="source">Source.</param>
      <param name="target">Target.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>Cloned <see cref="T:HAL.Objects.IObjectGraphEdge" /> between specified source and target vertices.</returns>
    </member>
    <member name="M:HAL.Objects.Joint.Equals(HAL.Objects.IObjectGraphEdge)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:HAL.Objects.JointState">
      <summary>Qualifies the state of a joint.</summary>
    </member>
    <member name="M:HAL.Objects.JointState.GetProperties(HAL.Objects.JointState,System.String@,System.String@,System.String@,HAL.Alerts.Alert[]@)">
      <summary>Retrieves properties from a joint state.</summary>
      <param name="state">State to extract properties from.</param>
      <param name="position">Joint position.</param>
      <param name="velocity">Joint velocity.</param>
      <param name="acceleration">Joint acceleration.</param>
      <param name="notification">Notifications related to this state.</param>
    </member>
    <member name="M:HAL.Objects.JointState.#ctor(HAL.Units.IJointPosition,HAL.Units.IJointSpeed,HAL.Units.IJointAcceleration,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Creates a joint state snapshot.</summary>
      <param name="position">Joint position.</param>
      <param name="velocity">Joint velocity.</param>
      <param name="acceleration">Joint acceleration.</param>
      <param name="notifications">Notifications associated with this state.</param>
      <param name="date">Date of the snapshot. Current UTC time will be retrieved if null.</param>
    </member>
    <member name="M:HAL.Objects.JointState.#ctor(HAL.Objects.Joint,HAL.Units.IJointPosition,HAL.Units.IJointSpeed,HAL.Units.IJointAcceleration,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Creates a state snapshot for the specified joint.</summary>
      <param name="joint">Joint to analyze.</param>
      <param name="position">Joint position override.</param>
      <param name="velocity">Joint speed override.</param>
      <param name="acceleration">Joint acceleration override.</param>
      <param name="notifications">Notifications associated with this state.</param>
      <param name="date">Date of the snapshot. Current UTC time will be retrieved if null.</param>
    </member>
    <member name="P:HAL.Objects.JointState.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.Position">
      <summary>Position of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.Velocity">
      <summary>Velocity of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.Acceleration">
      <summary>Acceleration of the joint.</summary>
    </member>
    <member name="P:HAL.Objects.JointState.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="M:HAL.Objects.JointState.TryAssign(HAL.Objects.Joint)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Objects.JointState.HAL#Objects#IState#TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Objects.JointState.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Objects.JointState.Equals(HAL.Objects.JointState)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Objects.JointState.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Objects.JointState.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Objects.JointState.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="T:HAL.Objects.JointType">
      <summary>Enumerates joint types supported by HAL.</summary>
    </member>
    <member name="F:HAL.Objects.JointType.Helical">
      <summary>Generic helical (screw) joint.</summary>
    </member>
    <member name="F:HAL.Objects.JointType.Prismatic">
      <summary>Generic prismatic (slide) joint.</summary>
    </member>
    <member name="F:HAL.Objects.JointType.Revolute">
      <summary>Generic revolute (hinge) joint.</summary>
    </member>
    <member name="F:HAL.Objects.JointType.Fixed">
      <summary>Generic fixed (no DOF) joint.</summary>
    </member>
    <member name="T:HAL.Objects.JointTypeDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Objects.JointTypeDescriptions.Description(HAL.Objects.JointType)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Objects.Mechanisms.IMechanismState">
      <summary>Qualifies the state of a mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.IMechanismState.Tool">
      <summary>State of end effector.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.IMechanismState.Joints">
      <summary>State of each joint.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.IMechanismState.MotionSpace">
      <summary>Space of current motion.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Mechanism">
      <summary>Mechanism.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Create(HAL.Objects.Mechanisms.Mechanism@,System.String,System.Collections.Generic.List{HAL.Objects.IObjectGraphEntity},HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Assembles a mechanism from components.</summary>
      <param name="instance">Existing instance of this mechanism.</param>
      <param name="alias">Mechanism alias.</param>
      <param name="component">Components of the mechanism, starting from the base part.</param>
      <param name="mechanism">Mechanism.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Assemble(HAL.Objects.Mechanisms.Mechanism@,System.String,System.Collections.Generic.List{HAL.Objects.Mechanisms.Mechanism},HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Creates a composite mechanism from two or more mechanisms.</summary>
      <param name="instance">Instance.</param>
      <param name="alias">Alias.</param>
      <param name="toAssemble">Mechanisms to assemble.</param>
      <param name="mechanism">Composite mechanism.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Assemble(HAL.Objects.Mechanisms.Mechanism@,System.String,HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{HAL.Objects.Connection},System.Collections.Generic.List{HAL.Objects.Mechanisms.Mechanism},HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Creates a composite mechanism from two or more mechanisms.</summary>
      <param name="instance">Instance.</param>
      <param name="alias">Alias.</param>
      <param name="trunk">Trunk mechanism.</param>
      <param name="connection">Trunk connections to which branch mechanisms should be attached.</param>
      <param name="branch">Branch mechanisms.</param>
      <param name="mechanism">Composite mechanism.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Disassemble(HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Parts.Part@,System.Collections.Generic.List{HAL.Objects.Parts.Part}@,System.Collections.Generic.List{HAL.Objects.Joint}@,System.Collections.Generic.List{HAL.Objects.Connection}@,HAL.Objects.Connection@,HAL.Objects.Mechanisms.Mechanism@,System.Collections.Generic.List{HAL.Objects.Mechanisms.Mechanism}@,System.Collections.Generic.List{HAL.Graphs.Persistence}@)">
      <summary>Retrieves the components of a mechanism.</summary>
      <param name="mechanism">Mechanism to disassemble.</param>
      <param name="base">Base part.</param>
      <param name="part">Mechanical parts.</param>
      <param name="joint">Mechanical joints.</param>
      <param name="connection">Connections.</param>
      <param name="activeEndpoint">Active end point.</param>
      <param name="endEffector">End effector.</param>
      <param name="subMechanism">Sub-mechanisms.</param>
      <param name="persistence">Persistence of each sub-mechanism.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.PlaceRobot(HAL.Objects.Mechanisms.Mechanism@,System.String,HAL.Spatial.MatrixFrame,System.Double[],System.Int32[],HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Places a robot in the document.</summary>
      <param name="instance">Existing instance of this robot.</param>
      <param name="alias">Robot alias.</param>
      <param name="location">Location relative to the document reference coordinate system.</param>
      <param name="position">Initial mechanism position.</param>
      <param name="mapping">Index of each joint of this mechanism to ensure correct order in the controller.</param>
      <param name="robot">Robot.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.PlacePositioner(HAL.Objects.Mechanisms.Mechanism@,System.String,HAL.Spatial.MatrixFrame,System.Double[],System.Int32[],HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Places a positioner in the document.</summary>
      <param name="instance">Existing instance of this positioner.</param>
      <param name="alias">Positioner alias.</param>
      <param name="location">Location relative to the document reference coordinate system.</param>
      <param name="position">Initial mechanism position.</param>
      <param name="mapping">Index of each joint of this mechanism to ensure correct order in the controller.</param>
      <param name="positioner">Positioner.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Relocate(HAL.Objects.Mechanisms.Mechanism,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Modifies the location of a mechanism.</summary>
      <param name="instance">Mechanism to relocate.</param>
      <param name="location">Location relative to the document reference coordinate system.</param>
      <param name="mechanism">Updated mechanism.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Clone(HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Mechanisms.Mechanism@)">
      <summary>Clones a mechanism.</summary>
      <param name="instance">Mechanism instance to clone.</param>
      <param name="mechanism">Clone.</param>
    </member>
    <member name="F:HAL.Objects.Mechanisms.Mechanism._activeEndPoint">
      <summary>Active end point backing field.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.#ctor(HAL.Identifier)">
      <summary>Creates a new, empty <see cref="T:HAL.Objects.Mechanisms.Mechanism" />.</summary>
      <param name="identity">Identity.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.#ctor(HAL.Identifier,HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new mechanism from the specified components.</summary>
      <param name="identity">Mechanism identity.</param>
      <param name="components">Components.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.#ctor(HAL.Identifier,System.Int32[],HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new mechanism from the specified components.</summary>
      <param name="identity">Mechanism identity.</param>
      <param name="activeJointIndices">Mapping index for each joint.</param>
      <param name="components">Components.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.#ctor(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Mechanism" /> from an existing one.</summary>
      <param name="clonee">Cloned <see cref="T:HAL.Objects.Mechanisms.Mechanism" />.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.Segments">
      <summary>Segments of this mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.Joints">
      <summary>Joints of this mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.ActiveJoints">
      <summary>Active joints of this mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.MappedJoints">
      <summary>Joints of this mechanism ordered by their mapping indices.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.Connections">
      <summary>Connections of this mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.OrderedEdges">
      <summary>Edges ordered from base to end.</summary>
      <remarks>Order may be ambiguous when forks appear.</remarks>
    </member>
    <member name="F:HAL.Objects.Mechanisms.Mechanism._orderedEdges">
      <summary>Internal cache of Edges ordered from base to end.</summary>
      <remarks>Order may be ambiguous when forks appear.</remarks>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.SubMechanisms">
      <summary>Subsets of this mechanism to be considered separately, i.e: positioner, active tool, etc.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.SubMechanismCollectionSurrogate">
      <summary>Subsets of this mechanism to be considered separately, i.e: positioner, active tool, etc.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.IsRuntimeAssembly">
      <summary>Whether this mechanism was assembled at runtime.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.Base">
      <summary>Base of the mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.EndEffector">
      <summary>The end effector associated with this mechanism, if any.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.EndEffectorActiveEndPoint">
      <summary>Active end point of the end effector. Should the end effector be a mechanism itself, will recursively return the end effector's end effector.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.ActiveEndPoint">
      <summary>The end point on this object that should be used in kinematic calculations.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.Flange">
      <summary>Manipulator end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.DegreesOfFreedom">
      <summary>Degrees of freedom of this mechanism.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.InitialJointPositions">
      <summary>Initial joint positions.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.Controller">
      <summary>Controller of this object.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.JointMapping">
      <summary>Dictates the order of the joints of this mechanism according to their controller mapping order.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Mechanism.IsMappingValid">
      <summary>Whether joints are all mapped to different channels.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.ApplyJointMapping(System.Int32[])">
      <summary>Maps each of the joints of this mechanism to its given index.</summary>
      <param name="activeJointIndices">Indices for each joint in order. If null, the order of joints in the kinematic chain will be used.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.OrderEdges">
      <summary>Orders edge cache from base to end.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.OrderCaches">
      <summary>Orders edge caches from base to end.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.GetCurrentPosition(System.Boolean,System.Boolean)">
      <summary>Returns the current position of the mechanism.</summary>
      <param name="jointPosition">If true, retrieves the joint positions.</param>
      <param name="cartesianPosition">If true, retrieves the active endpoint position.</param>
      <returns>Current position in joint and/or Cartesian spaces.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.GetActiveEndPointLocation(System.Boolean)">
      <summary>Retrieves the tip frame of the end effector associated with this mechanism, relative to its base.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Jog(HAL.Motion.JointPositions,HAL.Kinematics.KinematicGraph)">
      <summary>Jogs the mechanism to the specified joint positions.</summary>
      <param name="position">Joint positions to reach.</param>
      <param name="kinematicGraph">Kinematic graph for solving passive joints.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Clone">
      <summary>Clones this mechanism.</summary>
      <returns>Cloned mechanism.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Clone(System.Boolean)">
      <summary>Clones this mechanism.</summary>
      <param name="retainGuid">Whether to retain the GUID or refresh the identity.</param>
      <returns>Cloned mechanism.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.CloneWithoutContent(System.Boolean)">
      <summary>Clones this mechanism without any edges or vertices.</summary>
      <remarks>Primarily used internally during recursive cloning of submechanisms to ensure metadata isn't lost.</remarks>
      <returns>Empty cloned mechanism.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Clone(System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphEdge}@,System.Collections.Generic.Dictionary{HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Mechanisms.Mechanism}@,System.Boolean,System.Nullable{HAL.Spatial.RepresentationLevel})">
      <summary>Clones this mechanism.</summary>
      <param name="vertices">Dictionary of vertices in the form [original, cloned].</param>
      <param name="edges">Dictionary of edges in the form [original, cloned].</param>
      <param name="subMechanisms">Dictionary of subMechanisms in the form [original, cloned].</param>
      <param name="retainGuid">Whether to retain the GUID or refresh the identity.</param>
      <param name="maximumFidelity">Highest fidelity representation of part geometries to maintain.</param>
      <returns>Cloned mechanism.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Clone(System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphEdge}@,System.Collections.Generic.Dictionary{HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Mechanisms.Mechanism}@,System.Boolean)">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Mechanism" /> from an existing one and its cloned components.</summary>
      <param name="vertices">Cloned vertices.</param>
      <param name="edges">Cloned edges.</param>
      <param name="subMechanisms">Sub-mechanisms.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh the identity.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemapJoints(System.Collections.Generic.Dictionary{HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphEdge},System.Collections.Generic.Dictionary{HAL.Objects.Joint,System.Int32})">
      <summary>Recreates the joint mapping for a mechanism based on the map of original-&gt;new edges and the original mapping.</summary>
      <param name="edgeMap">Edge map of the form [original, new].</param>
      <param name="originalMapping">Joint mapping to replicate.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.HAL#ICloneable{HAL#Catalog#ICataloguable}#Clone">
      <summary>Clones this mechanism.</summary>
      <returns>Cloned mechanism.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.AddSubMechanism(HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Connection@,HAL.Graphs.Persistence,System.Boolean,HAL.Spatial.MatrixFrame,System.Boolean)">
      <summary>Adds a mechanism to this one.</summary>
      <param name="mechanism">The mechanism to add.</param>
      <param name="added">New connection added between the two mechanisms.</param>
      <param name="persistence">Persistence to assign to this mechanical addition.</param>
      <param name="connectToActiveEndPoint">If <c>true</c> this effector will be connected to the active end point of this mechanism.</param>
      <param name="locationOnActiveEndpoint">The location of the mechanism to be added relative to the current mechanism active endpoint.</param>
      <param name="updateActiveEndpoint">If <c>true</c>, sets the active endpoint to the active end point of the added mechanism.</param>
      <returns>Whether the addition was successful. Will return false if the sub mechanism was already added to this mechanism.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.SetActiveEndPoint(HAL.Objects.Connection,System.Boolean)">
      <summary>Sets the active endpoint of this mechanism.</summary>
      <param name="value">New endpoint.</param>
      <param name="updateEndEffector">Whether the mechanism end effector should be updated (true) or removed.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemoveSubMechanism(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Removes a sub-mechanism from this mechanism.</summary>
      <param name="mechanism">The sub-mechanism to remove.</param>
      <returns>Whether the mechanism was found and the removal was successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.ResetAllSimulatedContent">
      <summary>Removes simulated sub-mechanisms.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.ResetSimulatedSubMechanism(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Resets the specified simulated sub-mechanism state.</summary>
      <param name="mechanism">Mechanism to be reset to its original state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.Disassemble">
      <summary>Disassembles this mechanism.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.EnsureEndPoint">
      <summary>Attempts to specify the active endpoint of this mechanism.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.SetEndEffector(HAL.Objects.Mechanisms.Mechanism,HAL.Graphs.Persistence,System.Boolean)">
      <summary>Changes the end effector of this mechanism to the given end effector.</summary>
      <param name="effector">New end effector.</param>
      <param name="persistence">Assembly persistence.</param>
      <param name="connectToActiveEndPoint">Whether this effector should be connected to the active end point of this mechanism.</param>
      <returns>Whether the end effector change was successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemoveEndEffector">
      <summary>Removes the end effector of this mechanism.</summary>
      <returns>Whether the removal was successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.AddVertex(HAL.Objects.IObjectGraphVertex)">
      <summary>Adds the specified vertex to the graph.</summary>
      <param name="vertex">Vertex to be added.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemoveVertex(HAL.Objects.IObjectGraphVertex)">
      <summary>Removes the specified vertex from the graph.</summary>
      <param name="vertex">Vertex to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemoveVertex(HAL.Objects.IObjectGraphVertex,System.Boolean)">
      <summary>Removes the specified vertex from the graph.</summary>
      <param name="vertex">Vertex to be removed.</param>
      <param name="removeFromSession">Whether the vertex should also be remove from the session.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.AddEdge(HAL.Objects.IObjectGraphEdge)">
      <summary>Adds the a specified edge to the graph.</summary>
      <param name="edge">The edge to be added to the graph.</param>
      <returns>Whether the edge was successfully added.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemoveEdge(HAL.Objects.IObjectGraphEdge)">
      <summary>Removes the specified edge from the graph.</summary>
      <param name="edge">Edge to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.RemoveEdge(HAL.Objects.IObjectGraphEdge,System.Boolean)">
      <summary>Removes the specified edge from the graph.</summary>
      <param name="edge">Edge to be removed.</param>
      <param name="removeFromSession">Whether the edge should be removed from the session.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Mechanism.ExpireCache">
      <summary>Expires this object location cache.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.MechanismMorphology">
      <summary>Enumerates supported mechanism morphologies.</summary>
    </member>
    <member name="F:HAL.Objects.Mechanisms.MechanismMorphology.Unknown">
      <summary>Unknown mechanism morphology.</summary>
    </member>
    <member name="F:HAL.Objects.Mechanisms.MechanismMorphology.Serial">
      <summary>Serial (open kinematic chain) mechanism.</summary>
    </member>
    <member name="F:HAL.Objects.Mechanisms.MechanismMorphology.Parallel">
      <summary>Parallel (closed kinematic chain) mechanism. </summary>
    </member>
    <member name="F:HAL.Objects.Mechanisms.MechanismMorphology.Hybrid">
      <summary>Hybrid mechanism.</summary>
    </member>
    <member name="F:HAL.Objects.Mechanisms.MechanismMorphology.Tree">
      <summary>Tree (set of open kinematic chains) mechanism.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer">
      <summary>Mechanism Morphology Analyzer.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.#ctor(HAL.Kinematics.KinematicGraph)">
      <summary>MechanismMorphologyAnalyzer constructor.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.Morphology">
      <summary>Mechanism morphology.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.GroupMorphology">
      <summary>Mechanism group morphology.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.PositionerType">
      <summary>Positioner type.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.VirtualMainChainMechanisms">
      <summary>Virtual main chain mechanisms.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.VirtualSubMechanisms">
      <summary>Virtual sub mechanisms.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismMorphologyAnalyzer.VirtualLoopChainMechanisms">
      <summary>Virtual loop chain mechanisms.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.MechanismState">
      <summary>Stores the state of a mechanism.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.GetProperties(HAL.Objects.Mechanisms.IMechanismState,HAL.Objects.Mechanisms.Tools.IToolState@,HAL.Objects.JointState[]@,HAL.Alerts.Alert[]@)">
      <summary>Retrieves properties from a mechanism state.</summary>
      <param name="state">State to extract properties from.</param>
      <param name="tool">State of the mechanism tool.</param>
      <param name="joint">State of the mechanism joints.</param>
      <param name="notification">Notifications related to this state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.#ctor">
      <summary>Empty constructor for serialization or overrides only.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.#ctor(HAL.Objects.Mechanisms.Mechanism,System.Boolean,System.Boolean,System.Nullable{HAL.Motion.Settings.MotionSpace},System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Stores the state of a mechanism.</summary>
      <param name="mechanism">Mechanism .</param>
      <param name="includeJoints">Whether to include the state of the joints in this snapshot.</param>
      <param name="includeEndEffector">Whether to include the state of the end effector in this snapshot.</param>
      <param name="space">Space of current motion.</param>
      <param name="notifications">Current notifications.</param>
      <param name="date">Time of state creation.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.#ctor(HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.IEnumerable{HAL.Objects.JointState},HAL.Objects.Mechanisms.Tools.IToolState,System.Nullable{HAL.Motion.Settings.MotionSpace},System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Stores the state of a mechanism.</summary>
      <param name="mechanism">Mechanism .</param>
      <param name="jointOverrides">Overridden states for each joint..</param>
      <param name="endEffectorOverride">Overridden state of end effector.</param>
      <param name="space">Space of current motion.</param>
      <param name="notifications">Current notifications.</param>
      <param name="date">Time of state creation.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.Tool">
      <summary>State of end effector.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.Joints">
      <summary>State of each joint.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.MotionSpace">
      <summary>Space of current motion.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.MechanismState.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.TryAssign(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.TryAssign(HAL.Objects.Mechanisms.Mechanism,HAL.Kinematics.KinematicGraph)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
      <param name="kinematicGraph">Kinematic graph for the mechanism.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.HAL#Objects#IState#TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.MechanismState.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Objects.Mechanisms.SubMechanismCollectionSurrogate">
      <summary>Stores subsets of a mechanism to be considered separately, i.e: positioner, active tool, etc.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.SubMechanismCollectionSurrogate.#ctor">
      <summary>Creates and empty collection.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.SubMechanismCollectionSurrogate.#ctor(System.Collections.Generic.Dictionary{HAL.Objects.Mechanisms.Mechanism,HAL.Graphs.Persistence})">
      <summary>Initializes a new instance that contains elements copied from the specified dictionary.</summary>
      <param name="clonee">Collection whose items should be copied.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.SubMechanismCollectionSurrogate.Mechanisms">
      <summary>Mechanisms.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.SubMechanismCollectionSurrogate.Persistence">
      <summary>Mechanism persistence.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper">
      <summary>Fingered gripper.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.#ctor(HAL.Identifier,HAL.Spatial.MatrixFrame,System.Collections.Generic.IEnumerable{HAL.Objects.IObjectGraphEntity},System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{HAL.Objects.IObjectGraphEntity}[])">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper" />.</summary>
      <param name="identity">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper" /> identity.</param>
      <param name="tcp">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper" /> operation frame, relative to its base.</param>
      <param name="body">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper" /> components, starting from its base.</param>
      <param name="hasSingleMotor">Whether the gripper fingers are all actuated by the same motor.</param>
      <param name="areFingersSynchronous">Whether the gripper fingers are moving synchronously.</param>
      <param name="fingers">Gripper fingers.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.Fingers">
      <summary>Gripper fingers.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.HasSingleMotor">
      <summary>Whether the gripper fingers are all actuated by the same motor.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.AreFingersSynchronous">
      <summary>Whether the gripper fingers are moving synchronously.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.AddFinger(System.Collections.Generic.IEnumerable{HAL.Objects.IObjectGraphEntity})">
      <summary>Adds a finger to this gripper.</summary>
      <param name="components">Finger components.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.GetGraspingTargets(HAL.Objects.Parts.Part)">
      <summary>Computes target positions for each finger in order to grasp the specified part.</summary>
      <param name="part">Part to be taken.</param>
      <returns>Finger targets.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper.GetReleaseTargets(HAL.Objects.Parts.Part)">
      <summary>Computes target positions for each finger in order to release the specified part.</summary>
      <param name="part">Part to be released.</param>
      <returns>Finger targets.</returns>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.Grasping.Gripper">
      <summary>Base gripping tool implementation.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.Create(HAL.Objects.Mechanisms.Tools.Grasping.Gripper@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},System.Collections.Generic.List{HAL.Display.Styles.MeshDisplayStyle},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Tools.Grasping.Gripper@)">
      <summary>Creates a generic gripper.</summary>
      <param name="instance">Existing instance of this tool.</param>
      <param name="alias">Tool alias.</param>
      <param name="frame">Body frame expressed in the world coordinate system.</param>
      <param name="body">Tool body.</param>
      <param name="color">Tool body display material.</param>
      <param name="toolFrame">Tool frame (TCP), as the "processing" frame of the tool.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="tool">Gripper.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.CreateParallelGripper(HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper@,System.String,System.Collections.Generic.List{HAL.Objects.IObjectGraphEntity},System.Collections.Generic.List{HAL.Objects.IObjectGraphEntity},System.Collections.Generic.List{HAL.Objects.IObjectGraphEntity},HAL.Spatial.MatrixFrame,HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper@)">
      <summary>Creates a parallel gripper.</summary>
      <param name="instance">Existing instance of this gripper.</param>
      <param name="alias">Gripper alias.</param>
      <param name="components">Gripper components.</param>
      <param name="leftFinger">Left finger.</param>
      <param name="rightFinger">Right finger.</param>
      <param name="tcp">Gripper frame (TCP), as the "grasping" frame of the tool.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="tool">Gripper.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.Create(HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},System.Collections.Generic.List{HAL.Display.Styles.MeshDisplayStyle},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper@)">
      <summary>Creates a vacuum gripper.</summary>
      <param name="instance">Existing instance of this tool.</param>
      <param name="alias">Tool alias.</param>
      <param name="frame">Body frame expressed in the world coordinate system.</param>
      <param name="body">Tool body.</param>
      <param name="color">Tool body display material.</param>
      <param name="toolFrame">Tool frame (TCP), as the "processing" frame of the tool.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="tool">Gripper.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.#ctor(HAL.Identifier,HAL.Spatial.MatrixFrame,HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.Gripper" />.</summary>
      <param name="identity">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.Gripper" /> identity.</param>
      <param name="tcp">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.Gripper" /> operation frame, relative to its base.</param>
      <param name="body">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.Gripper" /> components, starting from its base.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.Take(HAL.Objects.Parts.Part,HAL.Procedures.Procedure)">
      <summary>Generates a procedure simulating the grasping of the specified part.</summary>
      <param name="part">Part to take.</param>
      <param name="execution">Procedure to be executed. A new, empty procedure will be created otherwise.</param>
      <returns>Resulting procedure.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.Release(HAL.Objects.Parts.Part,HAL.Procedures.Procedure)">
      <summary>Generates a procedure simulating the release of the specified part.</summary>
      <param name="part">Part to release.</param>
      <param name="execution">Procedure to be executed. A new, empty procedure will be created otherwise.</param>
      <returns>Resulting procedure.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.TakeSimulation(HAL.Objects.Parts.Part)">
      <summary>Procedure simulating the taking of the specified part.</summary>
      <param name="part">Part to be taken.</param>
      <returns>Simulation.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.Gripper.ReleaseSimulation(HAL.Objects.Parts.Part)">
      <summary>Procedure simulating the releasing of the specified part.</summary>
      <param name="part">Part to be released.</param>
      <returns>Simulation.</returns>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper">
      <summary>Parallel gripper.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper.#ctor(HAL.Identifier,System.Collections.Generic.IEnumerable{HAL.Objects.IObjectGraphEntity},System.Collections.Generic.IEnumerable{HAL.Objects.IObjectGraphEntity},System.Collections.Generic.IEnumerable{HAL.Objects.IObjectGraphEntity},HAL.Spatial.MatrixFrame,System.Boolean,System.Boolean)">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper" />.</summary>
      <param name="identity">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper" /> identity.</param>
      <param name="body">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper" /> components, starting from its base.</param>
      <param name="leftFinger">Left finger.</param>
      <param name="rightFinger">Right finger.</param>
      <param name="tcp">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.FingeredGripper" /> operation frame, relative to its base.</param>
      <param name="hasSingleMotor">Whether the gripper fingers are all actuated by the same motor.</param>
      <param name="areFingersSynchronous">Whether the gripper fingers are moving synchronously.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper.LeftFinger">
      <summary>Left finger.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper.RightFinger">
      <summary>Right finger.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper.TakeSimulation(HAL.Objects.Parts.Part)">
      <summary>Procedure simulating the taking of the specified part.</summary>
      <param name="part">Part to be taken.</param>
      <returns>Simulation.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.ParallelGripper.ReleaseSimulation(HAL.Objects.Parts.Part)">
      <summary>Procedure simulating the releasing of the specified part.</summary>
      <param name="part">Part to be released.</param>
      <returns>Simulation.</returns>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper">
      <summary>Vacuum gripper.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper.#ctor(HAL.Identifier,HAL.Spatial.MatrixFrame,HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper" />.</summary>
      <param name="identity">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper" /> identity.</param>
      <param name="tcp">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper" /> operation frame, relative to its base.</param>
      <param name="body">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Grasping.VacuumGripper" /> components, starting from its base.</param>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.IToolEffect">
      <summary>Qualifies a tool effect.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.IToolEffect.Set">
      <summary>Set this effect as the current tool effect.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.IToolEffect`1">
      <summary>Qualifies a tool effect.</summary>
      <typeparam name="T">Parent tool type.</typeparam>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolEffect`1.Tool">
      <summary>Tool applying this effect.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.IToolState">
      <summary>Qualifies a tool state.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolState.ActiveEndPoint">
      <summary>Active end point of the end effector.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolState.EndPointPosition">
      <summary>Location of active end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolState.PositionSpeed">
      <summary>Linear speed of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolState.OrientationVelocity">
      <summary>Orientation velocity of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolState.LinearAcceleration">
      <summary>Linear acceleration of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.IToolState.OrientationAcceleration">
      <summary>Orientation acceleration of end point.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.Tool">
      <summary>Base implementation of a tool.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.Place(HAL.Objects.Mechanisms.Mechanism@,System.String,HAL.Spatial.MatrixFrame,System.Double[],HAL.Objects.Mechanisms.Tools.Tool@)">
      <summary>Places a tool in the document.</summary>
      <param name="instance">Existing instance of this tool.</param>
      <param name="alias">Tool alias.</param>
      <param name="location">Location relative to the document reference (World).</param>
      <param name="position">Initial mechanism position.</param>
      <param name="tool">Tool.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.Create(HAL.Objects.Mechanisms.Tools.Tool@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Tools.Tool@)">
      <summary>Creates a generic tool.</summary>
      <param name="instance">Existing instance of this tool.</param>
      <param name="alias">Tool alias.</param>
      <param name="frame">Body frame expressed in the world coordinate system.</param>
      <param name="body">Tool body.</param>
      <param name="toolFrame">Tool frame (TCP), as the "processing" frame of the tool.</param>
      <param name="mass">Mass.</param>
      <param name="tool">Tool.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.Create(HAL.Objects.Mechanisms.Tools.Tool@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},System.Collections.Generic.List{HAL.Display.Styles.MeshDisplayStyle},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Tools.Tool@)">
      <summary>Creates a generic tool.</summary>
      <param name="instance">Existing instance of this tool.</param>
      <param name="alias">Tool alias.</param>
      <param name="frame">Body frame expressed in the world coordinate system.</param>
      <param name="body">Tool body.</param>
      <param name="color">Tool body display material.</param>
      <param name="toolFrame">Tool frame (TCP), as the "processing" frame of the tool.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="tool">Tool.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.InitializeCreation(HAL.Objects.Mechanisms.Tools.Tool,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},System.Collections.Generic.List{HAL.Display.Styles.MeshDisplayStyle},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame,HAL.Identifier@,HAL.Objects.Parts.Part@,System.Boolean)">
      <summary>Initializes the creation of a custom tool.</summary>
      <param name="instance">Existing instance of this tool.</param>
      <param name="alias">Tool alias.</param>
      <param name="frame">Body frame expressed in the world coordinate system.</param>
      <param name="body">Tool body.</param>
      <param name="material">Tool body display material.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="toolFrame">Tool frame (TCP), as the "processing" frame of the tool.</param>
      <param name="identity">Tool identity.</param>
      <param name="basePart">Tool base.</param>
      <param name="cleanupGeneratedParts">Whether to delete all the previous instance's parts from the session.</param>
      <returns>Tool frame relative to the base part.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.FinalizeCreation(HAL.Objects.Mechanisms.Tools.Tool,HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame)">
      <summary>Finalizes the creation of a custom tool.</summary>
      <param name="instance">Tool instance.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.#ctor(HAL.Identifier,HAL.Spatial.MatrixFrame,HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new <see cref="T:HAL.Objects.Mechanisms.Tools.Tool" />.</summary>
      <param name="identity">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Tool" /> identity.</param>
      <param name="tcp">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Tool" /> operation frame, relative to its base.</param>
      <param name="body">
        <see cref="T:HAL.Objects.Mechanisms.Tools.Tool" /> components, starting from its base.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Tool.Mass">
      <summary>Tool mass.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Tool.CenterOfMass">
      <summary>Tool center of mass.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.Tool.Effects">
      <summary>Tool effects.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.GetState">
      <summary>Emits the current state of this tool.</summary>
      <returns>Current tool state.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.SetTCP(HAL.Spatial.MatrixFrame,System.String)">
      <summary>Sets this tool operation frame.</summary>
      <param name="tcp">Tool operation frame.</param>
      <param name="alias">Frame alias.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.Tool.CloneWithoutContent(System.Boolean)">
      <summary>Clones this mechanism without any edges or vertices.</summary>
      <remarks>Primarily used internally during recursive cloning of submechanisms to ensure metadata isn't lost.</remarks>
      <returns>Empty cloned mechanism.</returns>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.ToolEffect`1">
      <summary>Base implementation of a tool effect.</summary>
      <typeparam name="T">Parent tool type.</typeparam>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolEffect`1.#ctor(HAL.Identifier,`0)">
      <summary>Creates a tool effect associated to a specified tool.</summary>
      <param name="identifier">Identifier.</param>
      <param name="tool">Tool applying this effect.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolEffect`1.Tool">
      <summary>Tool applying this effect.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolEffect`1.ToolSettings">
      <summary>Tool settings producing this effect.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolEffect`1.Set">
      <summary>Set this effect as the current tool effect.</summary>
    </member>
    <member name="T:HAL.Objects.Mechanisms.Tools.ToolState">
      <summary>Stores the state of an end effector.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.GetProperties(HAL.Objects.Mechanisms.Tools.ToolState,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Objects.Reference@,HAL.Units.Speed.LinearSpeed@,HAL.Units.Acceleration.LinearAcceleration@,HAL.Units.Speed.AngularSpeed@,HAL.Units.Acceleration.AngularAcceleration@,HAL.Alerts.Alert[]@)">
      <summary>Retrieves properties from an end-effector state.</summary>
      <param name="state">State to extract properties from.</param>
      <param name="absolutePosition">End-point position relative to the world.</param>
      <param name="relativePosition">End-point position relative to the current reference coordinate system.</param>
      <param name="reference">Currently reference coordinate system.</param>
      <param name="positionSpeed">Position speed.</param>
      <param name="positionAcceleration">Position acceleration.</param>
      <param name="orientationVelocity">Orientation velocity.</param>
      <param name="orientationAcceleration">Orientation acceleration.</param>
      <param name="notification">Notifications related to this state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.#ctor(HAL.Objects.Mechanisms.Mechanism,System.Boolean,HAL.Spatial.ReferencedFrame,HAL.Units.Speed.m_s,HAL.Units.Speed.rad_s,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.rad_s2,System.Collections.Generic.IEnumerable{HAL.Alerts.Alert},System.Nullable{System.DateTime})">
      <summary>Stores the state of an end effector.</summary>
      <param name="mechanism">Mechanism with end effector or end effector.</param>
      <param name="isCompositeMechanism">Whether the mechanism given is an assembly with an end effector (true) or the end effector itself.</param>
      <param name="endPointPosition">Location of active end point.</param>
      <param name="linearSpeed">Linear speed of end point.</param>
      <param name="orientationVelocity">Orientation velocity of end point.</param>
      <param name="linearAcceleration">Linear acceleration of end point.</param>
      <param name="orientationAcceleration">Orientation acceleration of end point.</param>
      <param name="notifications">Notifications associated with this state.</param>
      <param name="date">Date of the snapshot. Current UTC time will be retrieved if null.</param>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.Date">
      <summary>Date at which this state was generated.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.Notifications">
      <summary>Notifications.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.Source">
      <summary>Item used to generate this state, if any.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.ActiveEndPoint">
      <summary>Active end point of the end effector.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.EndPointPosition">
      <summary>Location of active end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.PositionSpeed">
      <summary>Linear speed of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.OrientationVelocity">
      <summary>Orientation velocity of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.LinearAcceleration">
      <summary>Linear acceleration of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.OrientationAcceleration">
      <summary>Orientation acceleration of end point.</summary>
    </member>
    <member name="P:HAL.Objects.Mechanisms.Tools.ToolState.IsValid">
      <summary>Defines whether the state is valid.</summary>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.HAL#Objects#IState#TryAssign(System.Object)">
      <summary>Attempts to assign this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.TryAssign(HAL.Objects.Mechanisms.Tools.Tool)">
      <summary>Assigns this state to an object.</summary>
      <param name="item">Item to which to assign the state.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Objects.Mechanisms.Tools.ToolState.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Objects.ObjectGraph">
      <summary>Maintains connectivity between objects.</summary>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.GetComponents(HAL.Objects.ObjectGraph,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@)">
      <summary>Retrieves the components of an object graph.</summary>
      <param name="objectGraph">Object graph to retrieve components from. Default = session object graph.</param>
      <param name="vertices">Vertices.</param>
      <param name="edges">Edges.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.GetVertexProperties(HAL.Objects.IObjectGraphVertex,HAL.Objects.ObjectGraph,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@)">
      <summary>Retrieves the properties of an object graph vertex.</summary>
      <param name="vertex">Vertex to retrieve properties from.</param>
      <param name="objectGraph">Object graph in which to perform the analysis. Default = session object graph.</param>
      <param name="inVertices">In vertices.</param>
      <param name="outVertices">Out vertices.</param>
      <param name="inEdges">In edges.</param>
      <param name="outEdges">Out edges.</param>
      <param name="neutralLocationInWorld">Neutral location relative to the graph root.</param>
      <param name="currentLocationInWorld">Actuated location relative to the graph root.</param>
      <param name="locationInParent">Location relative to the first in vertex.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.GetEdgeProperties(HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphVertex@,HAL.Objects.IObjectGraphVertex@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,System.Boolean@)">
      <summary>Retrieves the properties of an object graph edge.</summary>
      <param name="edge">Edge to retrieve properties from.</param>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="locationOnSource">Location relative to the source vertex.</param>
      <param name="locationOnTarget">Location relative to the target vertex.</param>
      <param name="targetLocationInParent">Target part location relative to the source vertex.</param>
      <param name="isDefaultRootConnection">Whether this edge is a default edge attached to the root.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.#ctor">
      <summary>Creates a new, empty <see cref="T:HAL.Objects.ObjectGraph" />.</summary>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.#ctor(HAL.Objects.Reference,System.String)">
      <summary>Creates a new <see cref="T:HAL.Objects.ObjectGraph" />.</summary>
      <param name="root">Root.</param>
      <param name="alias">Graph alias.</param>
    </member>
    <member name="P:HAL.Objects.ObjectGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="P:HAL.Objects.ObjectGraph.SimulatedVertices">
      <summary>Parts modified during simulation, and corresponding original parts if any.</summary>
    </member>
    <member name="P:HAL.Objects.ObjectGraph.SimulatedEdges">
      <summary>Connections modified during simulation, and corresponding original connection if any.</summary>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.AddVertex(HAL.Objects.IObjectGraphVertex)">
      <summary>Adds a vertex to the graph if it does not already exist.</summary>
      <param name="vertex">The vertex to add.</param>
      <returns>Successful addition of this vertex.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.RemoveVertex(HAL.Objects.IObjectGraphVertex)">
      <summary>Removes the specified vertex from the graph.</summary>
      <param name="vertex">Vertex to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.AddEdge(HAL.Objects.IObjectGraphEdge)">
      <summary>Adds the a specified edge to the graph.</summary>
      <param name="edge">The edge to be added to the graph.</param>
      <returns>Whether the edge was successfully added.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.RemoveEdge(HAL.Objects.IObjectGraphEdge)">
      <summary>Removes the edge from the graph.</summary>
      <param name="edge">Edge to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.OnReplacedConnection(System.Object,System.EventArgs)">
      <summary>Called when a connection is replaced.</summary>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.CreateDefaultEdge(HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex)">
      <summary>Creates a default edge between two vertices.</summary>
      <param name="source">Start vertex.</param>
      <param name="target">End vertex.</param>
      <returns>Resulting edge.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.SetRoot(HAL.Objects.Reference)">
      <summary>Sets the root vertex of this graph.</summary>
      <param name="root">New root.</param>
      <returns>Whether the root was successfully set.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.LocateInRoot(HAL.Objects.IObjectGraphVertex,System.Boolean)">
      <summary>Retrieves the location of a vertex relative to the root.</summary>
      <param name="vertex">The object to locate.</param>
      <param name="neutralPositions">Whether neutral locations of vertices should be used.</param>
      <returns>Location relative to this object graph root.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.LocateInParent(HAL.Objects.IObjectGraphVertex,System.Int32,System.Boolean)">
      <summary>Retrieves the location of a vertex relative to a specified parent.</summary>
      <param name="vertex">The object to locate.</param>
      <param name="parentIndex">If the vertex has multiple parents, the index of the parent to get the location with respect to.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.Connect(HAL.Objects.Reference,HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphEdge@,HAL.Graphs.Persistence)">
      <summary>Connects two objects of the graph.</summary>
      <param name="source">First object.</param>
      <param name="target">Second object.</param>
      <param name="edge">Resulting edge connecting the objects.</param>
      <param name="persistence">Whether this connection is simulated or physical.</param>
      <returns>True if the connection was successful.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.Disconnect(HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphVertex,HAL.Objects.IObjectGraphEdge@,HAL.Graphs.Persistence)">
      <summary>Disconnects two objects of the graph.</summary>
      <param name="source">First object.</param>
      <param name="target">Second object.</param>
      <param name="edge">Resulting edge disconnecting the child object.</param>
      <param name="persistence">Whether this disconnection is simulated or physical.</param>
      <returns>True if the disconnection was successful.</returns>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.ResetAllSimulatedContent">
      <summary>Resets the simulated content of this graph.</summary>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.ResetSimulatedEdge(HAL.Objects.IObjectGraphEdge)">
      <summary>Resets the specified simulated edge of this graph.</summary>
      <param name="edge">Edge to be reset to its original state.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.ResetSimulatedVertex(HAL.Objects.IObjectGraphVertex)">
      <summary>Resets the specified simulated vertex of this graph.</summary>
      <param name="part">Vertex to be reset to its original state.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.ExpireChildCaches(HAL.Objects.IObjectGraphVertex,System.Collections.Generic.HashSet{HAL.Objects.IObjectGraphEdge}@)">
      <summary>Recursively expires the caches of all children from this vertex.</summary>
      <param name="vertex">Vertex from which to expire. N.B. The vertex itself won't be expired.</param>
      <param name="expiredEdges">Edges already expired during this expiration cycle. Avoids infinite loops.</param>
    </member>
    <member name="M:HAL.Objects.ObjectGraph.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Objects.Parts.Part">
      <summary>Part.</summary>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Create(HAL.Objects.Parts.Part@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},HAL.Units.Mass.Mass,HAL.Objects.Parts.Part@)">
      <summary>Creates a mechanical part.</summary>
      <param name="instance">Existing instance of the part.</param>
      <param name="alias">Joint alias.</param>
      <param name="frame">Part frame expressed in the world coordinate system.</param>
      <param name="body">Part body.</param>
      <param name="mass">Part mass.</param>
      <param name="part">Mechanical part.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Create(HAL.Objects.Parts.Part@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},System.Collections.Generic.List{HAL.Display.Styles.MeshDisplayStyle},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Objects.Parts.Part@)">
      <summary>Creates a mechanical part.</summary>
      <param name="instance">Existing instance of the part.</param>
      <param name="alias">Joint alias.</param>
      <param name="frame">Part frame expressed in the world coordinate system.</param>
      <param name="body">Part body.</param>
      <param name="color">Part body display material.</param>
      <param name="mass">Part mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="part">Mechanical part.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Create(HAL.Objects.Parts.Part@,System.String,HAL.Spatial.MatrixFrame,System.Collections.Generic.List{HAL.Spatial.Mesh},System.Collections.Generic.List{HAL.Spatial.Mesh},System.Boolean,System.Collections.Generic.List{HAL.Display.Styles.MeshDisplayStyle},HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Objects.Parts.Part@)">
      <summary>Creates a mechanical part.</summary>
      <param name="instance">Existing instance of the part.</param>
      <param name="alias">Joint alias.</param>
      <param name="frame">Part frame expressed in the world coordinate system.</param>
      <param name="body">Part body.</param>
      <param name="lowResBody">Low resolution part body.</param>
      <param name="generateHulls">Whether to generate convex hulls for the input meshes.</param>
      <param name="color">Part body display material.</param>
      <param name="mass">Part mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="part">Mechanical part.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Relocate(HAL.Objects.Parts.Part,HAL.Spatial.MatrixFrame,HAL.Objects.Parts.Part@)">
      <summary>Modifies the location of a part.</summary>
      <param name="instance">Part to relocate.</param>
      <param name="location">Location relative to the document reference coordinate system.</param>
      <param name="part">Updated part.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Place(HAL.Objects.Parts.Part@,System.String,HAL.Spatial.MatrixFrame,HAL.Objects.Parts.Part@)">
      <summary>Places a part in the document.</summary>
      <param name="instance">Existing instance of this part.</param>
      <param name="alias">Joint alias.</param>
      <param name="frame">Part frame expressed in the world coordinate system.</param>
      <param name="part">Mechanical part.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.GetProperties(HAL.Objects.Parts.Part,HAL.Objects.ObjectGraph,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,System.Collections.Generic.List{HAL.Spatial.Mesh}@,System.Collections.Generic.List{HAL.Spatial.Mesh}@)">
      <summary>Retrieves the properties of a part.</summary>
      <param name="part">Part to retrieve properties from.</param>
      <param name="objectGraph">Object graph in which to perform the analysis. Default = session object graph.</param>
      <param name="inVertices">In vertices.</param>
      <param name="outVertices">Out vertices.</param>
      <param name="inEdges">In edges.</param>
      <param name="outEdges">Out edges.</param>
      <param name="neutralLocationInWorld">Neutral location relative to the graph root.</param>
      <param name="currentLocationInWorld">Actuated location relative to the graph root.</param>
      <param name="locationInParent">Location relative to the first in vertex.</param>
      <param name="body">Part body.</param>
      <param name="volumetricRepresentation">Lowest resolution representation of the body.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.#ctor(HAL.Identifier,HAL.Spatial.Body,HAL.Units.Mass.Mass,HAL.Spatial.MatrixFrame,HAL.Extensibility.HAL_PropertyManager)">
      <summary>Creates a new <see cref="T:HAL.Objects.Parts.Part" />.</summary>
      <param name="identity">
        <see cref="T:HAL.Objects.Parts.Part" /> identity.</param>
      <param name="body">Body.</param>
      <param name="mass">Mass.</param>
      <param name="centerOfMass">Center of mass.</param>
      <param name="properties">Additional properties to give this object.</param>
    </member>
    <member name="M:HAL.Objects.Parts.Part.#ctor(HAL.Objects.Parts.Part,System.Nullable{HAL.Spatial.RepresentationLevel},System.Boolean)">
      <summary>Creates a <see cref="T:HAL.Objects.Parts.Part" /> from an existing one.</summary>
      <param name="clonee">Existing <see cref="T:HAL.Objects.Parts.Part" />.</param>
      <param name="maximumFidelity">Defines the highest fidelity representation of part geometries to maintain.</param>
      <param name="ensureGeometricRepresentation">Whether to exceed the maximum fidelity to ensure that thee is a geometric representation of the part.</param>
    </member>
    <member name="P:HAL.Objects.Parts.Part.Body">
      <summary>Geometrical representation of the object.</summary>
    </member>
    <member name="P:HAL.Objects.Parts.Part.Mass">
      <summary>The mass of the object.</summary>
    </member>
    <member name="P:HAL.Objects.Parts.Part.CenterOfMass">
      <summary>The center of mass of the object.</summary>
    </member>
    <member name="M:HAL.Objects.Parts.Part.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.Parts.Part.GetBodyOnParent(HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Computes the part body relative to the parent location.</summary>
      <param name="graph">Graph in which to compute the transformation. The session's object graph will be used by default.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Transformed body.</returns>
    </member>
    <member name="M:HAL.Objects.Parts.Part.ClosestPoint(HAL.Spatial.Vector3D,HAL.Units.Length.m@)">
      <summary>Computes the closest distance between a specified point and this part body.</summary>
      <param name="point">Test point.</param>
      <param name="distance">Resulting distance.</param>
      <returns>Closest point on the part.</returns>
    </member>
    <member name="M:HAL.Objects.Parts.Part.DistanceTo(HAL.Objects.Parts.Part)">
      <summary>Computes the distance between this part and a second one.</summary>
      <param name="part">Second part.</param>
      <returns>Distance between the two parts.</returns>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Objects.Parts.Part.Clone(System.Nullable{HAL.Spatial.RepresentationLevel},System.Boolean)">
      <summary>Clones this object with a minimal representation.</summary>
      <param name="maximumFidelity">Defines the highest fidelity representation of part geometries to maintain.</param>
      <param name="ensureGeometricRepresentation">Whether to exceed the maximum fidelity to ensure that thee is a geometric representation of the part.</param>
    </member>
    <member name="T:HAL.Objects.Placeholder">
      <summary>Holds the place of a <see cref="T:HAL.Objects.Reference" /> in the <see cref="T:HAL.Objects.ObjectGraph" />.</summary>
    </member>
    <member name="M:HAL.Objects.Placeholder.Create(HAL.Objects.Placeholder@,System.String,HAL.Spatial.MatrixFrame,HAL.Objects.Placeholder@)">
      <summary>Creates a placeholder.</summary>
      <param name="instance">Existing instance of this placeholder.</param>
      <param name="alias">Placeholder alias.</param>
      <param name="frame">Placeholder frame.</param>
      <param name="placeholder">Placeholder.</param>
    </member>
    <member name="M:HAL.Objects.Placeholder.GetProperties(HAL.Objects.Placeholder,HAL.Objects.ObjectGraph,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@,HAL.Spatial.MatrixFrame@)">
      <summary>Retrieves the properties of a placeholder.</summary>
      <param name="placeholder">Placeholder to retrieve properties from.</param>
      <param name="objectGraph">Object graph in which to perform the analysis. Default = session object graph.</param>
      <param name="inVertices">In vertices.</param>
      <param name="inEdges">In edges.</param>
      <param name="neutralLocationInWorld">Neutral location relative to the graph root.</param>
      <param name="currentLocationInWorld">Actuated location relative to the graph root.</param>
      <param name="locationInParent">Location relative to the first in vertex.</param>
    </member>
    <member name="M:HAL.Objects.Placeholder.#ctor(HAL.Identifier,HAL.Extensibility.HAL_PropertyManager)">
      <summary>Creates a <see cref="T:HAL.Objects.Placeholder" />.</summary>
      <param name="identity">Identity.</param>
      <param name="properties">Additional properties.</param>
    </member>
    <member name="M:HAL.Objects.Placeholder.#ctor(HAL.Objects.Placeholder)">
      <summary>Creates a <see cref="T:HAL.Objects.Placeholder" /> from an existing one.</summary>
      <param name="clonee">
        <see cref="T:HAL.Objects.Placeholder" /> to clone.</param>
    </member>
    <member name="M:HAL.Objects.Placeholder.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.Placeholder.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Objects.Placeholder.LocationWithRespectTo(HAL.Objects.Reference,HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified reference.</summary>
      <param name="reference">Reference.</param>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the reference.</returns>
    </member>
    <member name="M:HAL.Objects.Placeholder.LocationInWorld(System.Boolean)">
      <summary>Retrieves the location of this object relative to the current <see cref="T:HAL.Runtime.Session">session</see>'s <see cref="T:HAL.Objects.ObjectGraph">graph.</see></summary>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
    </member>
    <member name="M:HAL.Objects.Placeholder.LocationIn(HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified graph root.</summary>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the graph root.</returns>
    </member>
    <member name="M:HAL.Objects.Placeholder.ExpireCache">
      <summary>Expires this object location cache.</summary>
    </member>
    <member name="M:HAL.Objects.Placeholder.Equals(HAL.Objects.IObjectGraphVertex)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:HAL.Objects.ProductIdentity">
      <summary>Identity of an object, as a commercial product.</summary>
    </member>
    <member name="M:HAL.Objects.ProductIdentity.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Create a product identity from a set of specific values.</summary>
      <param name="alias">Alias of the product.</param>
      <param name="provider">Product provider or manufacturer.</param>
      <param name="series">Series this product belongs to in the manufacturer catalog, if any.</param>
      <param name="denomination">Product denomination or model.</param>
      <param name="version">Product version.</param>
      <param name="uniqueIdentifier">Unique identifier of the product, such as a serial number.</param>
    </member>
    <member name="M:HAL.Objects.ProductIdentity.#ctor(HAL.Objects.ProductIdentity,System.Boolean)">
      <summary>Creates a <see cref="T:HAL.Objects.ProductIdentity" /> from an existing one.</summary>
      <param name="clonee">Cloned <see cref="T:HAL.Objects.ProductIdentity" />.</param>
      <param name="retainGuid">Whether to retain the GUID of the clone.</param>
    </member>
    <member name="P:HAL.Objects.ProductIdentity.Provider">
      <summary>Product provider or manufacturer.</summary>
    </member>
    <member name="P:HAL.Objects.ProductIdentity.Series">
      <summary>Series this product belongs to in the manufacturer catalog, if any.</summary>
    </member>
    <member name="P:HAL.Objects.ProductIdentity.Denomination">
      <summary>Product denomination or model.</summary>
    </member>
    <member name="P:HAL.Objects.ProductIdentity.Version">
      <summary>Product version.</summary>
    </member>
    <member name="P:HAL.Objects.ProductIdentity.UniqueIdentifier">
      <summary>Unique identifier of the product, such as a serial number.</summary>
    </member>
    <member name="P:HAL.Objects.ProductIdentity.IsValid">
      <summary>True if the object is valid.</summary>
    </member>
    <member name="M:HAL.Objects.ProductIdentity.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of this object .</returns>
    </member>
    <member name="M:HAL.Objects.ProductIdentity.Clone">
      <inheritdoc />
    </member>
    <member name="M:HAL.Objects.ProductIdentity.Clone(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Objects.Reference">
      <summary>Reference system.</summary>
    </member>
    <member name="M:HAL.Objects.Reference.Create(HAL.Objects.Reference@,System.String,HAL.Spatial.MatrixFrame,HAL.Objects.Reference@)">
      <summary>Creates a reference coordinate system.</summary>
      <param name="instance">Existing instance of this reference.</param>
      <param name="alias">Reference alias.</param>
      <param name="frame">Reference frame.</param>
      <param name="reference">Reference.</param>
    </member>
    <member name="M:HAL.Objects.Reference.Create(HAL.Objects.Reference@,System.String,HAL.Spatial.MatrixFrame,HAL.Objects.Reference,System.Boolean,HAL.Objects.Reference@)">
      <summary>Creates a reference.</summary>
      <param name="instance">Existing instance of this reference.</param>
      <param name="alias">Reference alias.</param>
      <param name="frame">Reference frame.</param>
      <param name="parent">Parent reference, if any. The world reference system will be used otherwise.</param>
      <param name="isAbsolute">Whether the frame specifies an absolute world location. If false, the frame is considered relative to the parent.</param>
      <param name="reference">Reference.</param>
    </member>
    <member name="M:HAL.Objects.Reference.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Objects.Reference" />.</summary>
      <param name="alias">Alias.</param>
    </member>
    <member name="M:HAL.Objects.Reference.#ctor(HAL.Identifier,HAL.Extensibility.HAL_PropertyManager)">
      <summary>Creates a new <see cref="T:HAL.Objects.Reference" />.</summary>
      <param name="identity">Identity.</param>
      <param name="properties">Additional properties to give this object.</param>
    </member>
    <member name="M:HAL.Objects.Reference.#ctor(HAL.Objects.Reference)">
      <summary>Creates a <see cref="T:HAL.Objects.Reference" /> from an existing one.</summary>
      <param name="clonee">Existing <see cref="T:HAL.Objects.Reference" />.</param>
    </member>
    <member name="P:HAL.Objects.Reference.IsWorld">
      <summary>Whether this reference is the world.</summary>
    </member>
    <member name="M:HAL.Objects.Reference.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.IIdentifiable" /> object.</summary>
    </member>
    <member name="M:HAL.Objects.Reference.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Objects.Reference.LocationWithRespectTo(HAL.Objects.Reference,HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified reference.</summary>
      <param name="reference">Reference.</param>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the reference.</returns>
    </member>
    <member name="M:HAL.Objects.Reference.LocationInWorld(System.Boolean)">
      <summary>Retrieves the location of this object relative to the current <see cref="T:HAL.Runtime.Session">session</see>'s <see cref="T:HAL.Objects.ObjectGraph">graph.</see></summary>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
    </member>
    <member name="M:HAL.Objects.Reference.LocationIn(HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Retrieves the location of this object relative to a specified graph root.</summary>
      <param name="graph">Graph in which to locate this object.</param>
      <param name="neutral">Whether neutral positions of the graph elements should be used.</param>
      <returns>Location relative to the graph root.</returns>
    </member>
    <member name="M:HAL.Objects.Reference.ExpireCache">
      <summary>Expires this object location cache.</summary>
    </member>
    <member name="M:HAL.Objects.Reference.Equals(HAL.Objects.IObjectGraphVertex)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:HAL.Objects.ReplacedEdgeArguments">
      <summary>Details the replacement of an edge.</summary>
    </member>
    <member name="M:HAL.Objects.ReplacedEdgeArguments.#ctor(HAL.Objects.IObjectGraphEdge,HAL.Objects.IObjectGraphEdge)">
      <summary>Creates arguments detailing the replacement of an edge.</summary>
      <param name="replaced">Replaced edge.</param>
      <param name="replacement">Replacement edge.</param>
    </member>
    <member name="P:HAL.Objects.ReplacedEdgeArguments.Replaced">
      <summary>Original edge.</summary>
    </member>
    <member name="P:HAL.Objects.ReplacedEdgeArguments.Replacement">
      <summary>New edge.</summary>
    </member>
    <member name="T:HAL.Physics.Material">
      <summary>Material profile.</summary>
    </member>
    <member name="M:HAL.Physics.Material.#ctor(HAL.Identifier)">
      <summary>Creates a new material profile.</summary>
      <param name="identity">Material identity.</param>
    </member>
    <member name="P:HAL.Physics.Material.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Physics.Material.Color">
      <summary>Rendering material to be applied.</summary>
    </member>
    <member name="P:HAL.Physics.Material.Density">
      <summary>Density.</summary>
    </member>
    <member name="P:HAL.Physics.Material.TensileModulus">
      <summary>Tensile (Young's) modulus.</summary>
    </member>
    <member name="P:HAL.Physics.Material.YieldStrength">
      <summary>Tensile stress at yield. Stress which will cause a permanent deformation of 0.2% of the original dimension.</summary>
    </member>
    <member name="P:HAL.Physics.Material.TensileStrength">
      <summary>Ultimate tensile strength. The maximum stress the material will sustain before fracture.</summary>
    </member>
    <member name="P:HAL.Physics.Material.YieldPointElongation">
      <summary>Elongation at yield, as a ratio of the initial length.</summary>
    </member>
    <member name="P:HAL.Physics.Material.Elongation">
      <summary>Elongation at break, as a ratio of the initial length.</summary>
    </member>
    <member name="P:HAL.Physics.Material.FlexuralStrength">
      <summary>Flexural strength.</summary>
    </member>
    <member name="P:HAL.Physics.Material.FlexuralModulus">
      <summary>Flexural modulus.</summary>
    </member>
    <member name="P:HAL.Physics.Material.GlassTransition">
      <summary>Glass transition temperature.</summary>
    </member>
    <member name="P:HAL.Physics.Material.Melting">
      <summary>Melting temperature range.</summary>
    </member>
    <member name="P:HAL.Physics.Material.HeatDeflection">
      <summary>Heat deflection temperature (HDT).</summary>
    </member>
    <member name="M:HAL.Physics.Material.Equals(HAL.Identifier)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Physics.Material.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Physics.Material.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Procedures.ActionGraph">
      <summary>Graph of actions.</summary>
    </member>
    <member name="M:HAL.Procedures.ActionGraph.#ctor">
      <summary>Creates a default <see cref="T:HAL.Procedures.ActionGraph" />.</summary>
    </member>
    <member name="M:HAL.Procedures.ActionGraph.#ctor(HAL.Procedures.Actions.Action,HAL.Identifier)">
      <summary>Creates an <see cref="T:HAL.Procedures.ActionGraph" /> with the given vertex as the root.</summary>
      <param name="root">Root vertex.</param>
      <param name="identity">Graph identity.</param>
    </member>
    <member name="P:HAL.Procedures.ActionGraph.AllowsParallelDefaultEdges">
      <summary>Whether this graph should allow multiple default edges between its root and its vertices. The first created edge will be kept otherwise.</summary>
    </member>
    <member name="P:HAL.Procedures.ActionGraph.IsSolved">
      <summary>Indicates whether this graph is solved.</summary>
    </member>
    <member name="M:HAL.Procedures.ActionGraph.CreateDefaultEdge(HAL.Procedures.Actions.Action,HAL.Procedures.Actions.Action)">
      <summary>Creates a default implementation of a graph edge.</summary>
      <param name="source">The start vertex of the edge.</param>
      <param name="target">The end vertex of the edge.</param>
    </member>
    <member name="M:HAL.Procedures.ActionGraph.AssignActor(HAL.Control.IControllableObject,System.Boolean,System.Boolean)">
      <summary>Assigns the specified <see cref="T:HAL.Control.IControllableObject" /> as actor of this <see cref="T:HAL.Procedures.Procedure" />'s <see cref="T:HAL.Procedures.Actions.Action" />s.</summary>
      <param name="actor">Mechanism to set as actor.</param>
      <param name="overwrite">Whether already set actor properties should be overwritten.</param>
      <param name="fixSettings">Whether to assign default settings to motions where none are present.</param>
    </member>
    <member name="M:HAL.Procedures.ActionGraph.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.ActionSet">
      <summary>A class for collecting HAL_Actions for organizational reasons, simplified flow control or reuse.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.OverrideExport(HAL.Procedures.Procedure@,System.String,System.String,HAL.Procedures.Procedure,HAL.Procedures.Procedure@)">
      <summary>Wraps a literal expression as a custom action.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="expression">Action expression. Please ensure string literals are enclosed in double quotes ("").</param>
      <param name="simulation">Action simulation.</param>
      <param name="action">Custom action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.GetProperties(HAL.Procedures.Actions.Action,HAL.Motion.Planning.PlanningStep@,System.Boolean@,System.Boolean@)">
      <summary>Gets the properties of an action.</summary>
      <param name="action">Action.</param>
      <param name="planningStep">Completed planning step.</param>
      <param name="isSolved">Whether the action is solved.</param>
      <param name="isExecuted">Whether the action is executed.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.GetProperties(HAL.Procedures.Actions.ActionSet,HAL.Procedures.Procedure,HAL.Motion.Planning.PlanningStep@,System.Boolean@,System.Boolean@,System.Collections.Generic.List{HAL.Procedures.Actions.Action}@,System.Collections.Generic.List{HAL.Procedures.Procedure}@)">
      <summary>Retrieves action set properties.</summary>
      <param name="set">Action set to retrieve properties from.</param>
      <param name="procedure">Procedure this action set belongs to.</param>
      <param name="expiration">Current expiration level.</param>
      <param name="isSolved">Whether this set is solved.</param>
      <param name="isExecuted">Whether this set is executed.</param>
      <param name="content">Set content.</param>
      <param name="simulation">Simulated content.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.#ctor(System.String,System.Boolean)">
      <summary>Instantiates a new empty <see cref="T:HAL.Procedures.Actions.ActionSet" />.</summary>
      <param name="name">Action name.</param>
      <param name="locked">If true, locks the created action set.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.#ctor(HAL.Identifier,System.Boolean)">
      <summary>Creates a new empty <see cref="T:HAL.Procedures.Actions.ActionSet" />.</summary>
      <param name="identity">Action set identity.</param>
      <param name="locked">If true, locks the created action set.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ActionSet" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The parent graph to which the clone should be assigned.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.ActionSet.Locked">
      <summary>If true, hides the content of the set.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ActionSet.SimulationOverride">
      <summary>Custom simulation behavior.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.Clone">
      <summary>Creates a duplicate of this action in the given parent graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.ActionsFrom(HAL.Procedures.ActionGraph)">
      <summary>Gets the child actions of this action set from the given graph.</summary>
      <param name="actionGraph">The graph from which the child actions should be sought.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.AddAction(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure)">
      <summary>Adds the <see cref="T:HAL.Procedures.Actions.Action" /> specified as a child of this <see cref="T:HAL.Procedures.Actions.ActionSet" />.</summary>
      <param name="action">The action to be added to this action set.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.AddActions(System.Collections.Generic.List{HAL.Procedures.Actions.Action},HAL.Procedures.Procedure)">
      <summary>Adds all the <see cref="T:HAL.Procedures.Actions.Action" /> specified as children of this <see cref="T:HAL.Procedures.Actions.ActionSet" />.</summary>
      <param name="actions">The actions to be added to this action set.</param>
      <param name="actionGraph">The graph to which these new actions should be added.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.RemoveAction(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure)">
      <summary>Removes the <see cref="T:HAL.Procedures.Actions.Action" /> specified as a child of this <see cref="T:HAL.Procedures.Actions.ActionSet" /> and from the ParentGraph.</summary>
      <param name="action">The actions to be removed from this action set.</param>
      <param name="actionGraph">The graph from which this action should be removed.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Run during the pre-solving of the transition graph to complete any information missing from the action and ensure its compatibility.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this is triggered or executed.</summary>
      <returns>Successful execution.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionSet.ResetExecution">
      <summary>Resets this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is reset.</remarks>
    </member>
    <member name="T:HAL.Procedures.Actions.Action">
      <summary>Base implementation of an <see cref="T:HAL.Procedures.IProcedureVertex" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.#ctor(System.String)">
      <summary>Creates an <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <param name="alias">Action alias.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates an <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <param name="parentVertex">Parent action.</param>
      <param name="actionGraph">
        <see cref="T:HAL.Procedures.Procedure" /> to which this new action should be added.</param>
      <param name="alias">Action alias.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.#ctor(HAL.Procedures.Actions.Action,System.Boolean)">
      <summary>Clones an <see cref="T:HAL.Procedures.Actions.Action" /> from an existing one.</summary>
      <param name="clonee">Existing <see cref="T:HAL.Procedures.Actions.Action" />.</param>
      <param name="keepIdentity">Whether the identity of the cloned action should be kept by the clone.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.PlanningStatus">
      <summary>Completed planning step.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.IsSolved">
      <summary>Whether this <see cref="T:HAL.Procedures.Actions.Action" /> has all the necessary properties to be executed.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.NotificationLevel">
      <summary>Notification severity level of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.Notifications">
      <summary>Notifications raised during the planning of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.IsExecutionComplete">
      <summary>Whether this <see cref="T:HAL.Procedures.Actions.Action" /> has been successfully executed.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.CodeBlock">
      <summary>The <see cref="P:HAL.Procedures.Actions.Action.CodeBlock" /> that is derived from this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.PropertyCodeBlocks">
      <summary>The <see cref="P:HAL.Procedures.Actions.Action.CodeBlock" />s for each property of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.PreRenderContent">
      <summary>Content to be added before the rendered result of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.RenderContentOverride">
      <summary>Content to be added in place of the rendered result of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.Action.PostRenderContent">
      <summary>Content to be added after the rendered result of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.Clone">
      <summary>Clones this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the parent <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.ResetPlanning">
      <summary>Resets the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.Plan(HAL.Motion.Planning.SequenceMotionPlanner,HAL.Motion.Planning.PlanningStep)">
      <summary>Plans the execution of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the parent <see cref="T:HAL.Procedures.Procedure" />'s execution is being planned.</remarks>
      <param name="planner">Planner in charge of the planning of this action.</param>
      <param name="step">Planning step to complete.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.ExpirePlanning(HAL.Motion.Planning.PlanningStep)">
      <summary>Forces this <see cref="T:HAL.Procedures.Actions.Action" /> to expire its planning below the specified step.</summary>
      <param name="step">Step that should be completed in the future.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>Called when this <see cref="T:HAL.Procedures.Actions.Action" /> is executed.</summary>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> calling the execution of this <see cref="T:HAL.Procedures.Actions.Action" />.</param>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is executed.</remarks>
      <returns>Successful execution.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.ResetExecution">
      <summary>Resets this <see cref="T:HAL.Procedures.Actions.Action" /> execution.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.Equals(HAL.Procedures.Actions.Action)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.Action.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionExecutionProgress.#ctor(HAL.Identifier,System.Double,System.Double)">
      <summary>Creates a new normalized progress reporter.</summary>
      <param name="identity">Progress identity.</param>
      <param name="window">Total progress window.</param>
      <param name="value">Initial progress value.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ActionExecutionProgress.ReportExecutionProgress(HAL.Units.Time.s)">
      <summary>Reports an update in the execution time of a <see cref="T:HAL.Procedures.Actions.BlockingAction" />.</summary>
      <param name="executionTime">Current execution time of the action, relative to its start.</param>
    </member>
    <member name="T:HAL.Procedures.Actions.AssemblyAction">
      <summary>An action that modifies the kinematic graph of a mechanism.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.ChangeTool(HAL.Procedures.Procedure@,System.String,HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Connection,System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Procedures.Procedure},HAL.Procedures.Procedure@)">
      <summary>Changes the tool of a robot.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="mechanism">Robot on which to connect the tool.</param>
      <param name="tool">Tool to connect. If null, will disconnect the current tool from the robot.</param>
      <param name="endPoint">Endpoint on/from which to (dis)connect the tool. If null, the first eligible end point available on the robot will be selected.</param>
      <param name="before">Actions to be executed before the tool change.</param>
      <param name="after">Actions to be executed after the tool change.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.ChangeEndPoint(HAL.Procedures.Procedure@,System.String,HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Connection,System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Procedures.Procedure},HAL.Procedures.Procedure@)">
      <summary>Changes the end point of a robot.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="mechanism">Mechanism whose end point should be changed.</param>
      <param name="endPoint">End point to use as the active end point of the mechanism.</param>
      <param name="before">Actions to be executed before the tool change.</param>
      <param name="after">Actions to be executed after the tool change.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.#ctor(HAL.Procedures.Actions.AssemblyActionSettings,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.AssemblyAction" />.</summary>
      <param name="settings">Assembly action settings.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,HAL.Procedures.Actions.AssemblyActionSettings,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.AssemblyAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="settings">Assembly action settings.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyAction.Settings">
      <summary>The settings for this action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.Clone">
      <summary>Creates a duplicate of this action in the given parent graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this Triggerable is triggered or executed</summary>
      <param name="visitor">Graph visitor.</param>
      <returns>Successful execution.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyAction.Execute(HAL.Procedures.ProcedureVisitor,System.Collections.Generic.List{HAL.Objects.Mechanisms.Mechanism}@)">
      <summary>Executes this action and returns the modified elements.</summary>
      <param name="visitor">Visitor requesting the execution.</param>
      <param name="modifiedMechanisms">Modified mechanisms.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.AssemblyActionSettings">
      <summary>The settings required to correctly execute a <see cref="T:HAL.Procedures.Actions.AssemblyAction" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyActionSettings.#ctor(HAL.Procedures.Actions.AssemblyActionSettings)">
      <summary>Creates a set of assembly action settings from an existing one.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyActionSettings.#ctor(HAL.Procedures.Actions.AssemblyOperation,HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Connection,HAL.Objects.Mechanisms.Mechanism,System.Boolean)">
      <summary>Creates a set of assembly action settings to operate on a specified socket of the host mechanism.</summary>
      <param name="operation">Operation to be executed.</param>
      <param name="host">Host mechanism.</param>
      <param name="socketOnHost">Host socket on which to operate.</param>
      <param name="target">Target mechanism.</param>
      <param name="isTargetEndEffector">Whether the target mechanism should be considered as an end effector of the host.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyActionSettings.#ctor(HAL.Procedures.Actions.AssemblyOperation,HAL.Objects.Mechanisms.Mechanism,HAL.Spatial.MatrixFrame,HAL.Objects.Mechanisms.Mechanism,System.Boolean)">
      <summary>Creates a set of assembly action settings to operate at a specified location on the host mechanism.</summary>
      <param name="operation">Operation to be executed.</param>
      <param name="host">Host mechanism.</param>
      <param name="locationOnHost">Location relative to the host mechanism base.</param>
      <param name="target">Target mechanism.</param>
      <param name="isTargetEndEffector">Whether the target mechanism should be considered as an end effector of the host.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyActionSettings.#ctor(HAL.Objects.Mechanisms.Mechanism,HAL.Objects.Connection)">
      <summary>Creates a set of assembly action settings to set the end point of the host mechanism.</summary>
      <param name="host">Host mechanism.</param>
      <param name="endPoint">Host socket on which to operate.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyActionSettings.#ctor(HAL.Objects.Mechanisms.Mechanism,HAL.Spatial.MatrixFrame)">
      <summary>Creates a set of assembly action settings to set the end point of the host mechanism.</summary>
      <param name="host">Host mechanism.</param>
      <param name="locationOnHost">Location relative to the host mechanism base.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.Operation">
      <summary>Defines how the host mechanism should be modified by this action</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.Host">
      <summary>The mechanism which will be modified.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.Target">
      <summary>The mechanism which will be added or removed from the host.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.IsTargetEndEffector">
      <summary>Whether the target mechanism should be considered as an end-effector of the host.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.LocationOnHost">
      <summary>If specified, creates a new socket on the host with this location upon which any modifications will be applied.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.SocketOnHost">
      <summary>The socket on the host upon which any modifications will be applied.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.AssemblyActionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyActionSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.AssemblyOperation">
      <summary>Defines the different ways an action can manipulate a mechanism.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.AssemblyOperation.Connect">
      <summary>Indicates that a mechanism should be connected to another.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.AssemblyOperation.Disconnect">
      <summary>Indicates that a mechanism should be disconnected from another.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.AssemblyOperation.ChangeActiveEndPoint">
      <summary>Indicates that the active end point of a mechanism should be changed.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.AssemblyOperationDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.AssemblyOperationDescriptions.Description(HAL.Procedures.Actions.AssemblyOperation)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.BlockingAction">
      <summary>Indicates that an action interrupts normal program execution until it is complete.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.BlockingAction.#ctor">
      <summary>Default, empty constructor for deserialization.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.BlockingAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.BlockingAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.BlockingAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.BlockingAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.BlockingAction.#ctor(HAL.Procedures.Actions.BlockingAction,System.Boolean)">
      <summary>Clones an existing <see cref="T:HAL.Procedures.Actions.Action" /> and adds it to the given parent graph.</summary>
      <param name="clonee">The vertex to be cloned.</param>
      <param name="keepIdentity">Whether the identity of the cloned action should be kept by the clone.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.BlockingAction.Events">
      <summary>Events to be executed during the execution of this action</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.BlockingAction.Duration">
      <summary>Execution duration of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.BlockingAction.ExecutionProgress">
      <summary>Execution progress.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.BlockingAction.IsExecuting">
      <summary>Whether the execution of this action has begun</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.BlockingAction.ResetExecution">
      <inheritdoc />
    </member>
    <member name="T:HAL.Procedures.Actions.CommunicationGraphAction">
      <summary>Creates or remove components in a specified communication graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.CommunicationGraphAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.CommunicationGraphAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.#ctor(HAL.Communications.CommunicationGraph,HAL.Procedures.Actions.GraphOperation,HAL.Communications.Protocol,HAL.Communications.ISocket,HAL.Communications.ISocket[])">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.CommunicationGraphAction" />.</summary>
      <param name="graph">Graph hosting the objects to manipulate.</param>
      <param name="operation">Desired operation.</param>
      <param name="protocol">Communication protocol. If no protocol is specified and the desired operation is disconnect, all buses will be disconnected.</param>
      <param name="parent">Parent vertex.</param>
      <param name="children">Children vertices being attached or detached to/from the parent.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphAction.Settings">
      <summary>The settings for this action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>Called when this <see cref="T:HAL.Procedures.Actions.Action" /> is executed.</summary>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> calling the execution of this <see cref="T:HAL.Procedures.Actions.Action" />.</param>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is executed.</remarks>
      <returns>Successful execution.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.Execute(HAL.Procedures.ProcedureVisitor,System.Collections.Generic.List{HAL.Communications.ISocket}@,System.Collections.Generic.List{HAL.Communications.Bus}@)">
      <summary>Executes this action and returns the modified elements.</summary>
      <param name="visitor">Visitor requesting the execution.</param>
      <param name="modifiedVertices">Modified graph vertices.</param>
      <param name="modifiedEdges">Modified graph edges. </param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphAction.Clone">
      <summary>Clones this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.CommunicationGraphActionSettings">
      <summary>Settings detailing the operations to be executed by a <see cref="T:HAL.Procedures.Actions.CommunicationGraphAction" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphActionSettings.#ctor(HAL.Procedures.Actions.CommunicationGraphActionSettings)">
      <summary>Creates a set of communication graph action settings from an existing one.</summary>
      <param name="clonee">Existing settings.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphActionSettings.#ctor(HAL.Communications.CommunicationGraph,HAL.Procedures.Actions.GraphOperation,HAL.Communications.Protocol,HAL.Communications.ISocket,HAL.Communications.ISocket[])">
      <summary>Creates a set of communication graph action settings.</summary>
      <param name="graph">Graph hosting the objects to manipulate.</param>
      <param name="operation">Desired operation.</param>
      <param name="protocol">Communication protocol. If no protocol is specified and the desired operation is disconnect, all buses will be disconnected.</param>
      <param name="parent">Parent vertex.</param>
      <param name="children">Children vertices being attached or detached to/from the parent.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphActionSettings.Graph">
      <summary>Graph hosting the objects to manipulate.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphActionSettings.Operation">
      <summary>Desired operation.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphActionSettings.Parent">
      <summary>Parent vertex.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphActionSettings.Protocol">
      <summary>Communication protocol.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphActionSettings.Children">
      <summary>Children vertices being attached or detached to/from the parent.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.CommunicationGraphActionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.CommunicationGraphActionSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.DirectMotionAction">
      <summary>An action that directly affects its actor without passing through trajectory solving.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.#ctor">
      <summary>Default, empty constructor for (de)serialization. </summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.DirectMotionAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.DirectMotionAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.#ctor(HAL.Procedures.Actions.DirectMotionSettings,System.String)">
      <summary>Adds a motion action in the specified transition graph.</summary>
      <param name="settings">Settings of the action.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.DirectMotionAction.Settings">
      <summary>Motion settings, constraining the behavior of the device.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.Clone">
      <summary>Creates a duplicate of this action in the given parent graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this triggerable is triggered or executed.</summary>
      <returns>True on successful execution.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.DirectMotionSettings">
      <summary>Settings necessary to define a <see cref="T:HAL.Procedures.Actions.DirectMotionAction" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionSettings.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionSettings.#ctor(HAL.Procedures.Actions.DirectMotionSettings)">
      <summary>Creates a set of settings from an existing one.</summary>
      <param name="clonee">Existing settings to copy.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionSettings.#ctor(HAL.Objects.Mechanisms.Mechanism,HAL.Motion.Settings.Target,HAL.Motion.Settings.MotionSpace)">
      <summary>Creates a set of direct motion settings.</summary>
      <param name="actor">Mechanism to be controlled by this action.</param>
      <param name="target">Target to reach.</param>
      <param name="space">Space in which the settings must be interpreted.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.DirectMotionSettings.Actor">
      <summary>Mechanism to be controlled by this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.DirectMotionSettings.Target">
      <summary>Target to reach.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.DirectMotionSettings.Space">
      <summary>Space in which the settings must be interpreted.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.DirectMotionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.DirectMotionSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.ICommunicationGraphModifyingAction">
      <summary>Qualifies actions modifying the topology or the content of a communication graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ICommunicationGraphModifyingAction.Execute(HAL.Procedures.ProcedureVisitor,System.Collections.Generic.List{HAL.Communications.ISocket}@,System.Collections.Generic.List{HAL.Communications.Bus}@)">
      <summary>Executes this action and returns the modified elements.</summary>
      <param name="visitor">Visitor requesting the execution.</param>
      <param name="modifiedVertices">Modified graph vertices.</param>
      <param name="modifiedEdges">Modified graph edges. </param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.IInitializableAction">
      <summary>Qualifies initializable actions.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.IInitializableAction.Initialize">
      <summary>Initializes the action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.IInitializableAction.Terminate">
      <summary>Terminates the action.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.IMechanismModifyingAction">
      <summary>Qualifies an action modifying the composition of a mechanism.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.IMechanismModifyingAction.Execute(HAL.Procedures.ProcedureVisitor,System.Collections.Generic.List{HAL.Objects.Mechanisms.Mechanism}@)">
      <summary>Executes this action and returns the modified elements.</summary>
      <param name="visitor">Visitor requesting the execution.</param>
      <param name="modifiedMechanisms">Modified mechanisms.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.IObjectGraphModifyingAction">
      <summary>Qualifies actions modifying the topology or the content of an object graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.IObjectGraphModifyingAction.Execute(HAL.Procedures.ProcedureVisitor,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@)">
      <summary>Executes this action and returns the modified elements.</summary>
      <param name="visitor">Visitor requesting the execution.</param>
      <param name="modifiedVertices">Modified graph vertices.</param>
      <param name="modifiedEdges">Modified graph edges. </param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.MotionAction">
      <summary>Action specifying a motion.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Move(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Motion.Settings.Target},System.Collections.Generic.List{HAL.Motion.Settings.MotionSettings},HAL.Procedures.Procedure@)">
      <summary>Moves the robot through a sequence of targets.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="alias">Action alias.</param>
      <param name="target">Targets to move through.</param>
      <param name="motionSettings">Motion settings for each target.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Jump(HAL.Procedures.Procedure@,System.String,HAL.Motion.Settings.Target,HAL.Motion.Settings.Target,HAL.Spatial.Vector3D,System.Boolean,HAL.Units.Length.Length,HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings,HAL.Procedures.Procedure@)">
      <summary>Jump motion between two targets.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="alias">Action alias.</param>
      <param name="from">Target to move from.</param>
      <param name="to">Target to move to.</param>
      <param name="direction">Jump direction.</param>
      <param name="isRelative">Whether the specified jump direction is relative to the start and end targets (true) or the world (false).</param>
      <param name="distance">Jump distance.</param>
      <param name="settings">Jump start and end settings.</param>
      <param name="travelSettings">Travel settings.</param>
      <param name="action">Jump action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Jump(HAL.Procedures.Procedure@,System.String,HAL.Motion.Settings.Target,HAL.Motion.Settings.Target,HAL.Spatial.Vector3D,System.Boolean,HAL.Spatial.Vector3D,System.Boolean,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings,HAL.Procedures.Procedure@)">
      <summary>Jump motion between two targets.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="alias">Action alias.</param>
      <param name="from">Target to move from.</param>
      <param name="to">Target to move to.</param>
      <param name="fromDirection">Jump start direction.</param>
      <param name="relativeFromDirection">Whether the specified jump start direction is relative to the start target (true) or the world (false).</param>
      <param name="toDirection">Jump end direction.</param>
      <param name="relativeToDirection">Whether the specified jump end direction is relative to the end target (true) or the world (false).</param>
      <param name="fromDistance">Jump start distance.</param>
      <param name="toDistance">Jump end distance.</param>
      <param name="fromSettings">Jump start settings.</param>
      <param name="travelSettings">Travel settings.</param>
      <param name="toSettings">Jump end settings.</param>
      <param name="action">Jump action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Jump(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Procedures.Procedure},HAL.Spatial.Vector3D,System.Boolean,HAL.Units.Length.Length,HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings,HAL.Procedures.Procedure@)">
      <summary>Jump motion between two procedures.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="alias">Action alias.</param>
      <param name="procedures">Actions between which jumps should be inserted.</param>
      <param name="direction">Jump direction.</param>
      <param name="isRelative">Whether the specified jump direction is relative to the start and end targets (true) or the world (false).</param>
      <param name="distance">Jump distance.</param>
      <param name="settings">Jump start and end settings.</param>
      <param name="travelSettings">Travel settings.</param>
      <param name="action">Jump action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Jump(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Procedures.Procedure},HAL.Spatial.Vector3D,System.Boolean,HAL.Spatial.Vector3D,System.Boolean,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings,HAL.Motion.Settings.MotionSettings,HAL.Procedures.Procedure@)">
      <summary>Jump motion between two procedures.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="alias">Action alias.</param>
      <param name="procedures">Actions between which jumps should be inserted.</param>
      <param name="fromDirection">Jump start direction.</param>
      <param name="relativeFromDirection">Whether the specified jump start direction is relative to the start target (true) or the world (false).</param>
      <param name="toDirection">Jump end direction.</param>
      <param name="relativeToDirection">Whether the specified jump end direction is relative to the end target (true) or the world (false).</param>
      <param name="fromDistance">Jump start distance.</param>
      <param name="toDistance">Jump end distance.</param>
      <param name="fromSettings">Jump start settings.</param>
      <param name="travelSettings">Travel settings.</param>
      <param name="toSettings">Jump end settings.</param>
      <param name="action">Jump action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.GetProperties(HAL.Procedures.Actions.MotionAction,HAL.Motion.Settings.MotionSettings@,HAL.Motion.Settings.MotionSettings@,HAL.Motion.Settings.SyncSettings@,HAL.Motion.Geometry.MotionGeometry@,HAL.Motion.Geometry.MotionGeometry@,HAL.Motion.Planning.MotionTimeline@,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings@)">
      <summary>Retrieves motion action properties.</summary>
      <param name="motion">Motion action to retrieve properties from.</param>
      <param name="settings">Motion settings.</param>
      <param name="solvedSettings">Solved settings.</param>
      <param name="sync">Synchronization settings.</param>
      <param name="geometry">Motion geometry.</param>
      <param name="masterGeometry">Master motion geometry.</param>
      <param name="timeline">Motion time-line.</param>
      <param name="solverSettings">Inverse solver settings.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.MotionAction" />.</summary>
      <param name="alias">Action alias.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.MotionAction" /> and automatically assigns it as a child of a specified <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <param name="parent">The parent <see cref="T:HAL.Procedures.Actions.Action" /> in the procedure followed by this <see cref="T:HAL.Procedures.Actions.MotionAction" />.</param>
      <param name="procedure">The <see cref="T:HAL.Procedures.Procedure" /> to which this new action should be added.</param>
      <param name="alias">Action alias.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.#ctor(HAL.Objects.Mechanisms.Mechanism,HAL.Motion.Settings.Target,HAL.Motion.Settings.MotionSettings,System.String)">
      <summary>Creates a new motion action.</summary>
      <param name="actor">Actor of the action.</param>
      <param name="target">Target of the action.</param>
      <param name="settings">Settings of the action.</param>
      <param name="alias">Action alias.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Actor">
      <summary>Mechanism to be controlled by this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Settings">
      <summary>Motion settings.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Sync">
      <summary>Synchronization settings for this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Duration">
      <summary>Execution duration of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.NotificationLevel">
      <summary>Notification severity level of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Notifications">
      <inheritdoc />
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.IsSynchronous">
      <summary>True if the action is synchronized with another.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.IsTimeConstrained">
      <summary>True if the action is constrained with a specified duration and an acceleration.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.IsSolved">
      <summary>Whether this <see cref="T:HAL.Procedures.Actions.Action" /> has all the necessary properties to be executed.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Geometry">
      <summary>Geometry of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.Timeline">
      <summary>Motion time line.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.SolvedSettings">
      <summary>Solved motion settings, corresponding to the simulated behavior of the device.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.MotionAction.InverseSolverSettings">
      <summary>Solver settings corresponding to the desired kinematic constraints of the mechanism and target.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Clone">
      <summary>Creates a duplicate of this action in the given parent graph.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this triggerable is triggered or executed.</summary>
      <returns>True on successful execution.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.ApplyStateAt(HAL.Units.Time.s,System.Boolean,HAL.Motion.Geometry.MotionGeometry,HAL.Kinematics.Solvers.Inverse.InverseSolverSettings)">
      <summary>Applies the trajectory state at the specified time.</summary>
      <param name="time">The time, relative to the start of this action, that should be set.</param>
      <param name="solve">Whether inverse kinematics should be solved for this state.</param>
      <param name="geometry">If the inverse kinematics must be solved, geometry of the motion. The position on the geometric path will be interpolated otherwise.</param>
      <param name="inverseSolverSettings">Inverse solver settings.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.Plan(HAL.Motion.Planning.SequenceMotionPlanner,HAL.Motion.Planning.PlanningStep)">
      <summary>Plans the execution of this <see cref="T:HAL.Procedures.Actions.Action" /> on a specified step.</summary>
      <remarks>Called when the parent <see cref="T:HAL.Procedures.Procedure" />'s execution is being planned.</remarks>
      <param name="planner">Planner in charge of the planning of this action.</param>
      <param name="step">Planning step to complete.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.MotionAction.ResetPlanning">
      <inheritdoc />
    </member>
    <member name="T:HAL.Procedures.Actions.ObjectGraphAction">
      <summary>An action that modifies the session graph. Typically this will be modifications such as connecting or disconnected objects with different connection properties.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ObjectGraphAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ObjectGraphAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.#ctor(HAL.Objects.ObjectGraph,HAL.Procedures.Actions.GraphOperation,HAL.Objects.Reference,HAL.Objects.IObjectGraphVertex[])">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ObjectGraphAction" />.</summary>
      <param name="graph">Graph hosting the objects to manipulate.</param>
      <param name="operation">Desired operation.</param>
      <param name="parent">Parent part.</param>
      <param name="locationOnParent">Link location relative to the parent part.</param>
      <param name="children">Children parts being attached or detached to/from the parent.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.ObjectGraphAction.Settings">
      <summary>The settings for this action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this Triggerable is triggered or executed</summary>
      <param name="visitor">Graph visitor.</param>
      <returns>Successful execution</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.Execute(HAL.Procedures.ProcedureVisitor,System.Collections.Generic.List{HAL.Objects.IObjectGraphVertex}@,System.Collections.Generic.List{HAL.Objects.IObjectGraphEdge}@)">
      <summary>Executes this action and returns the modified elements.</summary>
      <param name="visitor">Visitor requesting the execution.</param>
      <param name="modifiedVertices">Modified graph vertices.</param>
      <param name="modifiedEdges">Modified graph edges. </param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphAction.Clone">
      <summary>Creates a duplicate of this action in the given parent graph.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.ObjectGraphActionSettings">
      <summary>Stores all of the settings necessary for an Object Graph Action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphActionSettings.#ctor(HAL.Procedures.Actions.ObjectGraphActionSettings)">
      <summary>Creates a set of object graph action settings from an existing one.</summary>
      <param name="clonee">Existing settings.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphActionSettings.#ctor(HAL.Objects.ObjectGraph,HAL.Procedures.Actions.GraphOperation,HAL.Objects.Reference,HAL.Objects.IObjectGraphVertex[])">
      <summary>Creates a set of object graph action settings.</summary>
      <param name="graph">Graph hosting the objects to manipulate.</param>
      <param name="operation">Desired operation.</param>
      <param name="parent">Parent part.</param>
      <param name="children">Children parts being attached or detached to/from the parent.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.ObjectGraphActionSettings.Graph">
      <summary>Graph hosting the objects to manipulate.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ObjectGraphActionSettings.Operation">
      <summary>Desired operation.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ObjectGraphActionSettings.Parent">
      <summary>Parent part.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ObjectGraphActionSettings.Children">
      <summary>Children parts being attached or detached to/from the parent.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ObjectGraphActionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ObjectGraphActionSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.GraphOperation">
      <summary>Defines the different ways an action can manipulate a Graph.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.GraphOperation.Connect">
      <summary>Indicates that a link should be created in the graph.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.GraphOperation.Disconnect">
      <summary>Indicates that a link should be broken in the graph.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.GraphOperationDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.GraphOperationDescriptions.Description(HAL.Procedures.Actions.GraphOperation)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.SignalAction">
      <summary>Action to control IO signals both on the signal level and the unit level via the signal's parent unit.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.Digital(HAL.Procedures.Procedure@,System.String,HAL.Communications.ElectricSignal,HAL.Procedures.Actions.SignalEffect,System.Boolean,HAL.Procedures.Procedure@)">
      <summary>Changes the state of a digital output electric signal.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="signal">Signal to be modified.</param>
      <param name="effect">Desired effect.</param>
      <param name="state">State to set to this signal if Effect = Set.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.Digital(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Communications.ElectricSignal},HAL.Procedures.Actions.SignalEffect,System.Collections.Generic.List{System.Boolean},HAL.Procedures.Procedure@)">
      <summary>Changes the state of multiple digital output signals.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="signal">Signals to be modified.</param>
      <param name="effect">Desired effect for each signal.</param>
      <param name="state">State to set to each signal, only taken into account if Effect = Set.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.Analog(HAL.Procedures.Procedure@,System.String,HAL.Communications.ElectricSignal,HAL.Procedures.Actions.SignalEffect,HAL.Units.Electrical.ElectricTension,HAL.Procedures.Procedure@)">
      <summary>Changes the tension of an analog output electric signal.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="signal">Signal to be modified.</param>
      <param name="effect">Desired effect.</param>
      <param name="tension">Tension to set to this signal if Effect = Set.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.Analog(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Communications.ElectricSignal},HAL.Procedures.Actions.SignalEffect,System.Collections.Generic.List{HAL.Units.Electrical.ElectricTension},HAL.Procedures.Procedure@)">
      <summary>Changes the tension of multiple analog output electric signals.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="signal">Signals to be modified.</param>
      <param name="effect">Desired effect for each signal.</param>
      <param name="tension">Tension to set to each signal, only taken into account if Effect = Set.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.#ctor">
      <summary>Default, empty constructor for (de)serialization.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.SignalAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.SignalAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.SignalAction.Settings">
      <summary>The <see cref="T:HAL.Communications.ElectricSignal">Signal</see> upon which this action should act.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this is triggered or executed.</summary>
      <returns>Successful execution</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalAction.Clone">
      <summary>Creates a duplicate of this action.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.SignalActionSettings">
      <summary>Stores all of the settings necessary for an IO Action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalActionSettings.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalActionSettings.#ctor(HAL.Communications.ElectricSignal,HAL.Procedures.Actions.SignalEffect,HAL.Units.Electrical.ElectricTension)">
      <summary>Copy constructor.</summary>
      <param name="signal">The <see cref="T:HAL.Communications.ElectricSignal" /> upon which this action should act.</param>
      <param name="effect">The effect this action should have on the <see cref="T:HAL.Communications.ElectricSignal">Signal</see>. See <see cref="T:HAL.Procedures.Actions.SignalEffect" /> for options.</param>
      <param name="tension">The tension the <see cref="T:HAL.Communications.ElectricSignal" /> should take if <see cref="F:HAL.Procedures.Actions.SignalEffect.Set" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalActionSettings.#ctor(HAL.Procedures.Actions.SignalActionSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">The settings to clone.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.SignalActionSettings.SignalEffect">
      <summary>The effect this action should have on the <see cref="T:HAL.Communications.ElectricSignal">Signal</see>. See <see cref="T:HAL.Procedures.Actions.SignalEffect" /> for options.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.SignalActionSettings.Signal">
      <summary>The <see cref="T:HAL.Communications.ElectricSignal" /> upon which this action should act.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.SignalActionSettings.Tension">
      <summary>The tension the <see cref="T:HAL.Communications.ElectricSignal" /> should take if <see cref="F:HAL.Procedures.Actions.SignalEffect.Set" />.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.SignalActionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalActionSettings.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.SignalEffect">
      <summary>Enumerates the different effects that an action can have upon a Signal</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.SignalEffect.Get">
      <summary>Returns the current signal state.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.SignalEffect.Set">
      <summary>Sets the signal's state to that specified.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.SignalEffect.SetToDefault">
      <summary>Reverts a signal's state to its default.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.SignalEffect.Invert">
      <summary>Inverses the value of a digital signal.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.SignalEffectDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SignalEffectDescriptions.Description(HAL.Procedures.Actions.SignalEffect)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.SynchronizableAction">
      <summary>Marks an action as synchronizable i.e. it can be synchronized with another action</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SynchronizableAction.#ctor">
      <summary>Default, empty constructor for deserialization.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.SynchronizableAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.SynchronizableAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SynchronizableAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.SynchronizableAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.SynchronizableAction.#ctor(HAL.Procedures.Actions.SynchronizableAction,System.Boolean)">
      <summary>Clones an existing <see cref="T:HAL.Procedures.Actions.Action" /> and adds it to the given parent graph.</summary>
      <param name="clonee">The vertex to be cloned.</param>
      <param name="keepIdentity">Whether the identity of the cloned action should be kept by the clone.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.SynchronizableAction.Sync">
      <summary>Synchronization settings for this action.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.ThreadAction">
      <summary>Action to control the execution of a thread, typically sleeping or waking it.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.Wait(HAL.Procedures.Procedure@,System.String,HAL.Units.Time.Time,HAL.Procedures.Procedure@)">
      <summary>Temporarily pauses the procedure.</summary>
      <param name="instance">Existing instance.</param>
      <param name="alias">Action alias.</param>
      <param name="duration">Waiting duration.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.#ctor">
      <summary>Default, empty constructor for deserialization.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.#ctor(HAL.Procedures.Actions.ThreadEffect,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ThreadAction">ThreadAction</see> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure">actionGraph</see> given.</summary>
      <param name="effect">The effect this action should have on the thread. See <see cref="T:HAL.Procedures.Actions.ThreadEffect" /> for options.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,HAL.Procedures.Actions.ThreadEffect,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ThreadAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="effect">The effect this action should have on the thread. See <see cref="T:HAL.Procedures.Actions.ThreadEffect" /> for options.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.#ctor(HAL.Units.Time.Time,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ThreadAction" /> that sleeps until a given time has elapsed.</summary>
      <param name="sleepTime">The time that this action should sleep the thread for.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,HAL.Units.Time.Time,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.ThreadAction" /> that sleeps until a given time has elapsed.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="sleepTime">The time that this action should sleep the thread for.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.ThreadAction.Settings">
      <summary>The settings used for this Thread Action.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ThreadAction.Duration">
      <summary>Execution duration of this action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this Triggerable is triggered or executed.</summary>
      <returns>Successful execution.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadAction.Clone">
      <summary>Creates a duplicate of this action.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.ThreadActionSettings">
      <summary>Stores all of the settings necessary for a Thread Action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadActionSettings.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadActionSettings.#ctor(HAL.Procedures.Actions.ThreadActionSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.ThreadActionSettings.ThreadEffect">
      <summary>The effect this action should have on the thread. See <see cref="T:HAL.Procedures.Actions.ThreadEffect" /> for options.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ThreadActionSettings.WakeType">
      <summary>Returns the type of trigger that will be used to wake the thread. See <see cref="T:HAL.Procedures.Actions.ThreadWake" /> for options.</summary>
    </member>
    <member name="P:HAL.Procedures.Actions.ThreadActionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadActionSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.ThreadEffect">
      <summary>Determines what should be done to the thread execution.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.ThreadEffect.Sleep">
      <summary>Indicates that the execution of the thread will be paused.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.ThreadEffect.Wake">
      <summary>Indicates that the execution of the thread will be continued.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.ThreadEffectDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.ThreadEffectDescriptions.Description(HAL.Procedures.Actions.ThreadEffect)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Procedures.Actions.ThreadWake">
      <summary>Defines the way in which a Thread should be woken.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.ThreadWake.Unset">
      <summary>Indicates that this has not been properly set yet.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.ThreadWake.Time">
      <summary>Indicates that the thread will be woken after a fixed amount of time.</summary>
    </member>
    <member name="F:HAL.Procedures.Actions.ThreadWake.Event">
      <summary>Indicates that the thread will be woken by an event.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.TriggerAction">
      <summary>Action that sets up a new transition with a connection to an event.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.#ctor">
      <summary>Default, empty constructor for (de)serialization. </summary>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.#ctor(System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.TriggerAction" /> and automatically assigns it to the <see cref="T:HAL.Procedures.Procedure" /> given.</summary>
      <param name="name">Action name.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,System.String)">
      <summary>Creates a new <see cref="T:HAL.Procedures.Actions.TriggerAction" /> and automatically assigns it as a child of the given parent vertex.</summary>
      <param name="parentVertex">The vertex in the parent graph that this should be assigned to.</param>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="name">Action name.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.TriggerAction.Settings">
      <summary>The settings necessary for this Trigger Action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.GetTarget(HAL.Procedures.ActionGraph)">
      <summary>Gets the Target that should be executed upon the triggering of the event.</summary>
      <param name="actionGraph">The graph to which this new action should be added.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.SetTarget(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure)">
      <summary>Sets the Target that should be executed upon the triggering of the event.</summary>
      <param name="actionGraph">The graph to which this new action should be added.</param>
      <param name="target">The <see cref="T:HAL.Procedures.Actions.Action" /> that should be executed.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.InitializePlanning(HAL.Procedures.ProcedureVisitor)">
      <summary>Initializes the planning of this <see cref="T:HAL.Procedures.Actions.Action" />.</summary>
      <remarks>Called when the host <see cref="T:HAL.Procedures.Procedure" /> is split into sequences of continuous actions.</remarks>
      <param name="visitor">
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> sequencing the <see cref="T:HAL.Procedures.Procedure" />.</param>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this Triggerable is triggered or executed.</summary>
      <returns>Successful execution</returns>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerAction.Clone">
      <summary>Creates a duplicate of this action.</summary>
    </member>
    <member name="T:HAL.Procedures.Actions.TriggerActionSettings">
      <summary>Stores all of the settings necessary for a Trigger Action.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerActionSettings.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerActionSettings.#ctor(HAL.Procedures.Actions.TriggerActionSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to be cloned.</param>
    </member>
    <member name="P:HAL.Procedures.Actions.TriggerActionSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.Actions.TriggerActionSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Procedures.Applications.Prehension.Prehension.Take(HAL.Procedures.Procedure@,HAL.Objects.Mechanisms.Tools.Grasping.Gripper,HAL.Objects.Parts.Part,HAL.Procedures.Procedure,HAL.Procedures.Procedure@)">
      <summary>Takes a part.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="gripper">Gripper taking the part.</param>
      <param name="part">Part being taken.</param>
      <param name="procedure">Procedure executed to actuate the gripper.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="M:HAL.Procedures.Applications.Prehension.Prehension.Release(HAL.Procedures.Procedure@,HAL.Objects.Mechanisms.Tools.Grasping.Gripper,HAL.Objects.Parts.Part,HAL.Procedures.Procedure,HAL.Procedures.Procedure@)">
      <summary>Releases a part.</summary>
      <param name="instance">Existing instance of this action.</param>
      <param name="gripper">Gripper releasing the part.</param>
      <param name="part">Part being released.</param>
      <param name="procedure">Procedure executed to actuate the gripper.</param>
      <param name="action">Resulting action.</param>
    </member>
    <member name="T:HAL.Procedures.EvaluableEdgeSettings">
      <summary>Contains the settings for an evaluable action graph edge.</summary>
    </member>
    <member name="M:HAL.Procedures.EvaluableEdgeSettings.#ctor(HAL.Procedures.EvaluableEdgeSettings)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Settings to clone.</param>
    </member>
    <member name="P:HAL.Procedures.EvaluableEdgeSettings.IsValid">
      <summary>Ensures these settings are complete or a compatible subset are.</summary>
    </member>
    <member name="M:HAL.Procedures.EvaluableEdgeSettings.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Procedures.IProcedureEntity">
      <summary>Indicates that this is either an edge or vertex in an action graph.</summary>
    </member>
    <member name="T:HAL.Procedures.IProcedureVertex">
      <summary>Qualifies an action.</summary>
    </member>
    <member name="T:HAL.Procedures.ITriggerable">
      <summary>Generic interface to be implemented by anything that needs to be called by an event.</summary>
    </member>
    <member name="M:HAL.Procedures.ITriggerable.Execute(HAL.Procedures.ProcedureVisitor)">
      <summary>The method called when this Triggerable is triggered or executed</summary>
      <returns>Successful execution</returns>
    </member>
    <member name="T:HAL.Procedures.Procedure">
      <summary>Graph of <see cref="T:HAL.Procedures.Actions.Action" />, handling <see cref="T:HAL.Procedures.Actions.ActionSet" />s and flow control between them using <see cref="T:HAL.Procedures.ProcedureEdge" />s.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.Combine(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Procedures.Procedure},System.Boolean,HAL.Procedures.Procedure@)">
      <summary>Combines multiple actions into a single one.</summary>
      <param name="instance">Existing instance of the combined action.</param>
      <param name="alias">Alias of the resulting action.</param>
      <param name="combined">Actions to be fused into a single one.</param>
      <param name="compact">Whether the combined action structure should be simplified.</param>
      <param name="action">Combined actions.</param>
    </member>
    <member name="M:HAL.Procedures.Procedure.Combine(HAL.Procedures.Procedure@,System.String,System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Boolean,HAL.Procedures.Procedure@)">
      <summary>Combines multiple actions into a single one.</summary>
      <param name="instance">Existing instance of the combined action.</param>
      <param name="alias">Alias of the resulting action.</param>
      <param name="combined">Actions to be fused into a single one.</param>
      <param name="simulation">Combined procedure simulation override.</param>
      <param name="compact">Whether the combined action structure should be simplified.</param>
      <param name="action">Combined actions.</param>
    </member>
    <member name="M:HAL.Procedures.Procedure.#ctor">
      <summary>Creates a default <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.#ctor(HAL.Procedures.Actions.Action,HAL.Identifier)">
      <summary>Creates an <see cref="T:HAL.Procedures.Procedure" /> with the given vertex as the root and the given <see cref="T:HAL.Procedures.ProcedureVisitor" /> as the visitor.</summary>
      <param name="root">Root vertex.</param>
      <param name="identity">Graph identity.</param>
    </member>
    <member name="M:HAL.Procedures.Procedure.#ctor(System.Collections.Generic.List{HAL.Procedures.Procedure},HAL.Identifier,System.Boolean)">
      <summary>Creates an <see cref="T:HAL.Procedures.Procedure" /> from existing ones.</summary>
      <param name="graphs">Existing <see cref="T:HAL.Procedures.Procedure" />s.</param>
      <param name="identity">Graph identity.</param>
      <param name="flatten">Whether all graphs should be added to the same root <see cref="T:HAL.Procedures.Actions.ActionSet" />.</param>
    </member>
    <member name="P:HAL.Procedures.Procedure.Visitor">
      <summary>
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> assigned to this <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="P:HAL.Procedures.Procedure.IsSolved">
      <summary>Indicates whether this graph is solved.</summary>
    </member>
    <member name="P:HAL.Procedures.Procedure.SimulationGraph">
      <summary>Simulation-ready format of this <see cref="T:HAL.Procedures.Procedure" /> for visualization and simulation.</summary>
    </member>
    <member name="P:HAL.Procedures.Procedure.HasExplicitExecution">
      <summary>Whether this procedure has an explicit execution. Returns false in the presence of loops or conditions.</summary>
    </member>
    <member name="P:HAL.Procedures.Procedure.DependsOnOtherProcedures">
      <summary>Whether this procedure has dependencies on other procedures (multi-robot task, etc.).</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.AddVertex(HAL.Procedures.Actions.Action)">
      <summary>Adds a vertex to the graph if it does not already exist.</summary>
      <param name="vertex">The vertex to add.</param>
      <returns>Successful addition of this vertex.</returns>
    </member>
    <member name="M:HAL.Procedures.Procedure.AddEdge(HAL.Procedures.ProcedureEdge)">
      <summary>Adds the edge to the graph.</summary>
      <param name="edge">The edge to be added to the graph.</param>
      <returns>true if the edge was added, otherwise false.</returns>
    </member>
    <member name="M:HAL.Procedures.Procedure.RemoveEdge(HAL.Procedures.ProcedureEdge)">
      <summary>Removes the edge from the graph.</summary>
      <param name="edge">The edge to be removed from the graph.</param>
      <returns>true if the edge was removed, otherwise false.</returns>
    </member>
    <member name="M:HAL.Procedures.Procedure.UpdateSimulationGraph(System.Boolean,HAL.Procedures.Procedure,System.Boolean,HAL.Motion.Planning.SolvingSettings)">
      <summary>Updates or creates the conversion of this to a simulation formatted graph that more closely resembles the executed trajectory.</summary>
      <param name="rebuild">Whether the simulation graph should be rebuilt.</param>
      <param name="priorInstance">Prior instance of this procedure to be reused when possible.</param>
      <param name="updatePath">Whether the path should be generated for this procedure.</param>
      <param name="solvingSettings">Solving settings.</param>
    </member>
    <member name="M:HAL.Procedures.Procedure.InitializeActions">
      <summary>Initializes all <see cref="T:HAL.Procedures.Actions.IInitializableAction" />s of the <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.ResetExecution">
      <summary>Resets the execution state of the <see cref="T:HAL.Procedures.Procedure" /> actions.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.ResetSolving">
      <summary>Resets the solving state of the <see cref="T:HAL.Procedures.Procedure" /> actions.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.TerminateActions">
      <summary>Terminates all <see cref="T:HAL.Procedures.Actions.IInitializableAction" />s of the <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.Execute">
      <summary>Executes this procedure.</summary>
    </member>
    <member name="M:HAL.Procedures.Procedure.Translate(HAL.Linguistics.Definition.LanguageIdentifier,System.String,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,HAL.Linguistics.Export.DeclarationMode)">
      <summary>Translates the procedure in the specified machine language.</summary>
      <param name="language">Target language.</param>
      <param name="path">Path where the translation should be stored.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="declaration">Declaration style of the translation.</param>
    </member>
    <member name="T:HAL.Procedures.ProcedureEdge">
      <summary>Represents an edge in the <see cref="T:HAL.Procedures.Procedure" /> which maintains the connectivity between <see cref="T:HAL.Procedures.Actions.Action" />s and the graphs flow control.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Actions.Action,HAL.Identifier)">
      <summary>Creates a new <see cref="T:HAL.Procedures.ProcedureEdge" />.</summary>
      <param name="source">The source for this edge.</param>
      <param name="target">The target of this edge.</param>
      <param name="identifier">The identifier for this edge.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.#ctor(HAL.Procedures.Actions.Action,HAL.Procedures.Actions.Action,HAL.Identifier,HAL.Logic.IEvaluable,System.Boolean)">
      <summary>Creates a new <see cref="T:HAL.Procedures.ProcedureEdge" />.</summary>
      <param name="source">The source for this edge.</param>
      <param name="target">The target of this edge.</param>
      <param name="identifier">The identifier for this edge.</param>
      <param name="evaluable">The <see cref="T:HAL.Logic.IEvaluable" /> which should be evaluated prior to the execution of the target.</param>
      <param name="repeat">Whether this edge should repeat its content. Defaults to <c>false</c>.</param>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.Source">
      <summary>Gets the source vertex.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.Target">
      <summary>Gets the target vertex.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.EdgeType">
      <summary>Defines the type of edge that this is.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.EvaluationSettings">
      <summary>If this edge is <see cref="F:HAL.Procedures.ProcedureEdgeType.Conditional" />, the settings to determine whether the edge can be executed.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.Repeat">
      <summary>Whether this edge should repeat its content. Defaults to <c>false</c>.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.CodeBlock">
      <summary>The code block that is derived from this exportable code element.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.PropertyCodeBlocks">
      <summary>The code blocks for each property of this action.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.Identity">
      <summary>Object identity.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.Ordinal">
      <summary>An index defining the position of this in a series of other connections.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.IsDefaultRootConnection">
      <summary>Defines whether this is an automatically generated root connection.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureEdge.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.ToString">
      <summary>Returns the string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.Equals(HAL.IIdentifiable)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.CloneEdge">
      <summary>Creates a new connection with all the same properties as the original.</summary>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.CloneEdgeTo(HAL.Procedures.Actions.Action,HAL.Procedures.Actions.Action,System.Boolean)">
      <summary>Creates a new connection with the same properties as the original but a new source and target.</summary>
      <param name="source">Source vertex.</param>
      <param name="target">Target vertex.</param>
      <param name="retainGuid">Whether to retain the GUID or refresh it creating a clone of all other aspects.</param>
      <returns>A duplicate connection.</returns>
    </member>
    <member name="E:HAL.Procedures.ProcedureEdge.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureEdge.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Procedures.ProcedureEdgeType">
      <summary>Lists the available conditional arguments for the action graph edges execution.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureEdgeType.Unconditional">
      <summary>Unconditional execution.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureEdgeType.Conditional">
      <summary>Conditional execution.</summary>
    </member>
    <member name="T:HAL.Procedures.ProcedureManager">
      <summary>Manages procedures.</summary>
    </member>
    <member name="E:HAL.Procedures.ProcedureManager.ExecutionCompleted">
      <summary>Raised when all procedures have been executed.</summary>
    </member>
    <member name="E:HAL.Procedures.ProcedureManager.SolvingCompleted">
      <summary>Raised when all procedures have been solved.</summary>
    </member>
    <member name="E:HAL.Procedures.ProcedureManager.SolvingProgressed">
      <summary>Raised when the solving of at least on procedure has progressed.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.#ctor(HAL.Control.Controller)">
      <summary>Creates an empty procedure manager.</summary>
      <param name="controller">Controller hosting this procedure manager.</param>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.Procedures">
      <summary>Maintained procedures.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.Lock">
      <summary>Lock to be taken and released when the procedure collection need to be safely modified.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.LockRequestTimeOut">
      <summary>Lock request maximum duration.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.IsSolving">
      <summary>Whether procedures are currently being solved.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.SolvingSettings">
      <summary>Solving settings.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.SolvingProgress">
      <summary>Normalized solving progress for each procedure.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.IsExecuting">
      <summary>Whether procedures are currently being executed.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureManager.IsTranslating">
      <summary>Whether procedures are currently being translated.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.ConnectControl(HAL.Procedures.Procedure,HAL.Simulation.ExecutionControl)">
      <summary>Assigns an execution control managing the visit of a specified procedure.</summary>
      <param name="procedure">Procedure to assign the control to.</param>
      <param name="control">Execution control to assign.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.DisconnectControl(HAL.Procedures.Procedure)">
      <summary>Dissociates the execution control currently managing the visit of the specified procedure.</summary>
      <param name="procedure">Procedure to operate on.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Add(HAL.Procedures.Procedure,HAL.Control.IControllableObject)">
      <summary>Adds a procedure to maintain.</summary>
      <param name="procedure">Procedure to be added.</param>
      <param name="assignee">Controllable object executing this procedure, if any.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Remove(HAL.Procedures.Procedure)">
      <summary>Removes a procedure from this manager.</summary>
      <param name="procedure">Procedure to be removed.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.CancelAll">
      <summary>Cancels any operation (solving, execution or translation) being currently supervised.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Clear">
      <summary>Empties the manager from all its procedures.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Solve(HAL.Motion.Planning.SolvingSettings)">
      <summary>Solves all procedures.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.CancelSolution">
      <summary>Cancels the solving of the procedures.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.ResetSolving">
      <summary>Re-initializes the solving of the procedures.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Execute">
      <summary>Runs all procedures.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.CancelExecution">
      <summary>Cancels the execution of the procedures.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Translate(HAL.Linguistics.Definition.LanguageIdentifier,System.String,System.Threading.CancellationToken,HAL.Tasks.BackgroundProgress,HAL.Linguistics.Export.DeclarationMode)">
      <summary>Translates all procedures into executable program files.</summary>
      <param name="language">Target language.</param>
      <param name="path">Path where the translation should be stored.</param>
      <param name="cancel">Cancellation token.</param>
      <param name="progress">Progress reporter.</param>
      <param name="declaration">Declaration style.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureManager.Dispose">
      <inheritdoc />
    </member>
    <member name="T:HAL.Procedures.ProcedureVisit">
      <summary>
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> behavior options.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisit.Sequencing">
      <summary>Visits the <see cref="T:HAL.Procedures.Procedure" /><see cref="T:HAL.Procedures.Actions.Action" />s and detects sequences of continuous motion.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisit.Execute">
      <summary>Executes the <see cref="T:HAL.Procedures.Procedure" />'s <see cref="T:HAL.Procedures.Actions.Action" />s.</summary>
    </member>
    <member name="T:HAL.Procedures.ProcedureVisitor">
      <summary>Solves or execute a <see cref="T:HAL.Procedures.Procedure" /> by visiting it.</summary>
    </member>
    <member name="E:HAL.Procedures.ProcedureVisitor.ExecutionStep">
      <summary>Raised when the visitor steps in <see cref="F:HAL.Procedures.ProcedureVisit.Execute">execution</see> mode.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.ClearExecutionStepSubscriptions">
      <summary>Removes any subscription to <see cref="E:HAL.Procedures.ProcedureVisitor.ExecutionStep" />.</summary>
    </member>
    <member name="E:HAL.Procedures.ProcedureVisitor.SequencingStep">
      <summary>Raised when the visitor steps in <see cref="F:HAL.Procedures.ProcedureVisit.Sequencing">motion sequencing</see> mode.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.ClearSequencingStepSubscriptions">
      <summary>Removes any subscription to <see cref="E:HAL.Procedures.ProcedureVisitor.ExecutionStep" />.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.Procedure">
      <summary>Visited procedure.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.SimulationGraph">
      <summary>Visited simulation graph.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.Mode">
      <summary>Procedure visit mode.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.IsSilent">
      <summary>Whether the visitor should act silently, without notifying subscribers.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.SolveKinematicsWhileExecuting">
      <summary>Whether the inverse kinematics solver should be called when the visitor executes a motion action.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.Loop">
      <summary>Whether the visitor will reset at the end of its execution and start again.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.ExecutionControl">
      <summary>The controller to which this visitor is subscribed and which will control its simulation.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.TimeRatio">
      <summary>Execution time/real time ratio.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.UseRealTime">
      <summary>Whether this visitor should attempt to compensate execution lag to simulate real time execution.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.State">
      <summary>Indicates the current state of the visit.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.CurrentAction">
      <summary>Action currently being visited.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.VisitedActions">
      <summary>Visit history, excluding the currently visited action.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.CurrentActionStartTime">
      <summary>Start time of the action currently being visited.</summary>
    </member>
    <member name="P:HAL.Procedures.ProcedureVisitor.CurrentVisitTime">
      <summary>Visit time, as the currently elapsed duration since the start of the visit.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.SwapExecutionControl(HAL.Simulation.ExecutionControl)">
      <summary>Replaces the visitor execution control with a specified one.</summary>
      <param name="control">New control to link this visitor with.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.UnlinkExecutionControl">
      <summary>Unlinks this visitor from its current simulation control.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.LinkExecutionControl">
      <summary>Links this visitor to its current simulation control.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.IsRunning(HAL.Procedures.Actions.Action)">
      <summary>Checks whether the action specified is currently being executed, either directly or as a child of the currently running action.</summary>
      <param name="action">The action to test.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.Run">
      <summary>Starts the visit.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.Stop">
      <summary>Stops the visit.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.Reset(System.Boolean)">
      <summary>Resets the visit.</summary>
      <param name="terminate">Whether the reset should terminate the visit.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.ExpireKinematicActor">
      <summary>Marks the kinematic actor as expired and forces its recalculation at the next use.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.Execute">
      <summary>Executes the visitor's <see cref="P:HAL.Procedures.ProcedureVisitor.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.Execute(HAL.Procedures.Actions.Action)">
      <summary>Executes the visitor's <see cref="P:HAL.Procedures.ProcedureVisitor.Procedure" /> from the specified initial action.</summary>
      <param name="action">Initial action.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.SkipTo(HAL.Procedures.Actions.Action)">
      <summary>Restarts the visit and skip notifications until the specified action is reached.</summary>
      <param name="action">Action until which the visit notifications should be skipped.</param>
    </member>
    <member name="M:HAL.Procedures.ProcedureVisitor.Dispose(System.Boolean)">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:HAL.Procedures.ProcedureVisitorState">
      <summary>Indicates the current state of a graph visitor.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisitorState.Running">
      <summary>Indicates that the visitor is currently running.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisitorState.Jumping">
      <summary>Indicates that the visitor is currently jumping.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisitorState.Stopped">
      <summary>Indicates that the visitor is not currently running.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisitorState.Complete">
      <summary>Indicates that the visitor completed its last run successfully.</summary>
    </member>
    <member name="F:HAL.Procedures.ProcedureVisitorState.Aborted">
      <summary>Indicates that the visitor was aborted during its last run.</summary>
    </member>
    <member name="T:HAL.Procedures.SimulationGraph">
      <summary>Maintains an action graph as a simulation formatted graph that more closely resembles the executed trajectory.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.ActionMap">
      <summary>Maintains a reference from the actions in the original programming graph to their simulation counterparts.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.Motions">
      <summary>Ordered options of the simulation graph.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.MotionRegister">
      <summary>Motions of the simulation graph, registered by their identities.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.Structure">
      <summary>Simulation graph structure, as a dictionary of action set content. Keys are procedure actions sets, values are simulated actions AND child procedure action sets.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.MotionPlanner">
      <summary>Motion planner associated to this simulation graph.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.Visitor">
      <summary>
        <see cref="T:HAL.Procedures.ProcedureVisitor" /> assigned to this <see cref="T:HAL.Procedures.SimulationGraph" />.</summary>
    </member>
    <member name="P:HAL.Procedures.SimulationGraph.IsSolved">
      <summary>Indicates whether this graph is solved.</summary>
    </member>
    <member name="M:HAL.Procedures.SimulationGraph.AddChildren(HAL.Procedures.Actions.Action,HAL.Procedures.Procedure,HAL.Procedures.Actions.Action@,HAL.Procedures.Actions.ActionSet@,HAL.Motion.Planning.PlanningStep@,System.Collections.Generic.Dictionary{HAL.Procedures.Actions.Action,System.Collections.Generic.List{HAL.Procedures.Actions.Action}}@,HAL.Procedures.Procedure)">
      <summary>Recursively builds the simulation graph content from a specified procedure action.</summary>
      <param name="from">Procedure action to start from.</param>
      <param name="procedure">Parent procedure.</param>
      <param name="precedingAction">Preceding simulated action.</param>
      <param name="parentSet">Parent procedure action set being processed.</param>
      <param name="precedingActionPlanningRequest">If the previously extracted simulated action emitted a request to expire the planning of the next extracted action, planning step to be expired.</param>
      <param name="cloneMap">Clone map, such as [procedure action, [simulated actions]].</param>
      <param name="priorProcedure">Prior parent procedure instance, if any.</param>
    </member>
    <member name="M:HAL.Procedures.SimulationGraph.CleanActionSets">
      <summary>Removes extraneous action sets within this graph.</summary>
    </member>
    <member name="M:HAL.Procedures.SimulationGraph.AddVertex(HAL.Procedures.Actions.Action)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Procedures.SimulationGraph.RemoveVertex(HAL.Procedures.Actions.Action)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Procedures.SimulationGraph.GetNext``1(HAL.Procedures.Actions.Action,System.Collections.Generic.List{HAL.Procedures.Actions.Action},System.Func{HAL.Procedures.ProcedureEdge,System.Boolean})">
      <summary>Finds the first vertex of type TType after the base action given. Will return null if there is no vertex that fits this definition.</summary>
      <param name="vertex">The vertex from which to search.</param>
      <param name="exemptVertices">Optionally, Vertices that should be skipped over during the search.</param>
      <param name="edgeValidator">Function to validate an edge in searches. If <c>null</c> all edges are considered valid.</param>
      <typeparam name="TType">The type of vertex to search for. </typeparam>
    </member>
    <member name="M:HAL.Procedures.SimulationGraph.GetPrevious``1(HAL.Procedures.Actions.Action,System.Collections.Generic.List{HAL.Procedures.Actions.Action},System.Func{HAL.Procedures.ProcedureEdge,System.Boolean})">
      <summary>Finds the first vertex of type TType prior to the base vertex given. Will return null if there is no vertex that fits this definition.</summary>
      <param name="vertex">The vertex from which to search.</param>
      <param name="exemptVertices">Optionally, Vertices that should be skipped over during the search.</param>
      <param name="edgeValidator">Function to validate an edge in searches. If <c>null</c> all edges are considered valid.</param>
      <typeparam name="TType">The type of vertex to search for. </typeparam>
    </member>
    <member name="T:HAL.Reflection.AssemblyContent">
      <summary>Assembly content.</summary>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.#ctor(System.Reflection.Assembly)">
      <summary>Wraps the content of a specified assembly.</summary>
      <param name="assembly">Assembly.</param>
    </member>
    <member name="P:HAL.Reflection.AssemblyContent.Assembly">
      <summary>Assembly.</summary>
    </member>
    <member name="P:HAL.Reflection.AssemblyContent.Types">
      <summary>Assembly types, registered by their name.</summary>
    </member>
    <member name="P:HAL.Reflection.AssemblyContent.FullyQualifiedTypes">
      <summary>Assembly types, registered by their fully qualified name.</summary>
    </member>
    <member name="P:HAL.Reflection.AssemblyContent.Attributes">
      <summary>Attributes found on each assembly type, registered by type.</summary>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.Find(System.String)">
      <summary>Finds a type from its name.</summary>
      <param name="typeName">Type name to search for.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.Analyze">
      <summary>Analyzes the assembly.</summary>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.ThreadSafeRegister(System.Type)">
      <summary>Registers the specified type from the client main thread.</summary>
      <param name="type">Type to register.</param>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.Register(System.Type)">
      <summary>Registers the specified type.</summary>
      <param name="type">Type to register.</param>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.AnalyzeType(System.Type,System.Attribute[])">
      <summary>Filters the type attributes via reflection.</summary>
      <param name="type">Analyzed type.</param>
      <param name="attributes">Type attributes.</param>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.InterpretTypeAttributes(System.Type,System.Attribute[])">
      <summary>Interprets attributes placed on the type.</summary>
      <param name="type">Analyzed type.</param>
      <param name="attributes">Type attributes.</param>
    </member>
    <member name="M:HAL.Reflection.AssemblyContent.InterpretMethodAttributes(System.Type)">
      <summary>Interprets the optional <see cref="T:HAL.Reflection.Attributes.FunctionAttribute" /> marking the methods of a type.</summary>
      <param name="type">Analyzed type.</param>
    </member>
    <member name="T:HAL.Reflection.ContentManager">
      <summary>Content manager.</summary>
    </member>
    <member name="P:HAL.Reflection.ContentManager.Assemblies">
      <summary>Registered assemblies.</summary>
    </member>
    <member name="P:HAL.Reflection.ContentManager.FunctionCategories">
      <summary>Categories of functions accessible via HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.ContentManager.GetAssemblyContent(System.Reflection.Assembly)">
      <summary>Retrieves the content of the specified assembly.</summary>
      <param name="assembly">Assembly to analyze.</param>
      <returns>Generated content information.</returns>
    </member>
    <member name="M:HAL.Reflection.ContentManager.Find(System.String,System.Type,System.Reflection.Assembly[])">
      <summary>Finds a type in the registered assemblies from its name.</summary>
      <param name="typeName">Type name to search for.</param>
      <param name="hint">Hint type.</param>
      <param name="assemblies">Assemblies in which to restrict the search.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="M:HAL.Reflection.ContentManager.Register(System.Reflection.Assembly)">
      <summary>Registers the specified assembly.</summary>
      <param name="assembly">Assembly to register.</param>
    </member>
    <member name="M:HAL.Reflection.ContentManager.RegisterConverter(System.Type)">
      <summary>Registers a converter type.</summary>
      <param name="type">Converter type.</param>
      <returns>Whether the registration was successful.</returns>
    </member>
    <member name="M:HAL.Reflection.ContentManager.FinalizeContentRegistration">
      <summary>Finalizes the content registration, allowing it to be accessible through the HAL client user interface.</summary>
      <remarks>This method should only be called once all assemblies, including extensions, are loaded.</remarks>
    </member>
    <member name="T:HAL.Reflection.Function">
      <summary>Function accessible from HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.Function.#ctor(System.Reflection.MethodBase,HAL.Reflection.Attributes.FunctionAttribute,System.Boolean,HAL.Reflection.Attributes.BackgroundAttribute)">
      <summary>Creates a new function.</summary>
      <param name="method">Method to be wrapped.</param>
      <param name="attribute">Attribute marking the method.</param>
      <param name="isObsolete">Whether the wrapped method is marked as obsolete.</param>
      <param name="backgroundAttribute">Background attribute marking the method, if any.</param>
    </member>
    <member name="M:HAL.Reflection.Function.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="P:HAL.Reflection.Function.Method">
      <summary>Marked method.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Parameters">
      <summary>Function parameters.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Inputs">
      <summary>Function input parameters.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Outputs">
      <summary>Function output parameters.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Cached">
      <summary>Cached parameters.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Rendered">
      <summary>Rendered parameters.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.ParameterIndex">
      <summary>Index of each parameter.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Attribute">
      <summary>Function attribute from which this function signature was generated, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.IsBackground">
      <summary>Whether this function can run in the background.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.Background">
      <summary>Background attribute, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.WorkEnablingParameter">
      <summary>Boolean input parameter toggling the background work execution.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.CancellationParameter">
      <summary>Cancellation token parameter being passed to the background running method.</summary>
    </member>
    <member name="P:HAL.Reflection.Function.ProgressParameter">
      <summary>Progress reporter parameter being passed to the background running method.</summary>
    </member>
    <member name="M:HAL.Reflection.Function.Invoke(System.Object,System.Object[])">
      <summary>Invokes a the method wrapped in this function.</summary>
      <param name="instance">Object instance on which this method is called, if any.</param>
      <param name="arguments">Arguments to be passed on the method.</param>
    </member>
    <member name="M:HAL.Reflection.Function.Equals(HAL.Reflection.Function)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Reflection.Function.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Reflection.Function.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:HAL.Reflection.FunctionCategory">
      <summary>Category of functions accessible from HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.FunctionCategory.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function category signature.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="M:HAL.Reflection.FunctionCategory.#ctor(HAL.Reflection.IIdentifiableSignature)">
      <summary>Creates a new function category signature.</summary>
      <param name="signature">Signature.</param>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Cell">
      <summary>Relates to cell objects edition features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Motion">
      <summary>Relates to motion programming features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Programming">
      <summary>Relates to programming features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Simulation">
      <summary>Relates to simulation features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Control">
      <summary>Relates to controller features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Supervision">
      <summary>Relates to supervision features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Maintenance">
      <summary>Relates to maintenance features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionCategory.Utilities">
      <summary>Relates to miscellaneous utility features.</summary>
    </member>
    <member name="T:HAL.Reflection.FunctionSet">
      <summary>Set of functions available from HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.FunctionSet.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String,System.Nullable{System.Guid})">
      <summary>Creates a new function set signature.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
      <param name="parentId">Parent set identity, if any.</param>
    </member>
    <member name="M:HAL.Reflection.FunctionSet.#ctor(HAL.Reflection.IIdentifiableSignature)">
      <summary>Creates a new function set signature.</summary>
      <param name="signature">Signature.</param>
    </member>
    <member name="P:HAL.Reflection.FunctionSet.ParentIdentity">
      <summary>Parent set identity, if any.</summary>
    </member>
    <member name="M:HAL.Reflection.FunctionSet.GetFirstFunction(System.Collections.Generic.IEnumerable{HAL.Reflection.IdentifiableSignature},HAL.Reflection.FunctionSet@,System.Nullable{System.Guid},System.Boolean)">
      <summary>Recursively searches for the first function in a (potentially nested) function set.</summary>
      <param name="setsOrFunctions">Parent set children.</param>
      <param name="set">Parent set, if any.</param>
      <param name="identity">Optional function identity to be matched.</param>
      <param name="includeObsolete">Whether obsolete functions are eligible.</param>
      <returns>First detected function, if any.</returns>
    </member>
    <member name="T:HAL.Reflection.FunctionSubcategory">
      <summary>Subcategory of functions accessible from HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.FunctionSubcategory.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function subcategory signature.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="M:HAL.Reflection.FunctionSubcategory.#ctor(HAL.Reflection.IIdentifiableSignature)">
      <summary>Creates a new function subcategory signature.</summary>
      <param name="signature">Signature.</param>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Cell_Presets">
      <summary>Relates to cell component presets.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Cell_Components">
      <summary>Relates to cell component factories.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Cell_Assembly">
      <summary>Relates to assembly edition features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Motion_TargetEdition">
      <summary>Relates to motion target edition features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Motion_Settings">
      <summary>Relates to motion settings edition features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Motion_MotionSettings">
      <summary>Relates to motion settings edition features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Motion_KinematicSettings">
      <summary>Relates to kinematic settings edition features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Programming_Composition">
      <summary>Relates to composite actions programming features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Programming_CommonActions">
      <summary>Relates to common actions programming features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Programming_SpecialActions">
      <summary>Relates to special actions programming features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Programming_Import">
      <summary>Relates to parsing and code import features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Simulation_Planning">
      <summary>Relates to simulation planning features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Simulation_Execution">
      <summary>Relates to simulation execution features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Simulation_Diagnosis">
      <summary>Relates to simulation diagnosis features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Control">
      <summary>Relates to control features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Supervision_Services">
      <summary>Relates to supervision services.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Supervision_Analysis">
      <summary>Relates to supervision analysis features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Maintenance">
      <summary>Relates to maintenance features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Utilities_Geometry">
      <summary>Geometry utility features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Utilities_Feedback">
      <summary>Feedback utility features.</summary>
    </member>
    <member name="F:HAL.Reflection.FunctionSubcategory.Utilities_Presets">
      <summary>Catalog edition features.</summary>
    </member>
    <member name="T:HAL.Reflection.FunctionSuite">
      <summary>Suite of functions accessible from HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.FunctionSuite.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function suite.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="M:HAL.Reflection.FunctionSuite.#ctor(HAL.Reflection.IIdentifiableSignature)">
      <summary>Creates a new function suite.</summary>
      <param name="signature">Signature.</param>
    </member>
    <member name="M:HAL.Reflection.FunctionSuite.CountSets(System.Collections.Generic.List{HAL.Reflection.FunctionSet}@,System.Collections.Generic.IEnumerable{HAL.Reflection.IdentifiableSignature})">
      <summary>Counts the number of potentially nested sets in a specified collection of signatures.</summary>
      <param name="sets">Sets of the suite.</param>
      <param name="signatures">Signatures to analyze. All children will be analyzed otherwise.</param>
      <returns>Number of detected sets.</returns>
    </member>
    <member name="T:HAL.Reflection.HierarchicalSignatureBase`1">
      <summary>Base implementation of a hierarchical signature.</summary>
    </member>
    <member name="M:HAL.Reflection.HierarchicalSignatureBase`1.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new hierarchical signature.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="M:HAL.Reflection.HierarchicalSignatureBase`1.#ctor(HAL.Reflection.IIdentifiableSignature)">
      <summary>Creates a signature from another one.</summary>
      <param name="signature">Existing signature.</param>
    </member>
    <member name="P:HAL.Reflection.HierarchicalSignatureBase`1.Children">
      <summary>Children.</summary>
    </member>
    <member name="P:HAL.Reflection.HierarchicalSignatureBase`1.OrderedChildren">
      <summary>Children, sorted by their <see cref="P:HAL.Reflection.ISignature.Order" /> property.</summary>
    </member>
    <member name="P:HAL.Reflection.HierarchicalSignatureBase`1.IsObsolete">
      <inheritdoc />
    </member>
    <member name="M:HAL.Reflection.HierarchicalSignatureBase`1.GetOrderedChildren``1">
      <summary>Retrieves an ordered children collection, based on their <see cref="P:HAL.Reflection.ISignature.Order" /> property.</summary>
      <returns>Ordered children.</returns>
    </member>
    <member name="T:HAL.Reflection.IContentManager">
      <summary>Qualifies a client content manager.</summary>
    </member>
    <member name="P:HAL.Reflection.IContentManager.FunctionCategories">
      <summary>Categories of functions accessible via HAL client user interfaces.</summary>
    </member>
    <member name="M:HAL.Reflection.IContentManager.Find(System.String,System.Type,System.Reflection.Assembly[])">
      <summary>Finds a type in the registered assemblies from its name.</summary>
      <param name="typeName">Type name to search for.</param>
      <param name="hint">Hint type.</param>
      <param name="assemblies">Assemblies in which to restrict the search.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="M:HAL.Reflection.IContentManager.Register(System.Reflection.Assembly)">
      <summary>Registers the specified assembly.</summary>
      <param name="assembly">Assembly to register.</param>
    </member>
    <member name="M:HAL.Reflection.IContentManager.RegisterConverter(System.Type)">
      <summary>Registers a converter type.</summary>
      <param name="type">Converter type.</param>
      <returns>Whether the registration was successful.</returns>
    </member>
    <member name="M:HAL.Reflection.IContentManager.FinalizeContentRegistration">
      <summary>Registers functions detected in the loaded assemblies in the HAL client user interface.</summary>
      <remarks>This method should only be called once all assemblies - including extensions - are loaded.</remarks>
    </member>
    <member name="T:HAL.Reflection.IdentifiableSignature">
      <summary>Identifiable signature.</summary>
    </member>
    <member name="M:HAL.Reflection.IdentifiableSignature.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new identifiable signature.</summary>
      <param name="id">Identity.</param>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="P:HAL.Reflection.IdentifiableSignature.Id">
      <summary>Identity.</summary>
    </member>
    <member name="P:HAL.Reflection.IdentifiableSignature.IsObsolete">
      <summary>Whether this signature marks an obsolete object.</summary>
    </member>
    <member name="M:HAL.Reflection.IdentifiableSignature.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:HAL.Reflection.ParameterSignature">
      <summary>Function parameter signature.</summary>
    </member>
    <member name="M:HAL.Reflection.ParameterSignature.#ctor(System.Reflection.ParameterInfo,System.Int32)">
      <summary>Creates a function parameter signature from a <see cref="P:HAL.Reflection.ParameterSignature.ParameterInfo" />.</summary>
      <param name="parameter">Parameter.</param>
      <param name="order">Parameter order in its parent method signature.</param>
    </member>
    <member name="M:HAL.Reflection.ParameterSignature.#ctor(System.Reflection.PropertyInfo,System.Int32)">
      <summary>Creates a function parameter signature from a <see cref="P:HAL.Reflection.ParameterSignature.PropertyInfo" />.</summary>
      <param name="property">Property.</param>
      <param name="order">Property order in its parent class.</param>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.Type">
      <summary>Parameter type.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsProperty">
      <summary>Whether this parameter is reflected from a class property.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsOutParameter">
      <summary>Whether this parameter is reflected from an out parameter.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsRefParameter">
      <summary>Whether this parameter is reflected from a type passed by reference.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsCollection">
      <summary>Whether this parameter is an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsEnum">
      <summary>Whether this parameter is an <see cref="T:System.Enum" />.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsArray">
      <summary>Whether this parameter is an array. An array is a specific case of enumerable collection.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.ElementType">
      <summary>Element type, if the parameter is a collection.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsCached">
      <summary>Whether the parameter is cached.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.CachedAttribute">
      <summary>Cached attribute, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.HasDefault">
      <summary>Whether the parameter has a default value.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.DefaultAttribute">
      <summary>Default attribute, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.Default">
      <summary>Default value.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.HasSignatureOverride">
      <summary>Whether the parameter has a signature override.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.SignatureAttribute">
      <summary>Signature attribute, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsFromCatalog">
      <summary>Whether the parameter is obtained via a catalog.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.FromCatalogAttribute">
      <summary>Catalog provenance attributes, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsHidden">
      <summary>Whether the parameter is hidden.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.HiddenAttribute">
      <summary>Hidden attribute, if any.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.IsRendered">
      <summary>Whether the parameter is rendered.</summary>
    </member>
    <member name="P:HAL.Reflection.ParameterSignature.RenderedAttribute">
      <summary>Rendered attribute, if any.</summary>
    </member>
    <member name="M:HAL.Reflection.ParameterSignature.ToString">
      <summary>Creates a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:HAL.Reflection.ParameterSignature.IsSimilarTo(HAL.Reflection.ParameterSignature)">
      <summary>Tests whether this parameter signature is similar to another one.</summary>
      <param name="signature">Parameter signature to test.</param>
      <returns>Whether the two signatures are similar.</returns>
    </member>
    <member name="T:HAL.Reflection.SignatureBase">
      <summary>Base signature implementation.</summary>
    </member>
    <member name="M:HAL.Reflection.SignatureBase.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
      <summary>Creates a new function signature.</summary>
      <param name="name">Name.</param>
      <param name="nickname">Nickname.</param>
      <param name="description">Description.</param>
      <param name="order">Order.</param>
      <param name="icon">Icon.</param>
    </member>
    <member name="P:HAL.Reflection.SignatureBase.Name">
      <summary>Name.</summary>
    </member>
    <member name="P:HAL.Reflection.SignatureBase.Nickname">
      <summary>Nickname.</summary>
    </member>
    <member name="P:HAL.Reflection.SignatureBase.Description">
      <summary>Description.</summary>
    </member>
    <member name="P:HAL.Reflection.SignatureBase.Order">
      <summary>Order.</summary>
    </member>
    <member name="P:HAL.Reflection.SignatureBase.Icon">
      <summary>Icon.</summary>
    </member>
    <member name="M:HAL.Reflection.SignatureBase.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Reflection.SignatureBase.Merge(HAL.Reflection.ISignature,System.Boolean)">
      <summary>Merges the information specified in a second signature with this one.</summary>
      <param name="other">Signature to merge information from</param>
      <param name="onlyNull">Whether eligible properties to be merged should be null.</param>
    </member>
    <member name="T:HAL.Reflection.Suite">
      <summary>Maintains the identities of the feature suites used in HAL client applications.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.ControllerCatalog">
      <summary>Controller.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.PartCatalog">
      <summary>Part.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.PositionerCatalog">
      <summary>Positioner.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.RobotCatalog">
      <summary>Robot.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.SensorCatalog">
      <summary>Sensor.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.ToolCatalog">
      <summary>Tool.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Assemble">
      <summary>Assemble mechanism.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Disassemble">
      <summary>Disassemble mechanism.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.ControllerFactory">
      <summary>Controller.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.JointFactory">
      <summary>Joint.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.PartFactory">
      <summary>Part.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.ToolFactory">
      <summary>Tool Factory.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Relocate">
      <summary>Relocates an object graph entity.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Frame">
      <summary>Frame.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Reference">
      <summary>Reference.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Acceleration">
      <summary>Acceleration settings.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Blend">
      <summary>Blend settings.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Kinematics">
      <summary>Kinematic settings.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Constraints">
      <summary>Constraints.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.InverseSolverSettings">
      <summary>Constraints.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Settings">
      <summary>Settings.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Speed">
      <summary>Speed settings.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Target">
      <summary>Target.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.TargetFilter">
      <summary>Target.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.TargetProperties">
      <summary>Target properties.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.OrientTarget">
      <summary>Orient target.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Sync">
      <summary>Sync settings.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.TargetResolver">
      <summary>Target resolver.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Call">
      <summary>Call.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.ChangeSignal">
      <summary>Change signal.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.ChangeTool">
      <summary>Change tool.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.CustomAction">
      <summary>Custom action.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Move">
      <summary>Move.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Procedure">
      <summary>Procedure.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Wait">
      <summary>Wait.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.GCodeParser">
      <summary>GCode parser.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.GCodeInterpreter">
      <summary>GCode interpreter.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Backup">
      <summary>Controller backup.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Control">
      <summary>Execution control.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Export">
      <summary>Program export.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Monitor">
      <summary>Execution monitoring.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Signal">
      <summary>Program export.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Upload">
      <summary>Program upload.</summary>
    </member>
    <member name="F:HAL.Reflection.Suite.Log">
      <summary>Activity log.</summary>
    </member>
    <member name="T:HAL.Resources.Company">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Address1">
      <summary>
              Looks up a localized string similar to 1-5 Vyner Street.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Address2">
      <summary>
              Looks up a localized string similar to .
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Address3">
      <summary>
              Looks up a localized string similar to London E2 9DG.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Address4">
      <summary>
              Looks up a localized string similar to UK.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.CompanyName">
      <summary>
              Looks up a localized string similar to HAL Robotics LTD.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Email">
      <summary>
              Looks up a localized string similar to the-team@hal-robotics.com.
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Phone">
      <summary>
              Looks up a localized string similar to .
            </summary>
    </member>
    <member name="P:HAL.Resources.Company.Website">
      <summary>
              Looks up a localized string similar to https://www.hal-robotics.com.
            </summary>
    </member>
    <member name="T:HAL.Resources.Linguistic">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.ActionNotRenderedMessage">
      <summary>
              Looks up a localized string similar to The following action could not be rendered. Please check that the language supports it..
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.AsLibrary">
      <summary>
              Looks up a localized string similar to AsLibrary.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.BlockNameSeparatorCharacter">
      <summary>
              Looks up a localized string similar to ..
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.CodeBlock">
      <summary>
              Looks up a localized string similar to codeblock.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.DeclarationBlockName">
      <summary>
              Looks up a localized string similar to Declaration.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.DeclarationMode">
      <summary>
              Looks up a localized string similar to DeclarationMode.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.DefaultProcedureName">
      <summary>
              Looks up a localized string similar to HALProcedure.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.ExecutionBlockName">
      <summary>
              Looks up a localized string similar to Execution.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.FormalismFrame">
      <summary>
              Looks up a localized string similar to Frame.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.FormalismPosition">
      <summary>
              Looks up a localized string similar to Position.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.FormalismRotation">
      <summary>
              Looks up a localized string similar to Rotation.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.Identifier">
      <summary>
              Looks up a localized string similar to identifier.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.Indentation">
      <summary>
              Looks up a localized string similar to .
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.InitializationBlockName">
      <summary>
              Looks up a localized string similar to Initialization.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.MethodInvokeCharacter">
      <summary>
              Looks up a localized string similar to @.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.MissingArgument">
      <summary>
              Looks up a localized string similar to ARGUMENT MISSING.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.PostSyntaxCodeBlockName">
      <summary>
              Looks up a localized string similar to PostOriginalString.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.PreSyntaxCodeBlockName">
      <summary>
              Looks up a localized string similar to PreOriginalString.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.ProcedureBlockName">
      <summary>
              Looks up a localized string similar to Procedures.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.ProcedureName">
      <summary>
              Looks up a localized string similar to ProcedureName.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.ProcedureTemplateRootName">
      <summary>
              Looks up a localized string similar to Procedure.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitAngle">
      <summary>
              Looks up a localized string similar to Angle.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitAngularAcceleration">
      <summary>
              Looks up a localized string similar to AngularAcceleration.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitAngularSpeed">
      <summary>
              Looks up a localized string similar to AngularSpeed.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitLength">
      <summary>
              Looks up a localized string similar to Length.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitLinearAcceleration">
      <summary>
              Looks up a localized string similar to LinearAcceleration.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitLinearSpeed">
      <summary>
              Looks up a localized string similar to LinearSpeed.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitMass">
      <summary>
              Looks up a localized string similar to Mass.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.UnitTime">
      <summary>
              Looks up a localized string similar to Time.
            </summary>
    </member>
    <member name="P:HAL.Resources.Linguistic.VariableNameSeparatorCharacter">
      <summary>
              Looks up a localized string similar to ,.
            </summary>
    </member>
    <member name="T:HAL.Resources.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:HAL.Resources.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:HAL.Resources.Messages.ActionStringSeparator">
      <summary>
              Looks up a localized string similar to  : .
            </summary>
    </member>
    <member name="P:HAL.Resources.Messages.ComingSoon">
      <summary>
              Looks up a localized string similar to Coming Soon - This feature is currently being stabilized..
            </summary>
    </member>
    <member name="T:HAL.Runtime.Client">
      <summary>Base implementation of a HAL client application.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.#ctor">
      <summary>Creates a new client.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.IsInitialized">
      <summary>Whether this client initialization is complete.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Moniker">
      <summary>Client moniker.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Container">
      <summary>Dependency injection container. Override this property to use a custom container.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.ContentManagerType">
      <summary>Content manager type. Override this property to use a custom content manager.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Content">
      <summary>Assembly reflector.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Converters">
      <summary>Converters between HAL types and the host application types. Override this property to use a custom converter manager.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.GeometryProviderType">
      <summary>Geometry provider type. Override this property to use a custom geometry provider.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.GeometryProvider">
      <summary>Geometry provider.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Catalogs">
      <summary>Preset catalogs.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.ActiveSession">
      <summary>Current session.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Sessions">
      <summary>Cached sessions.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.DefaultSettings">
      <summary>Default settings.</summary>
    </member>
    <member name="P:HAL.Runtime.Client.Instance">
      <summary>Current client instance.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.RunOnClientThread``1(System.Func{``0})">
      <summary>Runs a function on the client thread.</summary>
      <param name="function">Function to be invoked.</param>
    </member>
    <member name="M:HAL.Runtime.Client.Initialize">
      <summary>Initializes the client: 
            1) <see cref="M:HAL.Runtime.Client.InitializeContainer" />
            2) <see cref="M:HAL.Runtime.Client.LoadDependencies" />
            3) <see cref="M:HAL.Runtime.Client.RefreshLicenses" />
            4) <see cref="M:HAL.Runtime.Client.LoadExtensions" />
            5) <see cref="M:HAL.Runtime.Client.OnInitialized" /></summary>
    </member>
    <member name="M:HAL.Runtime.Client.InitializeContainer">
      <summary>Loads the container content required to support the client initialization.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.LoadDependencies">
      <summary>Loads client dependencies.</summary>
      <remarks>Dependencies should be loaded in an orderly fashion when possible. </remarks>
    </member>
    <member name="M:HAL.Runtime.Client.RefreshLicenses">
      <summary>Refreshes the license cache.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.RefreshLicensesAsync">
      <summary>Refreshes the license cache.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.LoadExtensions">
      <summary>Loads client extensions.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.OnInitialized">
      <summary>Called upon the application initialization completion.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.InitializeDefaultSession">
      <summary>Creates and registers the default session.</summary>
    </member>
    <member name="M:HAL.Runtime.Client.AddSession(System.Guid,HAL.Runtime.Session,System.Boolean)">
      <summary>Adds a new session to the session manager.</summary>
      <param name="identifier">Session identifier, helpful to link host document attributes to the session.</param>
      <param name="session">Session to add.</param>
      <param name="isActive">If true, the new session will be set as the active session.</param>
    </member>
    <member name="M:HAL.Runtime.Client.RemoveSession(System.Guid)">
      <summary>Attempts to remove a session from the session manager.</summary>
      <param name="sessionID">Session to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Runtime.Client.ActivateSession(System.Guid)">
      <summary>Activates a cached session.</summary>
      <param name="sessionID">ID of the session to activate.</param>
      <returns>True if the session was found and activated.</returns>
    </member>
    <member name="T:HAL.Runtime.ContainerExtensions">
      <summary>Extension methods for <see cref="T:Unity.IUnityContainer">containers</see>.</summary>
    </member>
    <member name="T:HAL.Runtime.DefaultSettings">
      <summary>Set of settings used by default.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultRevoluteJointSpeed">
      <summary>Default revolute joint speed.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultPrismaticJointSpeed">
      <summary>Default prismatic joint speed.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultRevoluteJointAcceleration">
      <summary>Default revolute joint acceleration.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultPrismaticJointAcceleration">
      <summary>Default prismatic joint acceleration.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultSpeedSettings">
      <summary>Default speed settings.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultAccelerationSettings">
      <summary>Default acceleration settings.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultBlendSettings">
      <summary>Default blend settings.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultCartesianPositionSamplingResolution">
      <summary>Default cartesian position sampling resolution.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultCartesianOrientationSamplingResolution">
      <summary>Default cartesian orientation sampling resolution.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultPrismaticJointLengthSamplingResolution">
      <summary>Default prismatic joint sampling resolution.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultRevoluteJointSamplingResolution">
      <summary>Default revolute joint sampling resolution.</summary>
    </member>
    <member name="P:HAL.Runtime.DefaultSettings.DefaultTimeStep">
      <summary>Default time step used as the minimal cycle time of the simulation. Default: 30ms.</summary>
    </member>
    <member name="T:HAL.Runtime.Session">
      <summary>Work session.</summary>
    </member>
    <member name="M:HAL.Runtime.Session.#ctor(System.String)">
      <summary>Creates a new identified session.</summary>
      <param name="alias">Alias to give to this session.</param>
    </member>
    <member name="P:HAL.Runtime.Session.Identity">
      <summary>Session identity.</summary>
    </member>
    <member name="P:HAL.Runtime.Session.Settings">
      <summary>Session settings.</summary>
    </member>
    <member name="P:HAL.Runtime.Session.ObjectGraph">
      <summary>Object graph, handling identified objects and relationships between them.</summary>
    </member>
    <member name="P:HAL.Runtime.Session.CommunicationGraph">
      <summary>Communication graph, handling identified objects and relationships between them.</summary>
    </member>
    <member name="P:HAL.Runtime.Session.Current">
      <summary>Currently active session.</summary>
    </member>
    <member name="P:HAL.Runtime.Session.VariableStore">
      <summary>Store, to share data across the framework.</summary>
    </member>
    <member name="M:HAL.Runtime.Session.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Runtime.Session.Activate">
      <summary>Called when the session is activated.</summary>
    </member>
    <member name="M:HAL.Runtime.Session.Deactivate">
      <summary>Called when the session is deactivated.</summary>
    </member>
    <member name="M:HAL.Runtime.Session.Equals(HAL.Identifier)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Runtime.Session.Equals(HAL.IIdentifiable)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Runtime.Session.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Runtime.Session.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Runtime.SessionSettings">
      <summary>Collection of unit settings and data providers maintained by the current session.</summary>
    </member>
    <member name="M:HAL.Runtime.SessionSettings.#ctor">
      <summary>Creates empty settings.</summary>
    </member>
    <member name="M:HAL.Runtime.SessionSettings.#ctor(HAL.Units.Absolute.abs,HAL.Units.Length.m,HAL.Units.Angle.rad)">
      <summary>Creates minimal settings.</summary>
      <param name="absoluteTolerance">Absolute tolerance.</param>
      <param name="lengthTolerance">Length tolerance.</param>
      <param name="angleTolerance">Angle tolerance.</param>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ParallelOptions">
      <summary>Parallelization options.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.AbsoluteTolerance">
      <summary>Absolute tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.AngularAccelerationTolerance">
      <summary>Angular acceleration tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.LinearAccelerationTolerance">
      <summary>Linear acceleration tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.AngleTolerance">
      <summary>Angular tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricCapacitanceTolerance">
      <summary>Electric capacitance tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricChargeTolerance">
      <summary>Electric charge tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricCurrentTolerance">
      <summary>Electric current tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricFieldTolerance">
      <summary>Electric field tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricInductanceTolerance">
      <summary>Electric inductance tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricPowerTolerance">
      <summary>Electric power tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricResistanceTolerance">
      <summary>Electric resistance tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricResistivityTolerance">
      <summary>Electric resistivity tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ElectricTensionTolerance">
      <summary>Electric tension tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.EnergyTolerance">
      <summary>Energy tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.ForceTolerance">
      <summary>Force tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.FrequencyTolerance">
      <summary>Frequency tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.LengthTolerance">
      <summary>Length tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.MassTolerance">
      <summary>Mass tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.PressureTolerance">
      <summary>Pressure tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.AngularSpeedTolerance">
      <summary>Angular speed tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.LinearSpeedTolerance">
      <summary>Linear speed tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.TemperatureTolerance">
      <summary>Temperature tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.TimeTolerance">
      <summary>Time tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.TorqueTolerance">
      <summary>Torque tolerance.</summary>
    </member>
    <member name="P:HAL.Runtime.SessionSettings.Colors">
      <summary>Colors being used to display HAL objects in the client view.</summary>
    </member>
    <member name="T:HAL.Serialization.HAL_MethodBaseSurrogate">
      <summary>Replaces System.Reflection.MethodBase for serialization purposes</summary>
    </member>
    <member name="M:HAL.Serialization.HAL_MethodBaseSurrogate.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:HAL.Serialization.HAL_MethodBaseSurrogate.Name">
      <summary>The method name.</summary>
    </member>
    <member name="P:HAL.Serialization.HAL_MethodBaseSurrogate.IsConstructor">
      <summary>Indicates if the method is a constructor.</summary>
    </member>
    <member name="P:HAL.Serialization.HAL_MethodBaseSurrogate.CallingType">
      <summary>The method calling type.</summary>
    </member>
    <member name="P:HAL.Serialization.HAL_MethodBaseSurrogate.ArgumentTypes">
      <summary>The argument types of this method.</summary>
    </member>
    <member name="M:HAL.Serialization.HAL_MethodBaseSurrogate.op_Implicit(System.Reflection.MethodBase)~HAL.Serialization.HAL_MethodBaseSurrogate">
      <summary>Implicitly converts between <see cref="T:System.Reflection.MethodBase" /> and the serializable <see cref="T:HAL.Serialization.HAL_MethodBaseSurrogate" />.</summary>
      <param name="info">The <see cref="T:System.Reflection.MethodBase" /> to convert.</param>
      <returns>A <see cref="T:HAL.Serialization.HAL_MethodBaseSurrogate" /> with the same information as the original <see cref="T:System.Reflection.MethodBase" />.</returns>
    </member>
    <member name="M:HAL.Serialization.HAL_MethodBaseSurrogate.op_Implicit(HAL.Serialization.HAL_MethodBaseSurrogate)~System.Reflection.MethodBase">
      <summary>Implicitly converts between <see cref="T:HAL.Serialization.HAL_MethodBaseSurrogate" /> and the system <see cref="T:System.Reflection.MethodBase" />.</summary>
      <param name="info">The <see cref="T:HAL.Serialization.HAL_MethodBaseSurrogate" /> to convert.</param>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> with the same information as the original <see cref="T:HAL.Serialization.HAL_MethodBaseSurrogate" />.</returns>
    </member>
    <member name="M:HAL.Serialization.HAL_MethodBaseSurrogate.ToSerializableString">
      <summary>Creates a complete string representation of this surrogate.</summary>
      <returns>Resulting string.</returns>
    </member>
    <member name="M:HAL.Serialization.HAL_MethodBaseSurrogate.Parse(System.String)">
      <summary>Parses a <see cref="T:HAL.Serialization.HAL_MethodBaseSurrogate" /> from its string representation.</summary>
      <param name="serializedString">String to parse.</param>
      <returns>Resulting surrogate.</returns>
    </member>
    <member name="T:HAL.Serialization.HAL_ParseException">
      <summary>An exception thrown during the parsing of a grammatical string.</summary>
    </member>
    <member name="M:HAL.Serialization.HAL_ParseException.#ctor">
      <summary>Default, empty constructor.</summary>
    </member>
    <member name="M:HAL.Serialization.HAL_ParseException.#ctor(System.String)">
      <summary>Creates an exception with the given message.</summary>
      <param name="message">The message to be sent with this exception.</param>
    </member>
    <member name="M:HAL.Serialization.HAL_ParseException.#ctor(System.Exception)">
      <summary>Creates an exception with an inner exception i.e. one that caused this.</summary>
      <param name="cause">The root cause of this exception.</param>
    </member>
    <member name="M:HAL.Serialization.HAL_ParseException.#ctor(System.String,System.Exception)">
      <summary>Creates an exception with a message and an inner exception i.e. one that caused this.</summary>
      <param name="message">The message to be sent with this exception.</param>
      <param name="cause">The root cause of this exception.</param>
    </member>
    <member name="T:HAL.Serialization.Helpers">
      <summary>Static collection of serialization utility methods.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeSession(System.String,System.String)">
      <summary>Serializes the current <see cref="T:HAL.Runtime.Session" />.</summary>
      <param name="path">The directory to save to.</param>
      <param name="name">File name.</param>
      <returns>Successful serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.DeserializeSession(System.String,System.Boolean)">
      <summary>Deserializes a session and optionally load it as the current <see cref="T:HAL.Runtime.Session" />.</summary>
      <param name="path">The full path of the file to deserialize.</param>
      <param name="load">Defines whether this session should be automatically loaded.</param>
      <returns>Successful deserialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeSessionSettings(System.String,System.String)">
      <summary>Serializes the settings of the current <see cref="T:HAL.Runtime.Session" />.</summary>
      <param name="path">The directory to save to.</param>
      <param name="name">Session settings name.</param>
      <returns>Successful serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.DeserializeSessionSettings(System.String,System.Boolean)">
      <summary>Deserializes session settings and optionally applies them as the settings of the current <see cref="T:HAL.Runtime.Session" />.</summary>
      <param name="path">The full path of the file to deserialize.</param>
      <param name="apply">Defines whether these settings should be automatically applied to the current session.</param>
      <returns>Successful deserialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeTag(HAL.Catalog.Items.Attributes.Tags.Tag,System.String)">
      <summary>Serializes a tag.</summary>
      <param name="tag">Tag to serialize.</param>
      <param name="path">Tag directory path.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeTags(System.String)">
      <summary>Serializes the tag graph of this session.</summary>
      <param name="path">Target path.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.DeserializeTags(System.String,System.Boolean)">
      <summary>Deserializes tags and optionally adds them to the current <see cref="T:HAL.Catalog.TagGraph" />.</summary>
      <param name="path">The full path of the tag directory to deserialize.</param>
      <param name="load">If true, adds the deserialized tags to the current <see cref="T:HAL.Catalog.TagGraph" />.</param>
      <returns>Deserialized tags.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeController(System.String,HAL.Catalog.Items.ControllerCatalogItem,HAL.Control.Controller)">
      <summary>Serializes a controller.</summary>
      <param name="path">Serialization path.</param>
      <param name="item">Catalog item depicting the mechanism to serialize.</param>
      <param name="controller">The mechanism to serialize.</param>
    </member>
    <member name="M:HAL.Serialization.Helpers.InitializeControllerSerialization(HAL.Control.Controller)">
      <summary>Prepares a controller for serialization.</summary>
      <param name="controller">Controller.</param>
      <returns>Controller ready for serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.InitializeMechanismSerialization(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Prepares a mechanism for serialization.</summary>
      <param name="mechanism">Mechanism.</param>
      <returns>Mechanism ready for serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.TerminateMechanismSerialization(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Completes the serialization of a mechanism.</summary>
      <param name="mechanism">Serialized mechanism.</param>
      <returns>Mechanism.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.TerminateMechanismDeserialization(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Completes the deserialization of a mechanism.</summary>
      <param name="mechanism">Deserialized mechanism.</param>
      <returns>Mechanism.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.InitializePartSerialization(HAL.Objects.Parts.Part)">
      <summary>Prepares a part for serialization.</summary>
      <param name="part">Part.</param>
      <returns>Part ready for serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.InitializeProcedureSerialization(HAL.Procedures.Procedure)">
      <summary>Prepares a procedure for serialization.</summary>
      <param name="procedure">Procedure.</param>
      <returns>Procedure ready for serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeLanguage(System.String,HAL.Linguistics.Definition.MachineLanguage)">
      <summary>Serializes a complete <see cref="T:HAL.Linguistics.Definition.MachineLanguage" />.</summary>
      <param name="path">The directory to save to.</param>
      <param name="language">The language to export.</param>
      <returns>Successful serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.DeserializeLanguage(System.String)">
      <summary>Deserializes a <see cref="T:HAL.Linguistics.Definition.MachineLanguage" />.</summary>
      <param name="path">The full path of the file to deserialize.</param>
      <returns>Successful deserialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeLanguageSettings(System.String,HAL.Linguistics.Definition.LanguageSettings,HAL.Linguistics.Definition.LanguageIdentifier)">
      <summary>Serializes <see cref="T:HAL.Linguistics.Definition.LanguageSettings" />.</summary>
      <param name="path">Directory to save to.</param>
      <param name="settings">Settings to export.</param>
      <param name="languageIdentifier">Language to which the settings apply.</param>
      <returns>Successful serialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.DeserializeLanguageSettings(System.String)">
      <summary>Deserializes <see cref="T:HAL.Linguistics.Definition.LanguageSettings" />.</summary>
      <param name="path">Full path to deserialize from.</param>
      <returns>Successful deserialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.SerializeSyntacticFunction(System.String,HAL.Linguistics.Definition.SyntacticFunction)">
      <summary>Serializes a function.</summary>
      <param name="path">The folder in which to store the file.</param>
      <param name="nativeFunction">The function to serialize.</param>
    </member>
    <member name="M:HAL.Serialization.Helpers.DeserializeSyntacticFunction(System.String)">
      <summary>Deserializes a Syntactic Function file.</summary>
      <param name="path">The full path of the file to deserialize.</param>
      <returns>Successful deserialization.</returns>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetFrameTypes">
      <summary>Static list for storing all known types associated with Targets and their genericity</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetExpressionTypes">
      <summary>Static list for storing all known types associated with expressions.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetActionTypes">
      <summary>Static list for storing all known types associated with HAL_Actions</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetActionEdgeTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are compatible as edges in the <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetEvaluableTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are evaluable.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetGraphElementTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are compatible as vertices or edges in graphs.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetGraphConnectionTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are compatible as edges in graphs.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetGraphVertexTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are compatible as vertices in graphs.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetObjectConnectionTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are compatible as edges in the <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetMeasurementTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are measurements.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetMetaArgumentTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are MetaArguments.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetCommunicationGraphTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are eligible for the communication graph.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetCommunicationEdgeTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are compatible as edges in the <see cref="T:HAL.Procedures.Procedure" />.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetObjectGraphTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that are eligible for the object graph.</summary>
    </member>
    <member name="M:HAL.Serialization.Helpers.GetManagedPropertyTypes">
      <summary>Returns an array of all <see cref="T:System.Type" />s that have a property manager.</summary>
    </member>
    <member name="T:HAL.Simulation.ExecutionControl">
      <summary>Controls the execution of a controller program.</summary>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.#ctor">
      <summary>Creates an empty </summary>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.#ctor(HAL.Simulation.ExecutionControl)">
      <summary>Creates an execution control from an existing one.</summary>
      <param name="control">Existing control.</param>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.#ctor(HAL.Simulation.ExecutionMode,System.Boolean,System.Double)">
      <summary>Creates a execution control from specified values.</summary>
      <param name="execution">Execution mode.</param>
      <param name="loop">If true, the execution will loop indefinitely.</param>
      <param name="timeRatio">Accelerates or decelerates the execution time.</param>
    </member>
    <member name="P:HAL.Simulation.ExecutionControl.Execution">
      <summary>Execution mode.</summary>
    </member>
    <member name="P:HAL.Simulation.ExecutionControl.Loop">
      <summary>If true, the execution will loop indefinitely.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.Starting">
      <summary>Event triggered when this control starts.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.Stopping">
      <summary>Event triggered when this control stops.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.ExecutingNext">
      <summary>Event triggered when this control skips to the next element.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.ExecutingPrevious">
      <summary>Event triggered when this control skips to the previous element.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.Resetting">
      <summary>Event triggered when this control resets a simulation.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.LoopChanged">
      <summary>Event triggered when this control changes its looping.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.TimeRatioChanged">
      <summary>Event triggered when this control changes its time ratio.</summary>
    </member>
    <member name="P:HAL.Simulation.ExecutionControl.TimeRatio">
      <summary>Accelerates or decelerates the execution time.</summary>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.Reset">
      <summary>Resets the execution to the starting time code.</summary>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.Refresh">
      <summary>Call this method to force the refreshing of this execution control in subscribers.</summary>
    </member>
    <member name="E:HAL.Simulation.ExecutionControl.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Simulation.ExecutionControl.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Simulation.ExecutionMode">
      <summary>Enumerates execution modes.</summary>
    </member>
    <member name="F:HAL.Simulation.ExecutionMode.Stop">
      <summary>Stops the execution.</summary>
    </member>
    <member name="F:HAL.Simulation.ExecutionMode.Start">
      <summary>Starts the execution.</summary>
    </member>
    <member name="F:HAL.Simulation.ExecutionMode.Previous">
      <summary>Execute the previous action.</summary>
    </member>
    <member name="F:HAL.Simulation.ExecutionMode.Next">
      <summary>Execute the next action.</summary>
    </member>
    <member name="T:HAL.Simulation.ExecutionModeDescriptions">
      <summary>Extensions for this enumeration.</summary>
    </member>
    <member name="M:HAL.Simulation.ExecutionModeDescriptions.Description(HAL.Simulation.ExecutionMode)">
      <summary>Human-friendly description of an enumeration.</summary>
      <param name="enumeration">Enumeration.</param>
      <returns>Enumeration description.</returns>
    </member>
    <member name="T:HAL.Simulation.SimulationSettings">
      <summary>Simulation settings.</summary>
    </member>
    <member name="M:HAL.Simulation.SimulationSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,HAL.Display.Styles.DisplayDefinition,System.Double)">
      <summary>Creates simulation settings from specified values.</summary>
      <param name="detectLargeAccelerations">If true, the simulation will generate alerts if large accelerations are detected.</param>
      <param name="detectSingularities">If true, the simulation will generate alerts if singularities are detected.</param>
      <param name="detectCollisions">If true, the simulation will generate alerts if collisions are detected.</param>
      <param name="renderingQuality">Simulation display quality, if it is rendered in a viewport.</param>
      <param name="renderingFrequency">Simulation display refresh frequency, if it is rendered in a viewport.</param>
    </member>
    <member name="P:HAL.Simulation.SimulationSettings.DetectLargeAccelerations">
      <summary>If true, the simulation will generate alerts if large accelerations are detected.</summary>
    </member>
    <member name="P:HAL.Simulation.SimulationSettings.DetectSingularities">
      <summary>If true, the simulation will generate alerts if singularities are detected.</summary>
    </member>
    <member name="P:HAL.Simulation.SimulationSettings.DetectCollisions">
      <summary>If true, the simulation will generate alerts if collisions are detected.</summary>
    </member>
    <member name="P:HAL.Simulation.SimulationSettings.RenderingQuality">
      <summary>Simulation display quality, if it is rendered in a viewport.</summary>
    </member>
    <member name="P:HAL.Simulation.SimulationSettings.RenderingFrequency">
      <summary>Simulation display refresh frequency, if it is rendered in a viewport.</summary>
    </member>
    <member name="T:HAL.Simulation.Solution">
      <summary>Controller simulation solution.</summary>
    </member>
    <member name="M:HAL.Simulation.Solution.#ctor(HAL.Control.Controller)">
      <summary>Creates a solution.</summary>
      <param name="controller">Controller managing the solved procedure.</param>
    </member>
    <member name="P:HAL.Simulation.Solution.Controller">
      <summary>Controller managing the solved procedure.</summary>
    </member>
    <member name="P:HAL.Simulation.Solution.IsComplete">
      <summary>Whether the solution is complete.</summary>
    </member>
    <member name="P:HAL.Simulation.Solution.TimeStamp">
      <summary>Solution time stamp.</summary>
    </member>
    <member name="M:HAL.Simulation.Solution.ToString">
      <inheritdoc />
    </member>
    <member name="M:HAL.Simulation.Solution.Equals(HAL.Simulation.Solution)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Simulation.Solution.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Simulation.Solution.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:HAL.Spatial.AABBTree">
      <summary>Tree of axis aligned boxes, also known as an octree.</summary>
    </member>
    <member name="F:HAL.Spatial.AABBTree.Boxes">
      <summary>Tree boxes.</summary>
    </member>
    <member name="F:HAL.Spatial.AABBTree.MaxLeafCount">
      <summary>Number of triangles to allow in a leaf node.</summary>
      <remarks>Larger values will create shallower trees, but leaves cost more to test</remarks>
    </member>
    <member name="M:HAL.Spatial.AABBTree.#ctor(HAL.Spatial.Mesh,System.Boolean)">
      <summary>Creates the tree for a mesh.</summary>
      <param name="mesh">Mesh.</param>
      <param name="autoBuild">Whether to build the tree upon creation.</param>
    </member>
    <member name="M:HAL.Spatial.AABBTree.#ctor(System.Collections.Generic.IEnumerable{HAL.Spatial.Mesh},System.Boolean)">
      <summary>Creates the tree for multiple meshes.</summary>
      <param name="meshes">Meshes.</param>
      <param name="autoBuild">Whether to build the tree upon creation.</param>
    </member>
    <member name="M:HAL.Spatial.AABBTree.#ctor(HAL.Spatial.AABBTree)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Tree to clone.</param>
    </member>
    <member name="P:HAL.Spatial.AABBTree.Meshes">
      <summary>Mesh used to create the tree.</summary>
    </member>
    <member name="M:HAL.Spatial.AABBTree.Build">
      <summary>Create the tree from the given mesh.</summary>
    </member>
    <member name="M:HAL.Spatial.AABBTree.Intersects(HAL.Spatial.Mesh,System.Boolean,HAL.Spatial.MatrixFrame)">
      <summary>
            return true if *any* triangle of testMesh intersects with our tree.
            Use TransformF to transform vertices of testMesh into space of this tree.
            if boundsCheck is false, we skip bbox/bbox early-out
            </summary>
    </member>
    <member name="M:HAL.Spatial.AABBTree.Intersects(HAL.Spatial.AABBTree,HAL.Spatial.MatrixFrame)">
      <summary>Finds whether this tree and another intersect.</summary>
      <param name="otherTree">Other tree.</param>
      <param name="relativeTransformation">Transformation to put the other tree in this tree's space.</param>
      <returns>Whether there is any intersection between the meshes.</returns>
    </member>
    <member name="M:HAL.Spatial.AABBTree.Intersect(HAL.Spatial.AABBTree,System.Boolean,HAL.Spatial.MatrixFrame)">
      <summary>Finds the intersections of this tree and another.</summary>
      <param name="otherTree">Other tree.</param>
      <param name="firstOnly">Whether only the first intersection should be sought.</param>
      <param name="relativeTransformation">Transformation to put the other tree in this tree's space.</param>
      <returns>Intersections between the meshes.</returns>
    </member>
    <member name="M:HAL.Spatial.AABBTree.NearestHitFace(HAL.Spatial.Curves.Line@,HAL.Units.Length.m@,System.Double,HAL.Spatial.MatrixFrame)">
      <summary>Finds the id of first triangle that a given ray hits, within distance.</summary>
    </member>
    <member name="M:HAL.Spatial.AABBTree.AllHitFaces(HAL.Spatial.Curves.Line,System.Collections.Generic.List{System.Int32}@,System.Double,HAL.Spatial.MatrixFrame)">
      <summary>Find the ids of all the triangles that the ray intersects, within distance maximumDistance from ray origin.</summary>
    </member>
    <member name="M:HAL.Spatial.AABBTree.MinimumDistance(HAL.Spatial.AABBTree,System.Int32[]@,System.Double,HAL.Spatial.MatrixFrame)">
      <summary>Finds the closest distance between this tree and another.</summary>
      <param name="otherTree">Other tree.</param>
      <param name="nearestPairOfTriangles">Indices of the triangles in this tree and the other which are closest.</param>
      <param name="maximumDistance">Maximum search distance in m. Any results greater than this will be discarded.</param>
      <param name="relativeTransformation">Transformation to put the other tree in this tree's space.</param>
      <returns>Resulting distance between the meshes.</returns>
    </member>
    <member name="M:HAL.Spatial.AABBTree.WithinDistance(HAL.Spatial.AABBTree,HAL.Units.Length.m,HAL.Spatial.MatrixFrame)">
      <summary>Finds whether this tree and another are within a given distance.</summary>
      <param name="otherTree">Other tree.</param>
      <param name="minimumDistance">Distance against which to test.</param>
      <param name="relativeTransformation">Transformation to put the other tree in this tree's space.</param>
      <returns>Whether this tree and the other are within the given distance.</returns>
    </member>
    <member name="M:HAL.Spatial.AABBTree.NearestFace(HAL.Spatial.Vector3D@,HAL.Units.Length.m@,HAL.Spatial.Vector3D@,System.Boolean,System.Double,HAL.Spatial.MatrixFrame)">
      <summary>Find the face closest to a given point.</summary>
      <param name="point">Point to test.</param>
      <param name="distance">Distance to the vertex.</param>
      <param name="closestPoint">Closest point used to evaluate the face.</param>
      <param name="skipClosestPointCalculation">Whether to skip the closest point calculation.</param>
      <param name="startingDistance">Starting distance. Any distance greater than this will be discarded.</param>
      <param name="transformation">Optional transformation of the tree.</param>
      <returns>Index of the face closest to the point or -1 if none found.</returns>
    </member>
    <member name="M:HAL.Spatial.AABBTree.NearestVertex(HAL.Spatial.Vector3D@,HAL.Units.Length.m@,HAL.Spatial.Vector3D@,System.Double,HAL.Spatial.MatrixFrame)">
      <summary>Find the vertex closest to a given point.</summary>
      <param name="point">Point to test.</param>
      <param name="distance">Distance to the vertex.</param>
      <param name="closestPoint">Closest point used in the distance calculation.</param>
      <param name="startingDistance">Starting distance. Any distance greater than this will be discarded.</param>
      <param name="transformation">Optional transformation of the tree.</param>
      <returns>Index of vertex closest to the point or -1 if none found.</returns>
    </member>
    <member name="M:HAL.Spatial.AABBTree.Contains(HAL.Spatial.Vector3D,HAL.Spatial.MatrixFrame)">
      <summary>Tests whether a point is inside the mesh.</summary>
      <remarks>Only works on closed meshes.</remarks>
    </member>
    <member name="M:HAL.Spatial.AABBTree.Clone">
      <inheritdoc />
    </member>
    <member name="T:HAL.Spatial.Axis">
      <summary>Axis around which to rotate.</summary>
    </member>
    <member name="F:HAL.Spatial.Axis.X">
      <summary>X axis.</summary>
    </member>
    <member name="F:HAL.Spatial.Axis.Y">
      <summary>Y axis.</summary>
    </member>
    <member name="F:HAL.Spatial.Axis.Z">
      <summary>Z axis.</summary>
    </member>
    <member name="T:HAL.Spatial.AxisAlignedBox">
      <summary>Box aligned to the world axes.</summary>
    </member>
    <member name="F:HAL.Spatial.AxisAlignedBox.Zero">
      <summary>Creates a box at the origin with a size of 0.</summary>
    </member>
    <member name="F:HAL.Spatial.AxisAlignedBox.UnitPositive">
      <summary>Creates a box with an edge length of 1 and its minimum corner at the origin.</summary>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a box from the coordinates of the two extreme points.</summary>
      <param name="xmin">Minimum point X coordinate.</param>
      <param name="ymin">Minimum point Y coordinate.</param>
      <param name="zmin">Minimum point Z coordinate.</param>
      <param name="xmax">Maximum point X coordinate.</param>
      <param name="ymax">Maximum point Y coordinate.</param>
      <param name="zmax">Maximum point Z coordinate.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.#ctor(System.Double)">
      <summary>Creates a cube from the origin with a given side size.</summary>
      <param name="cubeSize">Size.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.#ctor(System.Double,System.Double,System.Double)">
      <summary>Creates a box from the origin with a given side sizes.</summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="depth">Depth.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D)">
      <summary>Creates a box from the two extreme points.</summary>
      <param name="minimum">Minimum point.</param>
      <param name="maximum">Maximum point.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.#ctor(HAL.Spatial.Vector3D,System.Double,System.Double,System.Double)">
      <summary>Creates a box with given dimensions centered on a given point.</summary>
      <param name="center">Center.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="depth">Depth.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.#ctor(HAL.Spatial.AxisAlignedBox)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Box to clone.</param>
    </member>
    <member name="P:HAL.Spatial.AxisAlignedBox.Minimum">
      <summary>Minimum corner of the box.</summary>
    </member>
    <member name="P:HAL.Spatial.AxisAlignedBox.Maximum">
      <summary>Maximum corner of the box.</summary>
    </member>
    <member name="P:HAL.Spatial.AxisAlignedBox.Center">
      <summary>Center of the box.</summary>
    </member>
    <member name="P:HAL.Spatial.AxisAlignedBox.Extents">
      <summary>Vector between center and maximum corner. This can be negated to find the minimum corner.</summary>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.CreateBoundingBox(HAL.Spatial.Vector3D[])">
      <summary>Creates the bounding box for a series of points.</summary>
      <param name="points">Points to contain.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.CreateBoundingBox(HAL.Spatial.Mesh)">
      <summary>Creates the bounding box for a mesh.</summary>
      <param name="mesh">Mesh to contain.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.CreateBoundingBox(HAL.Spatial.Mesh,HAL.Spatial.MeshFace)">
      <summary>Creates the bounding box for the face of a mesh.</summary>
      <param name="mesh">Mesh which owns the face.</param>
      <param name="face">Mesh face.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.CreateBoundingBox(HAL.Spatial.Mesh,System.Int32)">
      <summary>Creates the bounding box for the face of a mesh.</summary>
      <param name="mesh">Mesh which owns the face.</param>
      <param name="faceIndex">Mesh face index.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.CreateBoundingBox(HAL.Spatial.AxisAlignedBox,HAL.Spatial.MatrixFrame)">
      <summary>Creates the bounding box of the transformation of the eight vertices of a box.</summary>
      <param name="box">Original box.</param>
      <param name="transformation">Box transformation.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Contain(HAL.Spatial.Vector3D)">
      <summary>Expands the box to ensure a given point is within its bounds.</summary>
      <param name="point">Point to contain.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Contain(HAL.Spatial.AxisAlignedBox)">
      <summary>Expands the box to ensure a given box is within its bounds.</summary>
      <param name="box">Box to contain.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Contains(HAL.Spatial.Vector3D)">
      <summary>Tests whether a given point is within the bounds of this box.</summary>
      <param name="point">Point to test.</param>
      <returns>Whether the point is contained.</returns>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Intersects(HAL.Spatial.AxisAlignedBox)">
      <summary>Tests whether a given box intersects this box.</summary>
      <param name="box">Box to test.</param>
      <returns>Whether the boxes intersect.</returns>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Intersect(HAL.Spatial.Curves.Line)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Distance(HAL.Spatial.Vector3D)">
      <summary>Calculates the distance between a point and the faces of this box.</summary>
      <param name="point">Point to test.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.DistanceSquared(HAL.Spatial.Vector3D)">
      <summary>Calculates the square distance between a point and the faces of this box.</summary>
      <param name="point">Point to test.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.DistanceSquared(HAL.Spatial.AxisAlignedBox)">
      <summary>Calculates the squared distance between this and another box.</summary>
      <param name="other">Other box.</param>
      <returns>Squared distance to other box.</returns>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Translate(HAL.Spatial.Vector3D)">
      <summary>Translates this box by a given vector.</summary>
      <param name="translation">Translation vector.</param>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.GetCorner(System.Int32)">
      <summary>Retrieves the corner at the given index.</summary>
      <remarks>Order is as follows: 0-3 are lower ring, sorted (minX,minY), (maxX,minY), (maxX,maxY), (minX,maxY).</remarks>
      <param name="index">Corner index.</param>
      <returns>Position of the corner.</returns>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Equals(HAL.Spatial.AxisAlignedBox)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.AxisAlignedBox.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:HAL.Spatial.Body">
      <summary>Geometric representation of an object with LoDs.</summary>
    </member>
    <member name="F:HAL.Spatial.Body.NeutralTreeLevels">
      <summary>Trees in their neutral positions.</summary>
    </member>
    <member name="F:HAL.Spatial.Body.VolumetricIndex">
      <summary>Detail level index for the volumetric representation.</summary>
    </member>
    <member name="F:HAL.Spatial.Body.LowIndex">
      <summary>Detail level index for the low resolution representation.</summary>
    </member>
    <member name="F:HAL.Spatial.Body.HighIndex">
      <summary>Detail level index for the high resolution representation.</summary>
    </member>
    <member name="M:HAL.Spatial.Body.#ctor">
      <summary>Creates an empty body at the origin.</summary>
    </member>
    <member name="M:HAL.Spatial.Body.#ctor(HAL.Spatial.MatrixFrame,System.Collections.Generic.IEnumerable{HAL.Spatial.Mesh},System.Collections.Generic.IEnumerable{HAL.Spatial.Mesh},System.Collections.Generic.IEnumerable{HAL.Spatial.Mesh})">
      <summary>Creates a body.</summary>
      <param name="baseLocation">Location of the body.</param>
      <param name="highResolution">High resolution representation.</param>
      <param name="lowResolution">Low resolution representation.</param>
      <param name="volumetric">Volumetric representation.</param>
    </member>
    <member name="M:HAL.Spatial.Body.#ctor(HAL.Spatial.Body)">
      <summary>Copy constructor.</summary>
      <param name="clonee">Body to clone.</param>
    </member>
    <member name="P:HAL.Spatial.Body.Location">
      <summary>Current location of the body group.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.CenterOfMass">
      <summary>The center of mass of the object.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.Volumetric">
      <summary>Volumetric representation.</summary>
      <remarks>This should generally be a convex hull or similar that can be used for extremely fast calculations.</remarks>
    </member>
    <member name="P:HAL.Spatial.Body.LowResolution">
      <summary>Low resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.HighResolution">
      <summary>High resolution representation.</summary>
      <remarks>Used for display and other high-fidelity scenarios.</remarks>
    </member>
    <member name="P:HAL.Spatial.Body.LowestResolution">
      <summary>Lowest resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.HighestResolution">
      <summary>Highest resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.HasVolumetricRepresentation">
      <summary>Whether this body has a volumetric representation.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.HasLowResolutionRepresentation">
      <summary>Whether this body has a low resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.HasHighResolutionRepresentation">
      <summary>Whether this body has a high resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.Body.IsValid">
      <summary>Whether this body has a geometric representation.</summary>
    </member>
    <member name="M:HAL.Spatial.Body.Relocate(HAL.Spatial.MatrixFrame,System.Boolean)">
      <summary>Relocates the body.</summary>
      <param name="transformation">Transformation.</param>
      <param name="relative">Whether the relocation should be relative to the current location or absolute. Defaults to false, absolute.</param>
    </member>
    <member name="M:HAL.Spatial.Body.DistanceTo(HAL.Spatial.Body)">
      <summary>Computes the distance between this body and a second one using the lowest representation level available.</summary>
      <param name="body">Second body.</param>
      <returns>Distance between the two bodies.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.ApproximateDistanceTo(HAL.Spatial.Body,HAL.Units.Length.Length)">
      <summary>Computes the distance between this body and a second one using the lowest representation level available.</summary>
      <param name="body">Second body.</param>
      <param name="minimumDistance">Minimum distance after which the calculation will stop.</param>
      <returns>Distance between the two bodies.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.DistanceTo(HAL.Spatial.RepresentationLevel,HAL.Spatial.Body,HAL.Spatial.RepresentationLevel,HAL.Units.Length.Length)">
      <summary>Computes the distance between this body and a second one.</summary>
      <param name="thisLevel">Representation level to use for this body.</param>
      <param name="body">Second body.</param>
      <param name="otherLevel">Representation level to use for other body.</param>
      <param name="minimumDistance">Minimum distance after which the calculation will stop.</param>
      <returns>Distance between the two bodies.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.ClosestPoint(HAL.Spatial.Vector3D,HAL.Units.Length.m@)">
      <summary>Computes the closest distance between a specified point and this body.</summary>
      <param name="point">Test point.</param>
      <param name="distance">Resulting distance.</param>
      <returns>Closest point on the part.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.Intersects(HAL.Spatial.Body)">
      <summary>Calculates whether this body and a second one intersect using the higher representation level available.</summary>
      <param name="body">Second body.</param>
      <returns>Whether the two bodies intersect.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.ApproximateIntersects(HAL.Spatial.Body)">
      <summary>Calculates whether this body and a second one intersect using the lowest representation level available.</summary>
      <param name="body">Second body.</param>
      <returns>Whether the two bodies intersect.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.Intersects(HAL.Spatial.RepresentationLevel,HAL.Spatial.Body,HAL.Spatial.RepresentationLevel)">
      <summary>Calculates whether this body and a second one intersect.</summary>
      <param name="thisLevel">Representation level to use for this body.</param>
      <param name="body">Second body.</param>
      <param name="otherLevel">Representation level to use for other body.</param>
      <returns>Whether the two bodies intersect.</returns>
    </member>
    <member name="M:HAL.Spatial.Body.EnsureAllTrees">
      <summary>Ensures that all meshes have their calculated trees.</summary>
    </member>
    <member name="M:HAL.Spatial.Body.EnsureTree(HAL.Spatial.RepresentationLevel)">
      <summary>Ensures that all meshes have their calculated trees.</summary>
    </member>
    <member name="M:HAL.Spatial.Body.Clone">
      <summary>Clones this object.</summary>
      <returns>Deep copy of the original object.</returns>
    </member>
    <member name="T:HAL.Spatial.IBody">
      <summary>Marks a geometric representation of a body.</summary>
    </member>
    <member name="P:HAL.Spatial.IBody.Location">
      <summary>Current location of the body group.</summary>
    </member>
    <member name="P:HAL.Spatial.IBody.Volumetric">
      <summary>Volumetric representation.</summary>
      <remarks>This should generally be a convex hull or similar that can be used for extremely fast calculations.</remarks>
    </member>
    <member name="P:HAL.Spatial.IBody.LowResolution">
      <summary>Low resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.IBody.HighResolution">
      <summary>High resolution representation.</summary>
      <remarks>Used for display and other high-fidelity scenarios.</remarks>
    </member>
    <member name="M:HAL.Spatial.IBody.Relocate(HAL.Spatial.MatrixFrame,System.Boolean)">
      <summary>Relocates the body.</summary>
      <param name="transformation">Transformation.</param>
      <param name="relative">Whether the relocation should be relative to the current location or absolute. Defaults to false, absolute.</param>
    </member>
    <member name="T:HAL.Spatial.RepresentationLevel">
      <summary>Available levels of representation of a body.</summary>
    </member>
    <member name="F:HAL.Spatial.RepresentationLevel.Volumetric">
      <summary>Volumetric representation.</summary>
      <remarks>This should generally be a convex hull or similar that can be used for extremely fast calculations.</remarks>
    </member>
    <member name="F:HAL.Spatial.RepresentationLevel.Low">
      <summary>Low resolution representation.</summary>
    </member>
    <member name="F:HAL.Spatial.RepresentationLevel.High">
      <summary>High resolution representation.</summary>
      <remarks>Used for display and other high-fidelity scenarios.</remarks>
    </member>
    <member name="T:HAL.Spatial.BodyGroup">
      <summary>Group of bodies which move as one.</summary>
    </member>
    <member name="P:HAL.Spatial.BodyGroup.Volumetric">
      <summary>Volumetric representation.</summary>
      <remarks>This should generally be a convex hull or similar that can be used for extremely fast calculations.</remarks>
    </member>
    <member name="P:HAL.Spatial.BodyGroup.LowResolution">
      <summary>Low resolution representation.</summary>
    </member>
    <member name="P:HAL.Spatial.BodyGroup.HighResolution">
      <summary>High resolution representation.</summary>
      <remarks>Used for display and other high-fidelity scenarios.</remarks>
    </member>
    <member name="M:HAL.Spatial.BodyGroup.Add(HAL.Spatial.Body,HAL.Spatial.MatrixFrame)">
      <summary>Adds a body to the group.</summary>
      <param name="body">Body to add.</param>
      <param name="relativeLocation">Location of body relative to common base.</param>
    </member>
    <member name="M:HAL.Spatial.BodyGroup.Remove(HAL.Spatial.Body)">
      <summary>Removes a body from the group.</summary>
      <param name="body">Body to remove.</param>
    </member>
    <member name="T:HAL.Spatial.CompositeFrame">
      <summary>Represents a frame in both operational and joint spaces.</summary>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.#ctor">
      <summary>Creates a null composite frame.</summary>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.#ctor(HAL.Spatial.CompositeFrame)">
      <summary>Creates a composite frame from an existing one.</summary>
      <param name="compositeFrame">Existing frame.</param>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.#ctor(HAL.Spatial.ReferencedFrame,System.String)">
      <summary>Creates a composite frame from an existing <see cref="T:HAL.Spatial.ReferencedFrame" />.</summary>
      <param name="cartesianFrame">Frame in operational space.</param>
      <param name="alias">Frame alias.</param>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.#ctor(HAL.Motion.JointPositions,System.String)">
      <summary>Creates a composite frame from existing <see cref="T:HAL.Units.IJointPosition" />s.</summary>
      <param name="jointFrame">Frame in joint space.</param>
      <param name="alias">Frame alias.</param>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.#ctor(HAL.Spatial.ReferencedFrame,HAL.Motion.JointPositions,System.String)">
      <summary>Creates a composite frame from existing values.</summary>
      <param name="cartesianFrame">Frame in operational space.</param>
      <param name="jointFrame">Frame in joint space.</param>
      <param name="alias">Frame alias.</param>
    </member>
    <member name="P:HAL.Spatial.CompositeFrame.CartesianFrame">
      <summary>Frame in joint space.</summary>
    </member>
    <member name="P:HAL.Spatial.CompositeFrame.JointFrame">
      <summary>Frame expressed in the device joint space.</summary>
    </member>
    <member name="P:HAL.Spatial.CompositeFrame.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.HasJointDisplacement(HAL.Spatial.CompositeFrame,HAL.Spatial.CompositeFrame)">
      <summary>Asserts that the joints positions stored in two composite frames are not similar.</summary>
      <param name="from">First frame.</param>
      <param name="to">Second frame.</param>
      <returns>
      </returns>
    </member>
    <member name="E:HAL.Spatial.CompositeFrame.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.Equals(HAL.Spatial.CompositeFrame)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.op_Equality(HAL.Spatial.CompositeFrame,HAL.Spatial.CompositeFrame)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Spatial.CompositeFrame" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.CompositeFrame.op_Inequality(HAL.Spatial.CompositeFrame,HAL.Spatial.CompositeFrame)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Spatial.CompositeFrame" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Spatial.Curves.Arc">
      <summary>Arc.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.PositionAt(System.Double)">
      <summary>Retrieves the position on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.PositionAt(HAL.Units.Length.m)">
      <summary>Retrieves the position on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.RotationAt(System.Double)">
      <summary>Retrieves the rotation on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.RotationAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the rotation on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.TangentAt(System.Double)">
      <summary>Retrieves the tangent on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding tangent vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.ParameterAt(HAL.Units.Length.m)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.ParameterAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the parameter on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.ParameterAtArcDistance(System.Boolean,HAL.Units.Length.m)">
      <summary>Computes an arc intersection parameter from an end point of the arc and a given distance.</summary>
      <param name="fromEnd">Whether the arc intersection should be centered on the end or the start point of the arc.</param>
      <param name="radius">Radius of the arc intersection.</param>
      <returns>Intersection parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Reparametrize(HAL.Spatial.Vector3D)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Reparametrize(HAL.Spatial.Curves.ICurve)">
      <summary>Retrieves the normalized parameters on this closest to the start and end of a curve.</summary>
      <param name="other">Test curve.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Pull(HAL.Spatial.Vector3D)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.LengthFrom(System.Double,System.Double,System.Int32)">
      <summary>Computes position displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <param name="samplingNumber">Sampling number.</param>
      <returns>Corresponding position length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.RotationFrom(System.Double,System.Double)">
      <summary>Computes orientation displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <returns>Corresponding orientation length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.HAL#Spatial#ISpatialObject1D#Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.#ctor(HAL.Spatial.Curves.Circle,HAL.Units.UnitizedInterval{HAL.Units.Angle.rad},System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates an arc as a segment of an existing circle.</summary>
      <param name="circle">Host circle.</param>
      <param name="angle">Angular range on the circle where the arc is.</param>
      <param name="startRotation">Rotation at start.</param>
      <param name="endRotation">Rotation at end.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.#ctor(HAL.Spatial.Curves.Circle,HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates an arc as a segment of an existing circle.</summary>
      <param name="circle">Host circle.</param>
      <param name="from">Angular position on the circle where the arc starts.</param>
      <param name="to">Angular position on the circle where the arc ends.</param>
      <param name="startRotation">Rotation at start.</param>
      <param name="endRotation">Rotation at end.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates an arc from three points and orientation components. </summary>
      <param name="from">The starting point, that gives the orientation.</param>
      <param name="through">The first way point.</param>
      <param name="to">The second way point.</param>
      <param name="startRotation">Rotation at start.</param>
      <param name="endRotation">Rotation at end.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.#ctor(HAL.Spatial.Curves.Arc)">
      <summary> Creates an arc with an arc. </summary>
      <param name="arc">Arc.</param>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.IsValid">
      <summary>Whether this curve is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.PositionAtStart">
      <summary>Start position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.PositionAtEnd">
      <summary>End position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.RotationAtStart">
      <summary>Start rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.RotationAtEnd">
      <summary>End rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Length">
      <summary>Total position displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Rotation">
      <summary>Total rotation displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Host">
      <summary>Host circle of this arc.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Frame">
      <summary>Arc host frame.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Center">
      <summary>Center.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Radius">
      <summary>Arc radius.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.Angle">
      <summary>Angular position of the arc on its host circle.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Arc.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the localized Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Intersect(HAL.Spatial.Curves.Arc)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Intersect(HAL.Spatial.Curves.Circle)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Intersect(HAL.Spatial.Curves.Line)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Intersect(HAL.Spatial.MatrixFrame)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Trim(HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.BlendSettings,System.Double@,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on end points.</summary>
      <param name="startBlend">Blend settings at the start point.</param>
      <param name="endBlend">Blend settings at the end point.</param>
      <param name="previousExitParameter">Start blend exit parameter.</param>
      <param name="entryParameter">End blend entry parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Arc.Trim(HAL.Motion.Settings.BlendSettings,System.Boolean,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on one of extremity point.</summary>
      <param name="settings">Blend settings at the extremity point.</param>
      <param name="atEnd">Whether the trim operation should be applied on the end or start of the section.</param>
      <param name="parameter">Blend exit(if at start) or entry(if at end) parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="T:HAL.Spatial.Curves.Blend">
      <summary>Blend.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.PositionAt(System.Double)">
      <summary>Retrieves the position on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.PositionAt(HAL.Units.Length.m)">
      <summary>Retrieves the position on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.RotationAt(System.Double)">
      <summary>Retrieves the rotation on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.RotationAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the rotation on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.ParameterAt(HAL.Units.Length.m)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.ParameterAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the parameter on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.TangentAt(System.Double)">
      <summary>Retrieves the tangent on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding tangent vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.Reparametrize(HAL.Spatial.Vector3D)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.Reparametrize(HAL.Spatial.Curves.ICurve)">
      <summary>Retrieves the normalized parameters on this closest to the start and end of a curve.</summary>
      <param name="other">Test curve.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.Pull(HAL.Spatial.Vector3D)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.LengthFrom(System.Double,System.Double,System.Int32)">
      <summary>Computes position displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <param name="samplingNumber">Sampling number.</param>
      <returns>Corresponding position length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.RotationFrom(System.Double,System.Double)">
      <summary>Computes orientation displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <returns>Corresponding orientation length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.HAL#Spatial#ISpatialObject1D#Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.#ctor(HAL.Spatial.Curves.ICurve,HAL.Spatial.Curves.ICurve,System.Double,System.Double)">
      <summary>Creates a blend between two curves from previously computed intersection information.</summary>
      <param name="entry">Entry curve.</param>
      <param name="exit">Exit curve.</param>
      <param name="entryParameter">Parameter on the entry curve at which the blend starts the earliest (from position or orientation blend settings).</param>
      <param name="exitParameter">Parameter on the exit curve at which the blend ends the latest (from position or orientation blend settings).</param>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.IsValid">
      <summary>Whether this curve is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.PositionAtStart">
      <summary>Start position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.PositionAtEnd">
      <summary>End position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.RotationAtStart">
      <summary>Start rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.RotationAtEnd">
      <summary>End rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.Length">
      <summary>Total position displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.Rotation">
      <summary>Total rotation displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.Entry">
      <summary>Entry Curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.Exit">
      <summary>Exit Curve. </summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.EntryParameter">
      <summary>Parameter on the entry curve at the intersection with the blend zone.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.ExitParameter">
      <summary>Parameter on the exit curve at the intersection with the blend zone.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Blend.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Blend.ToString">
      <inheritdoc />
    </member>
    <member name="T:HAL.Spatial.Curves.Circle">
      <summary>Circle.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.PositionAt(System.Double)">
      <summary>Retrieves the position on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.PositionAt(HAL.Units.Length.m)">
      <summary>Retrieves the position on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.RotationAt(System.Double)">
      <summary>Retrieves the rotation on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.RotationAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the rotation on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.TangentAt(System.Double)">
      <summary>Retrieves the tangent on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding tangent vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.ParameterAt(HAL.Units.Length.m)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.ParameterAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the parameter on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Reparametrize(HAL.Spatial.Vector3D)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Reparametrize(HAL.Spatial.Curves.ICurve)">
      <summary>Retrieves the normalized parameters on this closest to the start and end of a curve.</summary>
      <param name="other">Test curve.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Pull(HAL.Spatial.Vector3D)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.LengthFrom(System.Double,System.Double,System.Int32)">
      <summary>Computes position displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <param name="samplingNumber">Sampling number.</param>
      <returns>Corresponding position length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.RotationFrom(System.Double,System.Double)">
      <summary>Computes orientation displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <returns>Corresponding orientation length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.HAL#Spatial#ISpatialObject1D#Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.#ctor(HAL.Spatial.MatrixFrame,HAL.Units.Length.m,System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates a circle at the origin of a frame.</summary>
      <param name="frame">Host frame. The X axis will specify the seam of the circle, which will rotate counter-clockwise around the Z axis.</param>
      <param name="radius">Circle radius.</param>
      <param name="startRotation">Rotation at start.</param>
      <param name="endRotation">Rotation at end.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates a circle from three points.</summary>
      <param name="from">First point.</param>
      <param name="through">Second point.</param>
      <param name="to">Third point.</param>
      <param name="startRotation">Rotation at start.</param>
      <param name="endRotation">Rotation at end.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.#ctor(HAL.Spatial.Curves.Circle)">
      <summary>Creates a circle from a circle.</summary>
      <param name="circle">Circle</param>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.IsValid">
      <summary>Whether this curve is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.PositionAtStart">
      <summary>Start position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.PositionAtEnd">
      <summary>End position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.RotationAtStart">
      <summary>Start rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.RotationAtEnd">
      <summary>End rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.Length">
      <summary>Total position displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.Rotation">
      <summary>Total rotation displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.Frame">
      <summary>Circle host frame.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.Center">
      <summary>Center.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.Radius">
      <summary>Circle radius.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Circle.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the localized Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Intersect(HAL.Spatial.Curves.Circle)">
      <summary>The intersection between two circles.</summary>
      <param name="circle">
      </param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Intersect(HAL.Spatial.Curves.Arc)">
      <summary>The intersection between a circle and an arc.</summary>
      <param name="arc">
      </param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Intersect(HAL.Spatial.Curves.Line)">
      <summary>The intersection between this circle and a line.</summary>
      <param name="line">The line.</param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Circle.Intersect(HAL.Spatial.MatrixFrame)">
      <summary>The intersection between this circle and a frame.</summary>
      <param name="frame">Frame.</param>
      <returns>Intersections.</returns>
    </member>
    <member name="T:HAL.Spatial.Curves.ICurve">
      <summary>Qualifies an oriented curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.ICurve.PositionAtStart">
      <summary>Start position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.ICurve.PositionAtEnd">
      <summary>End position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.ICurve.RotationAtStart">
      <summary>Start rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.ICurve.RotationAtEnd">
      <summary>End rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.ICurve.Length">
      <summary>Total position displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.ICurve.Rotation">
      <summary>Total rotation displacement along the curve.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.PositionAt(System.Double)">
      <summary>Retrieves the position on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.PositionAt(HAL.Units.Length.m)">
      <summary>Retrieves the position on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.RotationAt(System.Double)">
      <summary>Retrieves the rotation on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.RotationAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the rotation on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.TangentAt(System.Double)">
      <summary>Retrieves the tangent on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding tangent vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.ParameterAt(HAL.Units.Length.m)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.ParameterAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the parameter on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.Reparametrize(HAL.Spatial.Vector3D)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.Pull(HAL.Spatial.Vector3D)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.LengthFrom(System.Double,System.Double,System.Int32)">
      <summary>Computes position displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <param name="samplingNumber">Sampling number.</param>
      <returns>Corresponding position length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.RotationFrom(System.Double,System.Double)">
      <summary>Computes orientation displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <returns>Corresponding orientation length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.ICurve.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="T:HAL.Spatial.Curves.Line">
      <summary>Line.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.PositionAt(System.Double,System.Boolean)">
      <summary>Retrieves the position on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <param name="strict">False if considered as a line. </param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.PositionAt(System.Double)">
      <summary>Retrieves the position on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding position.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.PositionAt(HAL.Units.Length.m)">
      <summary>Retrieves the position on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding position.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.PositionAt(HAL.Units.Length.m,System.Boolean)">
      <summary>Retrieves the position on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <param name="strict">False if considered as a line. </param>
      <returns>Corresponding position.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.RotationAt(System.Double)">
      <summary>Retrieves the rotation on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.RotationAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the rotation on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding rotation.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.TangentAt(System.Double)">
      <summary>Retrieves the tangent on the curve at a specified parameter.</summary>
      <param name="parameter">Normalized parameter on the curve.</param>
      <returns>Corresponding tangent vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ParameterAt(HAL.Units.Length.m)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ParameterAt(HAL.Units.Length.m,System.Boolean)">
      <summary>Retrieves the parameter on the curve at a specified distance along the curve.</summary>
      <param name="distance">Distance along the curve.</param>
      <param name="strict">False if considered as a line. </param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ParameterAt(HAL.Units.Angle.rad)">
      <summary>Retrieves the parameter on the curve at a specified angular distance along the curve.</summary>
      <param name="distance">Angular distance along the curve.</param>
      <returns>Corresponding parameter.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Reparametrize(HAL.Spatial.Vector3D)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Reparametrize(HAL.Spatial.Curves.ICurve)">
      <summary>Retrieves the normalized parameters on this closest to the start and end of a curve.</summary>
      <param name="other">Test curve.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ClosestParameter(HAL.Spatial.Vector3D,System.Boolean)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <param name="strict">Whether the line should be considered a segment.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ClosestParameter(HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Retrieves the normalized parameter on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <param name="strict">Whether the line should be considered a segment.</param>
      <returns>Closest parameter on the curve.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ClosestPoint(HAL.Spatial.Curves.Line,HAL.Units.Length.m@,System.Boolean)">
      <summary>Calculates the closest point on this line to the one given.</summary>
      <param name="other">Line to test.</param>
      <param name="squaredDistance">Squared distance between closest points.</param>
      <param name="strict">Whether the point should belong to the line segment range.</param>
      <returns>Intersection details with closest point on this and the parameters of the intersection on both lines.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Pull(HAL.Spatial.Vector3D)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ClosestPosition(HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <param name="strict">Whether the line should be considered a segment.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ClosestPosition(HAL.Spatial.Vector3D,System.Boolean)">
      <summary>Retrieves the point on the curve closest to a test point.</summary>
      <param name="point">Test point.</param>
      <param name="strict">Whether the line should be considered a segment.</param>
      <returns>Closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.LengthFrom(System.Double,System.Double,System.Int32)">
      <summary>Computes position displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <param name="samplingNumber">Sampling number.</param>
      <returns>Corresponding position length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.RotationFrom(System.Double,System.Double)">
      <summary>Computes orientation displacement along a zone of the curve specified by two parameters.</summary>
      <param name="entryPositionParameter">Entry parameter.</param>
      <param name="exitPositionParameter">Exit parameter.</param>
      <returns>Corresponding orientation length.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.HAL#Spatial#ISpatialObject1D#Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Line.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Line.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.Line.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates a line between two oriented positions.</summary>
      <param name="startPosition">Start position.</param>
      <param name="endPosition">End position.</param>
      <param name="startRotation">Start rotation.</param>
      <param name="endRotation">End rotation.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Units.Length.m,System.Nullable{HAL.Numerics.Quaternion},System.Nullable{HAL.Numerics.Quaternion})">
      <summary>Creates a line from a start oriented position and a specified span.</summary>
      <param name="from">Start position.</param>
      <param name="direction">Line direction.</param>
      <param name="length">Desired length.</param>
      <param name="startRotation">Start rotation.</param>
      <param name="endRotation">End rotation.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.#ctor(HAL.Spatial.QuaternionFrame,HAL.Spatial.QuaternionFrame)">
      <summary>Creates a line between two frames.</summary>
      <param name="from">First frame.</param>
      <param name="to">Second frame.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.#ctor(HAL.Spatial.Curves.Line)">
      <summary> Creates a line with a line. </summary>
      <param name="line">Line.</param>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.IsValid">
      <summary>Whether this curve is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.PositionAtStart">
      <summary>Start position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.PositionAtEnd">
      <summary>End position.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.RotationAtStart">
      <summary>Start rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.RotationAtEnd">
      <summary>End rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.Length">
      <summary>Total position displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.Rotation">
      <summary>Total rotation displacement along the curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.Direction">
      <summary>Line direction.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.Span">
      <summary>Line span between its start and end positions.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.Line.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the localized Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Intersect(HAL.Spatial.Curves.Line)">
      <summary>Attempts to find the intersection between this and another object.</summary>
      <param name="other">Item to intersect.</param>
      <returns>Result(s) of the intersection, if any.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Intersect(HAL.Spatial.Curves.Line,System.Boolean)">
      <summary>Attempts to find the intersection between this and another object.</summary>
      <param name="other">Item to intersect.</param>
      <param name="strict">Whether the intersection should be restricted to the line segments.</param>
      <returns>Result(s) of the intersection, if any.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Intersect(HAL.Spatial.Curves.Circle)">
      <summary> Computes the intersection between this line and a circle. </summary>
      <param name="circle">The circle.</param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Intersect(HAL.Spatial.Curves.Arc)">
      <summary> Computes the intersection between this line and a arc. </summary>
      <param name="arc">The arc.</param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Intersect(HAL.Spatial.MatrixFrame)">
      <summary>Compute the intersection between this line and a plane.</summary>
      <param name="frame">
      </param>
      <returns>The curve intersection event.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Trim(HAL.Motion.Settings.BlendSettings,HAL.Motion.Settings.BlendSettings,System.Double@,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on end points.</summary>
      <param name="startBlend">Blend settings at the start point.</param>
      <param name="endBlend">Blend settings at the end point.</param>
      <param name="previousExitParameter">Start blend exit parameter.</param>
      <param name="entryParameter">End blend entry parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="M:HAL.Spatial.Curves.Line.Trim(HAL.Motion.Settings.BlendSettings,System.Boolean,System.Double@)">
      <summary>Trims this path section geometry by blend settings applied on one of extremity point.</summary>
      <param name="settings">Blend settings at the extremity point.</param>
      <param name="atEnd">Whether the trim operation should be applied on the end or start of the section.</param>
      <param name="parameter">Blend exit(if at start) or entry(if at end) parameter.</param>
      <returns>Trimmed path section.</returns>
    </member>
    <member name="T:HAL.Spatial.Curves.TrimmedCurve">
      <summary>Represents a portion of a curve between two parameters.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.#ctor(HAL.Spatial.Curves.ICurve,System.Double,System.Double)">
      <summary>Creates a trimmed curve.</summary>
      <param name="host">Curve to trim.</param>
      <param name="start">Parameter on curve to start trim.</param>
      <param name="end">Parameter on curve to end trim.</param>
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.Host">
      <summary>Base curve.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.StartParameter">
      <summary>Parameter at which to start the trim.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.EndParameter">
      <summary>Parameter at which to end the trim.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.IsValid">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.PositionAtStart">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.PositionAtEnd">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.RotationAtStart">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.RotationAtEnd">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.Length">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.Rotation">
      <inheritdoc />
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.RotationFromHostStart">
      <summary>Rotation between host start and this start parameter.</summary>
    </member>
    <member name="P:HAL.Spatial.Curves.TrimmedCurve.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.PositionAt(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.PositionAt(HAL.Units.Length.m)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.RotationAt(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.RotationAt(HAL.Units.Angle.rad)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.TangentAt(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.ParameterAt(HAL.Units.Length.m)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.ParameterAt(HAL.Units.Angle.rad)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.Reparametrize(HAL.Spatial.Vector3D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.Reparametrize(HAL.Spatial.Curves.ICurve)">
      <summary>Retrieves the normalized parameters on this closest to the start and end of a curve.</summary>
      <param name="other">Test curve.</param>
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.Pull(HAL.Spatial.Vector3D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.LengthFrom(System.Double,System.Double,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.RotationFrom(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.HAL#Spatial#ISpatialObject1D#Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Curves.TrimmedCurve.HAL#Spatial#ISpatialObject1D#Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Spatial.DHParameters">
      <summary>Frame in three dimensions, specified as classical DH parameters (rotation around Z1 * translation along Z1 * rotation around X2 * translation along X2).</summary>
    </member>
    <member name="M:HAL.Spatial.DHParameters.Create(HAL.Units.Angle.Angle,HAL.Units.Length.Length,HAL.Units.Angle.Angle,HAL.Units.Length.Length,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame specified with classic Denavit-Hartenberg parameters.</summary>
      <param name="rz1">Rotation angle between x1 and x2 around z1.</param>
      <param name="tz1">Distance between x1 and x2 along z1.</param>
      <param name="rx2">Rotation angle between z1 and z2 around x2.</param>
      <param name="tx2">Distance between z1 and z2 along x2.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.#ctor">
      <summary>Empty constructor, initializing a neutral DH.</summary>
    </member>
    <member name="M:HAL.Spatial.DHParameters.#ctor(HAL.Spatial.DHParameters)">
      <summary>Creates DH parameters from an existing one.</summary>
      <param name="dhParameters">Existing DH parameters.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates DH parameters from existing parameters.</summary>
      <param name="rz1">Rotation angle between x1 and x2 around z1.</param>
      <param name="tz1">Distance between x1 and x2 along z1.</param>
      <param name="rx2">Rotation angle between z1 and z2 around x2.</param>
      <param name="tx2">Distance between z1 and z2 along x2.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates DH parameters from a matrix-based frame.</summary>
      <param name="frame">Matrix-based frame.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.#ctor(HAL.Spatial.EulerFrame)">
      <summary>Creates DH parameters from an Euler frame.</summary>
      <param name="eulerFrame">Euler frame.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.#ctor(HAL.Spatial.QuaternionFrame)">
      <summary>Creates DH parameters from a quaternion frame.</summary>
      <param name="quaternionFrame">Quaternion frame.</param>
    </member>
    <member name="P:HAL.Spatial.DHParameters.Rz1">
      <summary>Operation 1: θ (theta). Rotation angle between x1 and x2 around z1.</summary>
    </member>
    <member name="P:HAL.Spatial.DHParameters.Tz1">
      <summary>Operation 2: d. Distance between x1 and x2 along z1.</summary>
    </member>
    <member name="P:HAL.Spatial.DHParameters.Rx2">
      <summary>Operation 3: α (alpha). Rotation angle between z1 and z2 around x2.</summary>
    </member>
    <member name="P:HAL.Spatial.DHParameters.Tx2">
      <summary>Operation 4: r. Distance between z1 and z2 along x2.</summary>
    </member>
    <member name="P:HAL.Spatial.DHParameters.IsValid">
      <summary>Verifies that the set of DH parameters is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.DHParameters.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Spatial.DHParameters.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the DH parameters.</returns>
    </member>
    <member name="E:HAL.Spatial.DHParameters.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Spatial.DHParameters.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Spatial.DHParameters.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="T:HAL.Spatial.EulerFrame">
      <summary>Frame in three dimensions, specified as a dual quaternion specifying a position and a rotation.</summary>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.Create(HAL.Spatial.Vector3D,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified in intrinsic Euler or Tait-Bryan angles.</summary>
      <param name="origin">Frame origin.</param>
      <param name="axisA">First rotation direction.</param>
      <param name="axisB">Second rotation direction.</param>
      <param name="axisC">Third rotation direction.</param>
      <param name="angleA">First rotation angle.</param>
      <param name="angleB">Second rotation angle.</param>
      <param name="angleC">Third rotation angle.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.Create(HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Units.Angle.Angle,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified in intrinsic Euler or Tait-Bryan angles.</summary>
      <param name="x">Origin X coordinate.</param>
      <param name="y">Origin Y coordinate.</param>
      <param name="z">Origin Z coordinate.</param>
      <param name="axisA">First rotation direction.</param>
      <param name="axisB">Second rotation direction.</param>
      <param name="axisC">Third rotation direction.</param>
      <param name="angleA">First rotation angle.</param>
      <param name="angleB">Second rotation angle.</param>
      <param name="angleC">Third rotation angle.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.#ctor">
      <summary>Empty constructor, initializing a neutral Euler transformation.</summary>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.#ctor(HAL.Spatial.EulerFrame)">
      <summary>Create a Euler Frame from an existing one.</summary>
      <param name="eulerFrame">
      </param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.EulerRotation)">
      <summary>Creates an Euler frame from a position and a rotation.</summary>
      <param name="position">Position component.</param>
      <param name="rotation">Rotation component.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates an Euler frame from a matrix frame.</summary>
      <param name="frame">Matrix frame.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.#ctor(HAL.Spatial.DHParameters)">
      <summary>Creates an Euler frame from DH parameters.</summary>
      <param name="dhFrame">DH parameters.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.#ctor(HAL.Spatial.QuaternionFrame)">
      <summary>Creates and Euler frame from a quaternion frame.</summary>
      <param name="quaternionFrame">Quaternion frame.</param>
    </member>
    <member name="P:HAL.Spatial.EulerFrame.Position">
      <summary>Position component of the Euler frame.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerFrame.Rotation">
      <summary>Rotation component of the Euler frame.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerFrame.IsValid">
      <summary>Verifies that the Euler frame is valid.</summary>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the Euler Frame.</returns>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.Equals(HAL.Spatial.EulerFrame)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.op_Explicit(HAL.Spatial.QuaternionFrame)~HAL.Spatial.EulerFrame">
      <summary>Converts a quaternion frame to a Euler frame.</summary>
      <param name="quaternionFrame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.op_Explicit(HAL.Spatial.EulerFrame)~HAL.Spatial.QuaternionFrame">
      <summary>Converts a Euler frame to a quaternion frame.</summary>
      <param name="eulerFrame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.op_Explicit(HAL.Spatial.DHParameters)~HAL.Spatial.EulerFrame">
      <summary>Converts a DH frame to a Euler frame.</summary>
      <param name="dhFrame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.op_Explicit(HAL.Spatial.EulerFrame)~HAL.Spatial.DHParameters">
      <summary>Converts a Euler frame to a DH frame.</summary>
      <param name="eulerFrame">Frame to convert.</param>
    </member>
    <member name="E:HAL.Spatial.EulerFrame.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Spatial.EulerFrame.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Spatial.EulerRotation">
      <summary>Rotation in three dimensions by Euler angles, based on the extrinsic ZYX convention.</summary>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.#ctor(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.RotationConvention)">
      <summary>Creates a Euler rotation.</summary>
      <param name="firstAngle">Rotation around the first axis.</param>
      <param name="secondAngle">Rotation around the second axis.</param>
      <param name="thirdAngle">Rotation around the third axis.</param>
      <param name="firstAxis">First rotation axis.</param>
      <param name="secondAxis">Second rotation axis.</param>
      <param name="thirdAxis">Third rotation axis.</param>
      <param name="convention">Whether rotations should be intrinsic or extrinsic.</param>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.Axis)">
      <summary>Creates an Euler angle rotation from a rotation vector.</summary>
      <param name="vector">Rotation vector.</param>
      <param name="firstAxis">First rotation axis.</param>
      <param name="secondAxis">Second rotation axis.</param>
      <param name="thirdAxis">Third rotation axis.</param>
      <remarks> The magnitude of the vector is setting the rotation angle around the vector. </remarks>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.#ctor(HAL.Numerics.Quaternion,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.Axis)">
      <summary>Creates an Euler angle rotation from a quaternion.</summary>
      <param name="quaternion">Rotation quaternion.</param>
      <param name="firstAxis">First rotation axis.</param>
      <param name="secondAxis">Second rotation axis.</param>
      <param name="thirdAxis">Third rotation axis.</param>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.#ctor(HAL.Spatial.RotationMatrix,HAL.Spatial.Axis,HAL.Spatial.Axis,HAL.Spatial.Axis)">
      <summary>Creates a Euler rotation from a rotation matrix.</summary>
      <param name="rotationMatrix">Rotation matrix.</param>
      <param name="firstAxis">First rotation axis.</param>
      <param name="secondAxis">Second rotation axis.</param>
      <param name="thirdAxis">Third rotation axis.</param>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.FirstAngle">
      <summary>Rotation around the first axis.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.SecondAngle">
      <summary>Rotation around the second axis.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.ThirdAngle">
      <summary>Rotation around the third axis.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.FirstAxis">
      <summary>First rotation axis.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.SecondAxis">
      <summary>Second rotation axis.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.ThirdAxis">
      <summary>Third rotation axis.</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.Convention">
      <summary>Rotation convention.</summary>
    </member>
    <member name="F:HAL.Spatial.EulerRotation.Default">
      <summary>Default Euler rotation (0,0,0).</summary>
    </member>
    <member name="P:HAL.Spatial.EulerRotation.IsValid">
      <summary>Verifies if the Euler angles are valid numbers.</summary>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.op_Explicit(HAL.Spatial.EulerRotation)~HAL.Numerics.Quaternion">
      <summary>Converts a Euler rotation to a quaternion.</summary>
      <param name="eulerRotation">Rotation to convert.</param>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.op_Explicit(HAL.Spatial.EulerRotation)~HAL.Spatial.Vector3D">
      <summary>Converts a Euler rotation to an axis-angle rotation.</summary>
      <param name="eulerRotation">Rotation to convert.</param>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.op_Explicit(HAL.Spatial.EulerRotation)~HAL.Spatial.RotationMatrix">
      <summary>Converts a Euler rotation to a rotation matrix.</summary>
      <param name="eulerRotation">Rotation to convert.</param>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.Equals(HAL.Spatial.EulerRotation)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.Equals(HAL.Spatial.EulerRotation,System.Int32)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <param name="precision">Test precision.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.op_Equality(HAL.Spatial.EulerRotation,HAL.Spatial.EulerRotation)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Spatial.EulerRotation" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.EulerRotation.op_Inequality(HAL.Spatial.EulerRotation,HAL.Spatial.EulerRotation)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Spatial.EulerRotation" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Spatial.IFrame`3">
      <summary>Qualifies a frame composed of a position and a rotation, each of them expressed in a specific formalism.</summary>
    </member>
    <member name="P:HAL.Spatial.IFrame`3.Position">
      <summary>Position component of the frame.</summary>
    </member>
    <member name="P:HAL.Spatial.IFrame`3.Rotation">
      <summary>Rotation component of the frame.</summary>
    </member>
    <member name="T:HAL.Spatial.IGeometryProvider">
      <summary>Implement this interface to create a geometry provider allowing HAL to use native geometry from its host environment.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.IIntersectable`1">
      <summary>Qualifies an object which can intersect another.</summary>
      <typeparam name="T">Type of object that can be intersected.</typeparam>
    </member>
    <member name="M:HAL.Spatial.Intersections.IIntersectable`1.Intersect(`0)">
      <summary>Attempts to find the intersection between this and another object.</summary>
      <param name="other">Item to intersect.</param>
      <returns>Result(s) of the intersection, if any.</returns>
    </member>
    <member name="T:HAL.Spatial.Intersections.IIntersectionEvent">
      <summary>Qualifies an intersection as defined in the geometry being intersected.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.IIntersectionEvent.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.IIntersectionEvent.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.IIntersectionEvent.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.IIntersectionEvent.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection">
      <summary>Stores the intersection results between two <see cref="T:HAL.Spatial.ISpatialObject" />s.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection.#ctor(HAL.Spatial.ISpatialObject,HAL.Spatial.Intersections.IIntersectionEvent,HAL.Spatial.Intersections.IIntersectionEvent)">
      <summary>Creates an <see cref="T:HAL.Spatial.Intersections.Intersection" />.</summary>
      <param name="result">Geometric result of the intersection.</param>
      <param name="eventA">First object <see cref="T:HAL.Spatial.Intersections.IIntersectionEvent" />.</param>
      <param name="eventB">Second object <see cref="T:HAL.Spatial.Intersections.IIntersectionEvent" />.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection.Result">
      <summary>Geometric result of the intersection.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection.GetResultOnA(HAL.Spatial.ISpatialObject)">
      <summary>Calculates the parameter on A at which this intersection occurs.</summary>
      <param name="a">Geometry of A.</param>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection.GetResultOnB(HAL.Spatial.ISpatialObject)">
      <summary>Calculates the parameter on B at which this intersection occurs.</summary>
      <param name="b">Geometry of B.</param>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection0DIn1D">
      <summary>Represents a 0-Dimensional intersection on a 1-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection0DIn1D.#ctor(System.Double)">
      <summary>Marks an intersection event at a given parameter.</summary>
      <param name="parameter">Parameter.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn1D.Parameter">
      <summary>Parameter of the intersection.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn1D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn1D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn1D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn1D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection0DIn2D">
      <summary>Represents a 0-Dimensional intersection on a 2-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection0DIn2D.#ctor(HAL.Spatial.ISpatialObject0D)">
      <summary>Marks an intersection event at a given parameter.</summary>
      <param name="parameter">Parameter, considered UV parameters on the 2D object.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn2D.Parameter">
      <summary>Parameter of the intersection.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn2D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn2D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn2D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn2D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection0DIn3D">
      <summary>Represents a 0-Dimensional intersection on a 3-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection0DIn3D.#ctor(HAL.Spatial.ISpatialObject0D)">
      <summary>Marks an intersection event at a given parameter.</summary>
      <param name="parameter">Parameter, considered UVW parameters on the 3D object.</param>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection0DIn3D.#ctor(HAL.Spatial.ISpatialObject0D,System.Int32)">
      <summary>Marks an intersection event at a given parameter.</summary>
      <param name="parameter">Parameter, considered UVW parameters on the 3D object.</param>
      <param name="componentIndex">Index of the component to which the parameter relates.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn3D.Parameter">
      <summary>Parameter of the intersection.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn3D.ComponentIndex">
      <summary>Parameter of the intersection.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn3D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn3D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn3D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection0DIn3D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection1DIn2D">
      <summary>Represents a 1-Dimensional intersection on a 2-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection1DIn2D.#ctor(HAL.Spatial.ISpatialObject1D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn2D.Parameter">
      <summary>Parameter(s) of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn2D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn2D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn2D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn2D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection1DIn3D">
      <summary>Represents a 1-Dimensional intersection on a 3-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection1DIn3D.#ctor(HAL.Spatial.ISpatialObject1D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection1DIn3D.#ctor(HAL.Spatial.ISpatialObject1D,System.Int32)">
      <summary>Marks an intersection event at a given parameter.</summary>
      <param name="parameter">Parameter, considered UVW parameters on the 3D object.</param>
      <param name="componentIndex">Index of the component to which the parameter relates.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn3D.Parameter">
      <summary>Parameter(s) of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn3D.ComponentIndex">
      <summary>Parameter of the intersection.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn3D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn3D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn3D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection1DIn3D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Intersection2DIn3D">
      <summary>Represents a 2-Dimensional intersection on a 3-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Intersection2DIn3D.#ctor(HAL.Spatial.ISpatialObject2D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection2DIn3D.Parameter">
      <summary>Geometry of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection2DIn3D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection2DIn3D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection2DIn3D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Intersection2DIn3D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.IOverlap">
      <summary>Qualifies an intersection overlap.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Overlap0D">
      <summary>Represents a 0-Dimensional overlap on a 0-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Overlap0D.#ctor(HAL.Spatial.ISpatialObject0D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap0D.Parameter">
      <summary>Geometry of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap0D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap0D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap0D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap0D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Overlap1D">
      <summary>Represents a 1-Dimensional overlap on a 1-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Overlap1D.#ctor(HAL.Spatial.ISpatialObject1D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap1D.Parameter">
      <summary>Geometry of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap1D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap1D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap1D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap1D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Overlap2D">
      <summary>Represents a 2-Dimensional overlap on a 2-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Overlap2D.#ctor(HAL.Spatial.ISpatialObject2D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap2D.Parameter">
      <summary>Geometry of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap2D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap2D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap2D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap2D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.Intersections.Overlap3D">
      <summary>Represents a 3-Dimensional overlap on a 3-Dimensional object.</summary>
    </member>
    <member name="M:HAL.Spatial.Intersections.Overlap3D.#ctor(HAL.Spatial.ISpatialObject3D)">
      <summary>Creates an overlap event.</summary>
      <param name="parameter">Geometry in the space of the intersecting element.</param>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap3D.Parameter">
      <summary>Geometry of the intersection in the space of the intersecting element.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap3D.IsValid">
      <summary>Whether the intersection event is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap3D.IsOverlap">
      <summary>Whether the intersection event is an overlap.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap3D.IntersectionDimension">
      <summary>Parameter dimension of the intersection result.</summary>
    </member>
    <member name="P:HAL.Spatial.Intersections.Overlap3D.HostDimension">
      <summary>Parameter dimension of the intersected geometry.</summary>
    </member>
    <member name="T:HAL.Spatial.IPosition">
      <summary>Qualifies a positional formalism.</summary>
    </member>
    <member name="T:HAL.Spatial.IRotation">
      <summary>Qualifies a rotation formalism.</summary>
    </member>
    <member name="T:HAL.Spatial.ISpatialObject">
      <summary>Qualifies a geometric object.</summary>
    </member>
    <member name="P:HAL.Spatial.ISpatialObject.IsValid">
      <summary>Whether this object is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.ISpatialObject.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="T:HAL.Spatial.ISpatialObject0D">
      <summary>Qualifies a geometric object with 0 parameter dimensions.</summary>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject0D.DistanceTo(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the distance between this and another object.</summary>
      <param name="other">Object to test.</param>
      <returns>Distance in SI units.</returns>
    </member>
    <member name="T:HAL.Spatial.ISpatialObject1D">
      <summary>Qualifies a geometric object with 1 parameter dimensions.</summary>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject1D.Pull(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the 0D object that best represents the projection of the other object on this.</summary>
      <param name="other">Object to project.</param>
      <returns>Projected geometry.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject1D.Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject1D.Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="T:HAL.Spatial.ISpatialObject2D">
      <summary>Qualifies a geometric object with 2 parameter dimensions.</summary>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject2D.Pull(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the 0D object that best represents the projection of the other object on this.</summary>
      <param name="other">Object to project.</param>
      <returns>Projected geometry.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject2D.Pull(HAL.Spatial.ISpatialObject1D)">
      <summary>Calculates the 1D object that best represents the projection of the other object on this.</summary>
      <param name="other">Object to project.</param>
      <returns>Projected geometry.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject2D.Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject2D.Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject2D.Reparametrize(HAL.Spatial.ISpatialObject2D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="T:HAL.Spatial.ISpatialObject3D">
      <summary>Qualifies a geometric object with 3 parameter dimensions.</summary>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Pull(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the 0D object that best represents the projection of the other object on this.</summary>
      <param name="other">Object to project.</param>
      <returns>Projected geometry.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Pull(HAL.Spatial.ISpatialObject1D)">
      <summary>Calculates the 1D object that best represents the projection of the other object on this.</summary>
      <param name="other">Object to project.</param>
      <returns>Projected geometry.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Pull(HAL.Spatial.ISpatialObject2D)">
      <summary>Calculates the 2D object that best represents the projection of the other object on this.</summary>
      <param name="other">Object to project.</param>
      <returns>Projected geometry.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Reparametrize(HAL.Spatial.ISpatialObject2D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="M:HAL.Spatial.ISpatialObject3D.Reparametrize(HAL.Spatial.ISpatialObject3D)">
      <summary>Calculates the parameters on this which best represent the other object.</summary>
      <param name="other">Object to test.</param>
      <returns>Parameters on this closest to other.</returns>
    </member>
    <member name="T:HAL.Spatial.ITransformable">
      <summary>Indicates that an object can be transformed. This non-generic version should be used in interfaces to indicate that they can be transformed.</summary>
    </member>
    <member name="T:HAL.Spatial.IHAL_Transformable`4">
      <summary>Indicates that an object can be transformed. This generic version should be used in all classes which have implementation to ensure the correct return type of transformations.</summary>
    </member>
    <member name="M:HAL.Spatial.IHAL_Transformable`4.Relocate(`1,`1)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.IHAL_Transformable`4.Rotate(`3)">
      <summary>Rotate the object with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.IHAL_Transformable`4.Rotate(`1,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.IHAL_Transformable`4.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.IHAL_Transformable`4.Translate(`1,HAL.Units.Length.m)">
      <summary>Translate the object along the Z axis of a specified frame.</summary>
      <param name="frame">Translation frame.</param>
      <param name="distance">Translation distance.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.IHAL_Transformable`4.Transform(`1)">
      <summary>Transform the object with a specified transformation.</summary>
      <param name="transformation">Transformation to apply.</param>
      <returns>Copy of the object, once transformed.</returns>
    </member>
    <member name="T:HAL.Spatial.ITransformation">
      <summary>Qualifies a transformation in position and rotation.</summary>
    </member>
    <member name="T:HAL.Spatial.MatrixFrame">
      <summary>4x4 transformation matrix.</summary>
    </member>
    <member name="P:HAL.Spatial.MatrixFrame.IsValid">
      <summary>True if the frame is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.MatrixFrame.ParameterDimensions">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.GetPlaneEquation">
      <summary>Plane equation for this frame, as Ax+By+Cz+D=0. </summary>
      <returns>Returns the array including A,B,C and D.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.GetHessianNormalForm">
      <summary>Hessian normal form of the frame.</summary>
      <returns>Returns the array including nx, ny, nz and p.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Pull(HAL.Spatial.Vector3D)">
      <summary>Gets the point on the frame closest to a test point.</summary>
      <param name="point">Test Point.</param>
      <returns>Returns the closest point on the frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Pull(HAL.Spatial.Curves.Line)">
      <summary>Calculates the projection of the line in this frame.</summary>
      <param name="line">Line.</param>
      <returns>Line from points closest to line start and line end.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.DistanceTo(HAL.Spatial.Vector3D)">
      <summary>Compute the signed distance between this frame and a point.</summary>
      <param name="point">Point.</param>
      <returns>Returns the distance between the point and its projection on the frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.PointAt(System.Double,System.Double)">
      <summary>Evaluate a point at a given set of parameters on the frame.</summary>
      <param name="u">X coordinate on the frame.</param>
      <param name="v">Y coordinate on the frame.</param>
      <returns>Returns the distance between the points.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.PointAt(System.Double,System.Double,System.Double)">
      <summary>Evaluate a point at a given set of parameters on the frame.</summary>
      <param name="u">X coordinate on the frame.</param>
      <param name="v">Y coordinate on the frame.</param>
      <param name="w">Z coordinate on the frame.</param>
      <returns>Returns the point on the frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Reparametrize(HAL.Spatial.Vector3D@)">
      <summary>Remap a point from the world coordinates system to the frame coordinates system.</summary>
      <param name="point">Point to remap.</param>
      <returns>Point remapped in the frame coordinate system.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Reparametrize(HAL.Spatial.Curves.Line)">
      <summary>Remap a line from the world coordinates system to the frame coordinates system.</summary>
      <param name="line">Line to remap.</param>
      <returns>Line remapped in the frame coordinate system.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.HAL#Spatial#ISpatialObject2D#Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.HAL#Spatial#ISpatialObject2D#Pull(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.HAL#Spatial#ISpatialObject2D#Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.HAL#Spatial#ISpatialObject2D#Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Reparametrize(HAL.Spatial.ISpatialObject2D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Create(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified as an axis-angle rotation.</summary>
      <param name="origin">Frame origin.</param>
      <param name="axisAngle">Axis-angle rotation.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Create(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Units.Angle.Angle,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified as an axis-angle rotation.</summary>
      <param name="origin">Frame origin.</param>
      <param name="axis">Rotation axis (e).</param>
      <param name="angle">Rotation angle (θ).</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Create(HAL.Spatial.Vector3D,HAL.Units.Absolute.Absolute,HAL.Units.Absolute.Absolute,HAL.Units.Absolute.Absolute,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified as an axis-angle rotation.</summary>
      <param name="origin">Frame origin.</param>
      <param name="ax">X component of the axis-angle.</param>
      <param name="ay">Y component of the axis-angle.</param>
      <param name="az">Z component of the axis-angle.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Create(HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Absolute.Absolute,HAL.Units.Absolute.Absolute,HAL.Units.Absolute.Absolute,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified as an axis-angle rotation.</summary>
      <param name="x">Origin X coordinate.</param>
      <param name="y">Origin Y coordinate.</param>
      <param name="z">Origin Z coordinate.</param>
      <param name="ax">X component of the axis-angle.</param>
      <param name="ay">Y component of the axis-angle.</param>
      <param name="az">Z component of the axis-angle.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.FromMatrix(HAL.Spatial.MatrixFrame)">
      <summary>Utility converter to enable the use of MatrixFrame in FK calculus.</summary>
      <param name="matrix">Input matrix frame.</param>
      <returns>Returns a converted matrix frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.FromQuaternionFrame(HAL.Spatial.QuaternionFrame)">
      <summary>Utility converter to enable the use of QuaternionFrame in FK calculus.</summary>
      <param name="quaternionFrame">Quaternion frame to convert to MatrixFrame</param>
      <returns>Returns a converted quaternion frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Multiply(HAL.Kinematics.IEligibleForFkReturn)">
      <summary>Utility method to enable the use of MatrixFrame in FK calculus.</summary>
      <param name="multiplied">MatrixFrame to multiply with.</param>
      <returns>Multiplied MatrixFrame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.ToArray">
      <summary>Converts this matrix to a column-wise array.</summary>
      <returns>Matrix values as array.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.QuaternionFrame)~HAL.Spatial.MatrixFrame">
      <summary>Converts a quaternion frame to a matrix frame.</summary>
      <param name="frame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.MatrixFrame)~HAL.Spatial.QuaternionFrame">
      <summary>Converts a matrix frame to a quaternion frame.</summary>
      <param name="frame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.EulerFrame)~HAL.Spatial.MatrixFrame">
      <summary>Converts a Euler frame to a matrix frame.</summary>
      <param name="frame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.MatrixFrame)~HAL.Spatial.EulerFrame">
      <summary>Converts a matrix frame to a Euler frame.</summary>
      <param name="frame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.DHParameters)~HAL.Spatial.MatrixFrame">
      <summary>Converts a set of classical DH parameters to a matrix frame.</summary>
      <param name="frame">Classical DH parameters.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.MatrixFrame)~HAL.Spatial.DHParameters">
      <summary>Converts a matrix frame to a set of classical DH parameters.</summary>
      <param name="frame">Frame to convert.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Spatial.MatrixFrame)~HAL.Numerics.Matrix">
      <summary>Implicit cast from <see cref="T:HAL.Spatial.MatrixFrame" /> to <see cref="T:HAL.Numerics.Matrix" /> by extracting its matrix.</summary>
      <param name="frame">The frame to convert to a matrix.</param>
      <returns>A 4x4 matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Explicit(HAL.Numerics.Matrix)~HAL.Spatial.MatrixFrame">
      <summary>Implicit cast from <see cref="T:HAL.Numerics.Matrix" /> to <see cref="T:HAL.Spatial.MatrixFrame" />.</summary>
      <param name="matrix">The matrix to convert to a frame.</param>
      <returns>A matrix frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor">
      <summary>Creates a default (identity) matrix frame.</summary>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates a matrix frame from an existing one.</summary>
      <param name="frame">Existing matrix frame.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(System.Double[],System.Boolean)">
      <summary>Creates a matrix frame from raw values.</summary>
      <param name="values">Values.</param>
      <param name="fromColumnWise">Whether values are column wise.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(System.Double[][])">
      <summary>Creates a matrix frame from values.</summary>
      <param name="values">Values as [column][row].</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D)">
      <summary>Creates a matrix frame from a position and a normal vector.</summary>
      <param name="position">Frame position.</param>
      <param name="normal">Frame normal (Z axis).</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.RotationMatrix)">
      <summary>Creates a matrix frame from a position and a rotation.</summary>
      <param name="position">Frame position.</param>
      <param name="rotation">Frame rotation.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,System.Boolean)">
      <summary>Creates a matrix frame from its components.</summary>
      <param name="position">Frame position.</param>
      <param name="xAxis">X axis of the frame.</param>
      <param name="secondVector">Y axis of the frame or second vector giving the frame orientation.</param>
      <param name="normalize">Normalize the rotation base.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,System.Boolean)">
      <summary>Creates a matrix frame from a position and rotation vectors.</summary>
      <param name="position">Frame position.</param>
      <param name="xAxis">X rotation.</param>
      <param name="yAxis">Y rotation.</param>
      <param name="zAxis">Z rotation.</param>
      <param name="normalize">Whether the rotation should be normalized.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.QuaternionFrame)">
      <summary>Creates a matrix frame from a quaternion frame.</summary>
      <param name="quaternionFrame">Quaternion frame.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.DHParameters)">
      <summary>Creates a matrix frame from classical DH parameters.</summary>
      <param name="dh">Classical DH parameters.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.ModifiedDHParameters)">
      <summary>Creates a matrix frame from modified DH parameters.</summary>
      <param name="modifiedDH">Modified DH parameters.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.#ctor(HAL.Spatial.EulerFrame)">
      <summary>Creates a matrix frame from an Euler frame.</summary>
      <param name="eulerFrame">Euler frame.</param>
    </member>
    <member name="P:HAL.Spatial.MatrixFrame.Values">
      <summary>Matrix values such as [column][row].</summary>
    </member>
    <member name="P:HAL.Spatial.MatrixFrame.Position">
      <summary>Frame position.</summary>
    </member>
    <member name="P:HAL.Spatial.MatrixFrame.Rotation">
      <summary>Frame rotation.</summary>
    </member>
    <member name="P:HAL.Spatial.MatrixFrame.Determinant">
      <summary>Matrix determinant.</summary>
    </member>
    <member name="F:HAL.Spatial.MatrixFrame.Identity">
      <summary>Identity transformation matrix.</summary>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Equals(HAL.Spatial.MatrixFrame,System.Int32)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <param name="precision">Test precision.</param>
      <returns>Whether the objects are equal.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Equals(HAL.Spatial.MatrixFrame)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>Whether the objects are equal.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>Whether the objects are equal.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Equality(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Spatial.MatrixFrame" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Inequality(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Spatial.MatrixFrame" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Intersect(HAL.Spatial.Curves.Circle)">
      <summary> Computes the intersection between this plane and an circle. </summary>
      <param name="circle">Circle.</param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Intersect(HAL.Spatial.Curves.Arc)">
      <summary> Computes the intersection between this plane and an arc. </summary>
      <param name="arc">Arc.</param>
      <returns>The intersection events.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Intersect(HAL.Spatial.Curves.Line)">
      <summary>Computes the intersection between this plane and a line.</summary>
      <param name="line">Line.</param>
      <returns>The curve intersection event.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Intersect(HAL.Spatial.MatrixFrame)">
      <summary>Find the intersection line between two planes.</summary>
      <param name="frame">Frame.</param>
      <returns>The line if planes intersect.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Add(HAL.Spatial.MatrixFrame)">
      <summary>Adds a matrix to this one.</summary>
      <param name="matrix">Added matrix.</param>
      <returns>Added matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Addition(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Creates a new matrix from the addition of two matrices.</summary>
      <param name="firstMatrix">First matrix to add.</param>
      <param name="secondMatrix">Second matrix to add.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Subtract(HAL.Spatial.MatrixFrame)">
      <summary>Subtracts a matrix to this one.</summary>
      <param name="matrix">Subtracted matrix.</param>
      <returns>Added matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Subtraction(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Creates a new matrix from the subtraction of two matrices.</summary>
      <param name="firstMatrix">Matrix to subtract from.</param>
      <param name="secondMatrix">Matrix to subtract.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Multiply(HAL.Spatial.MatrixFrame)">
      <summary>Multiplies this matrix with another one.</summary>
      <param name="matrix">Second matrix.</param>
      <returns>Multiplied matrices.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Multiply(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Creates a new matrix from the multiplication of two matrices.</summary>
      <param name="firstMatrix">Matrix to multiply.</param>
      <param name="secondMatrix">Matrix to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Multiply(HAL.Spatial.Vector3D)">
      <summary>Multiplies this matrix by a vector.</summary>
      <param name="vector">Vector to multiply the matrix with.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Multiply(HAL.Spatial.MatrixFrame,HAL.Spatial.Vector3D)">
      <summary>Creates a new matrix from the multiplication of a matrix with a vector.</summary>
      <param name="matrix">Matrix to multiply.</param>
      <param name="vector">Vector to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Multiply(System.Double)">
      <summary>Multiplies this matrix with a scalar.</summary>
      <param name="scalar">Scalar.</param>
      <returns>Multiplied matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Multiply(HAL.Spatial.MatrixFrame,System.Double)">
      <summary>Creates a new matrix from the multiplication of a matrix with a scalar.</summary>
      <param name="matrix">Matrix to multiply.</param>
      <param name="scalar">Scalar to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.op_Multiply(System.Double,HAL.Spatial.MatrixFrame)">
      <summary>Creates a new matrix from the multiplication of a matrix with a scalar.</summary>
      <param name="matrix">Matrix to multiply.</param>
      <param name="scalar">Scalar to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Inverse">
      <summary>Inverses this matrix.</summary>
      <returns>Inversed matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.InverseMultiply(HAL.Spatial.MatrixFrame)">
      <summary>Inverses this matrix then multiply it with a second matrix.</summary>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.InverseMultiply(HAL.Spatial.Vector3D@)">
      <summary>Inverses this matrix then multiply it with a vector.</summary>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Transpose">
      <summary>Transposes this matrix.</summary>
      <returns>Transposed matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocates this on another basis frame.</summary>
      <param name="from">Reference frame.</param>
      <param name="to">Target frame.</param>
      <returns>Transformed copy.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Rotate(HAL.Spatial.RotationMatrix)">
      <summary>Rotate the object with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the localized Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Rotate(HAL.Spatial.Vector3D,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the axis.</summary>
      <param name="axis">Rotation axis.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Translate(HAL.Spatial.MatrixFrame,HAL.Units.Length.m)">
      <summary>Translate the object along the Z axis of a specified frame.</summary>
      <param name="frame">Translation frame.</param>
      <param name="distance">Translation distance.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.Transform(HAL.Spatial.MatrixFrame)">
      <summary>Transform the object with a specified transformation.</summary>
      <param name="transformation">Transformation to apply.</param>
      <returns>Copy of the object, once transformed.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.RotateAroundZ(HAL.Units.Angle.rad,System.Boolean)">
      <summary>Rotates a frame around its Z axis by a given angle.</summary>
      <param name="angle">The angle by which this frame should be rotated.</param>
      <param name="derivative">If true, returns the derivative transformation.</param>
      <returns>The rotated frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.TranslateAlongZ(HAL.Units.Length.m,System.Boolean)">
      <summary>Translates a frame along its Z axis by a given distance.</summary>
      <param name="distance">The distance by which this frame should be translated.</param>
      <param name="derivative">If true, returns the derivative transformation.</param>
      <returns>The translated frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.RelativeTo(HAL.Spatial.MatrixFrame)">
      <summary>Calculates the relative transformation of this frame with respect to a given reference frame. i.e. Transforming the reference by the result will give you this frame.</summary>
      <param name="reference">The frame from which this frame should be localized.</param>
      <returns>The relative transformation of this frame with respect to the reference frame.</returns>
    </member>
    <member name="M:HAL.Spatial.MatrixFrame.AlignAxis(HAL.Spatial.MatrixFrame,HAL.Spatial.Axis,System.Boolean,HAL.Spatial.Vector3D,System.Boolean)">
      <summary>Creates a plane aligned to a given direction from an existing one.</summary>
      <param name="frame">Initial plane.</param>
      <param name="axis">Plane vector to be aligned to the direction.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="direction">Direction.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="T:HAL.Spatial.Mesh">
      <summary>Mesh composed of triangular faces.</summary>
    </member>
    <member name="M:HAL.Spatial.Mesh.ClosestPoint(HAL.Spatial.Vector3D,HAL.Units.Length.m@)">
      <summary>Computes the closest point between a specified point and this mesh.</summary>
      <param name="point">Test point.</param>
      <param name="distance">Resulting distance.</param>
      <returns>Closest point on the mesh.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.DistanceTo(HAL.Spatial.Vector3D)">
      <summary>Computes the distance between a specified point and this mesh.</summary>
      <param name="point">Test point.</param>
      <returns>Closest point on the mesh.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.DistanceTo(HAL.Spatial.Mesh)">
      <summary>Computes the closest distance between this mesh and a second one.</summary>
      <param name="other">Second mesh.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.ClosestVertices(System.Collections.Generic.IEnumerable{HAL.Spatial.Mesh},System.Collections.Generic.IEnumerable{HAL.Spatial.Mesh},HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Calculates the closest vertices between two mesh groups.</summary>
      <param name="first">First group.</param>
      <param name="second">Second group.</param>
      <param name="firstVertex">Vertex in first group.</param>
      <param name="secondVertex">Vertex in second group.</param>
      <returns>Distance between </returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.ClosestVertices(HAL.Spatial.Mesh,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Calculates the closest vertices between two meshes.</summary>
      <param name="second">Second mesh.</param>
      <param name="firstVertex">Vertex in this mesh.</param>
      <param name="secondVertex">Vertex in second mesh.</param>
      <returns>Distance between the two vertices.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.ConvexHull(HAL.Spatial.Mesh,System.Int32,HAL.Spatial.Mesh@)">
      <summary>Creates a convex hull for a given mesh.</summary>
      <param name="input">Mesh to hull.</param>
      <param name="maxIterations">Maximum iterations to process. Equivalent to the first X vertices of the input mesh.</param>
      <param name="hull">Convex hull of the input mesh.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.#ctor">
      <summary>Creates a null mesh.</summary>
    </member>
    <member name="M:HAL.Spatial.Mesh.#ctor(HAL.Spatial.Mesh)">
      <summary>Creates a copy of an existing mesh.</summary>
      <param name="clonee">Cloned mesh.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.#ctor(HAL.Spatial.Vector3D[],HAL.Spatial.MeshFace[],HAL.Display.Styles.MeshDisplayStyle)">
      <summary>Creates a mesh from a collection of vertices and face topology.</summary>
      <param name="vertices">Vertices of the mesh.</param>
      <param name="faces">Faces of the mesh.</param>
      <param name="style">Display style to use for this mesh.</param>
    </member>
    <member name="P:HAL.Spatial.Mesh.Vertices">
      <summary>Vertices of the mesh.</summary>
    </member>
    <member name="P:HAL.Spatial.Mesh.Faces">
      <summary>Faces of the mesh.</summary>
    </member>
    <member name="P:HAL.Spatial.Mesh.DisplayStyle">
      <summary>Display style of this mesh, for rendering.</summary>
    </member>
    <member name="P:HAL.Spatial.Mesh.IsValid">
      <summary>True if the mesh has vertices and faces.</summary>
    </member>
    <member name="M:HAL.Spatial.Mesh.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.GetFaceCentroid(HAL.Spatial.MeshFace)">
      <summary>Calculates the centroid of a face of this mesh.</summary>
      <param name="face">Face.</param>
      <returns>Average of the face's vertices.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.GetFaceCentroid(System.Int32)">
      <summary>Calculates the centroid of a face of this mesh.</summary>
      <param name="index">Face index.</param>
      <returns>Average of the face's vertices.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.GetFaceVertices(HAL.Spatial.MeshFace)">
      <summary>Retrieves the vertices of a given face.</summary>
      <param name="face">Face.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.GetFaceVertices(System.Int32)">
      <summary>Retrieves the vertices of a given face.</summary>
      <param name="index">Face index.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.GetFaceTriangle(HAL.Spatial.MeshFace,HAL.Spatial.MatrixFrame)">
      <summary>Creates a triangle representative of the given face.</summary>
      <param name="face">Face.</param>
      <param name="transformation">Optional transformation to apply to the triangle.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.GetFaceTriangle(System.Int32,HAL.Spatial.MatrixFrame)">
      <summary>Creates a triangle representative of the given face.</summary>
      <param name="index">Face index.</param>
      <param name="transformation">Optional transformation to apply to the triangle.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.RelocateSelf(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocates this mesh instance on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Modified object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.RotateSelf(HAL.Spatial.RotationMatrix)">
      <summary>Rotates this mesh instance with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Modified mesh, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.RotateSelf(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.TranslateSelf(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.TranslateSelf(HAL.Spatial.MatrixFrame,HAL.Units.Length.m)">
      <summary>Translate the object along the Z axis of a specified frame.</summary>
      <param name="frame">Translation frame.</param>
      <param name="distance">Translation distance.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.TransformSelf(HAL.Spatial.MatrixFrame)">
      <summary>Transform the object with a specified transformation.</summary>
      <param name="transformation">Transformation to apply.</param>
      <returns>Copy of the object, once transformed.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.Rotate(HAL.Spatial.RotationMatrix)">
      <summary>Rotate the object with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.Translate(HAL.Spatial.MatrixFrame,HAL.Units.Length.m)">
      <summary>Translate the object along the Z axis of a specified frame.</summary>
      <param name="frame">Translation frame.</param>
      <param name="distance">Translation distance.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.Transform(HAL.Spatial.MatrixFrame)">
      <summary>Transform the object with a specified transformation.</summary>
      <param name="transformation">Transformation to apply.</param>
      <returns>Copy of the object, once transformed.</returns>
    </member>
    <member name="M:HAL.Spatial.Mesh.CreateCenterBox(HAL.Spatial.MatrixFrame,HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Creates a box centered on the frame with the given dimensions.</summary>
      <param name="frame">Center frame.</param>
      <param name="length">Length.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:HAL.Spatial.Mesh.CreateConvexHull(System.Int32)">
      <summary>Creates the convex hull of a mesh.</summary>
      <param name="pointCount">If present, limits the number of points used for the calculation.</param>
    </member>
    <member name="T:HAL.Spatial.VertexTable">
      <summary>Mesh vertices.</summary>
    </member>
    <member name="M:HAL.Spatial.VertexTable.#ctor(HAL.Spatial.Vector3D[])">
      <summary>Creates a new <see cref="T:HAL.Spatial.VertexTable" />.</summary>
      <param name="vertices">Vertices.</param>
    </member>
    <member name="P:HAL.Spatial.VertexTable.Vertices">
      <summary>Vertices.</summary>
    </member>
    <member name="P:HAL.Spatial.VertexTable.Item(System.Int32)">
      <summary>Retrieves or sets the vertex at a given index.</summary>
      <param name="index">Index</param>
      <returns>Vertex at that index.</returns>
    </member>
    <member name="T:HAL.Spatial.FaceTable">
      <summary>Mesh faces.</summary>
    </member>
    <member name="M:HAL.Spatial.FaceTable.#ctor(HAL.Spatial.MeshFace[])">
      <summary>Creates a new <see cref="T:HAL.Spatial.FaceTable" />.</summary>
      <param name="faces">Faces.</param>
    </member>
    <member name="P:HAL.Spatial.FaceTable.Faces">
      <summary>Faces.</summary>
    </member>
    <member name="P:HAL.Spatial.FaceTable.Item(System.Int32)">
      <summary>Retrieves or sets the face at a given index.</summary>
      <param name="index">Index</param>
      <returns>Face at that index.</returns>
    </member>
    <member name="T:HAL.Spatial.MeshFace">
      <summary>Triangular face of a mesh, maintaining the connectivity of a set of vertices.</summary>
    </member>
    <member name="M:HAL.Spatial.MeshFace.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a triangular mesh face.</summary>
      <param name="a">First corner index.</param>
      <param name="b">Second corner index.</param>
      <param name="c">Third corner index.</param>
    </member>
    <member name="P:HAL.Spatial.MeshFace.Indices">
      <summary>Indices of the vertices.</summary>
    </member>
    <member name="P:HAL.Spatial.MeshFace.A">
      <summary>First corner index of the mesh face.</summary>
    </member>
    <member name="P:HAL.Spatial.MeshFace.B">
      <summary>Second corner index of the mesh face.</summary>
    </member>
    <member name="P:HAL.Spatial.MeshFace.C">
      <summary>Third corner index of the mesh face.</summary>
    </member>
    <member name="M:HAL.Spatial.MeshFace.Clone">
      <summary>Duplicates this by creating a shallow copy of it.</summary>
      <returns>A shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Spatial.ModifiedDHParameters">
      <summary>Frame in three dimensions,  specified as modified DH parameters (Rotation around X1 * Translation along X1 * Rotation around Z2 * Translation along Z2).</summary>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.Create(HAL.Units.Angle.Angle,HAL.Units.Length.Length,HAL.Units.Angle.Angle,HAL.Units.Length.Length,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame specified with modified Denavit-Hartenberg parameters.</summary>
      <param name="rx1">Rotation angle between z1 and z2 around x1.</param>
      <param name="tx1">Distance between z1 and z2 along x1.</param>
      <param name="rz2">Rotation angle between x1 and x2 around z2.</param>
      <param name="tz2">Distance between x1 and x2 along z2.</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.#ctor">
      <summary>Empty constructor, initializing a neutral DH.</summary>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.#ctor(HAL.Spatial.ModifiedDHParameters)">
      <summary>Creates DH parameters from an existing ones.</summary>
      <param name="dhParameters">DH parameters.</param>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a DH parameters from existing ones.</summary>
      <param name="rx1">Rotation angle between z1 and z2 around x1.</param>
      <param name="tx1">Distance between z1 and z2 along x1.</param>
      <param name="rz2">Rotation angle between x1 and x2 around z2.</param>
      <param name="tz2">Distance between x1 and x2 along z2.</param>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates DH parameters from a matrix-based frame.</summary>
      <param name="frame">Matrix-based frame.</param>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.#ctor(HAL.Spatial.EulerFrame)">
      <summary>Creates DH parameters from an Euler frame.</summary>
      <param name="eulerFrame">Euler frame.</param>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.#ctor(HAL.Spatial.QuaternionFrame)">
      <summary>Creates DH parameters from a dual quaternion frame.</summary>
      <param name="quaternionFrame">Dual quaternion frame.</param>
    </member>
    <member name="P:HAL.Spatial.ModifiedDHParameters.Rx1">
      <summary>Rotation angle between z1 and z2 around x1, also documented as α (alpha).</summary>
    </member>
    <member name="P:HAL.Spatial.ModifiedDHParameters.Tx1">
      <summary>Distance between z1 and z2 along x1, also documented as r.</summary>
    </member>
    <member name="P:HAL.Spatial.ModifiedDHParameters.Rz2">
      <summary>Rotation angle between x1 and x2 around z2, also documented as θ (theta).</summary>
    </member>
    <member name="P:HAL.Spatial.ModifiedDHParameters.Tz2">
      <summary>Distance between x1 and x2 along z2, also documented as d.</summary>
    </member>
    <member name="P:HAL.Spatial.ModifiedDHParameters.IsValid">
      <summary>Verifies that the set of DH parameters is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.ModifiedDHParameters.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the DH parameters.</returns>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="E:HAL.Spatial.ModifiedDHParameters.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Spatial.ModifiedDHParameters.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="T:HAL.Spatial.QuaternionFrame">
      <summary>Frame in three dimensions, as a dual quaternion specifying a position and a rotation.</summary>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Create(HAL.Spatial.Vector3D,System.Double,System.Double,System.Double,System.Double,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified as a quaternion.</summary>
      <param name="origin">Frame origin.</param>
      <param name="qw">Real component of the quaternion (w, q1).</param>
      <param name="qx">X component of the quaternion (q2).</param>
      <param name="qy">Y component of the quaternion (q3).</param>
      <param name="qz">Y component of the quaternion (q4).</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Create(HAL.Units.Length.Length,HAL.Units.Length.Length,HAL.Units.Length.Length,System.Double,System.Double,System.Double,System.Double,HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame@)">
      <summary>Creates a frame with a rotation specified as a quaternion.</summary>
      <param name="x">Origin X coordinate.</param>
      <param name="y">Origin Y coordinate.</param>
      <param name="z">Origin Z coordinate.</param>
      <param name="qw">Real component of the quaternion (w, q1).</param>
      <param name="qx">X component of the quaternion (q2).</param>
      <param name="qy">Y component of the quaternion (q3).</param>
      <param name="qz">Y component of the quaternion (q4).</param>
      <param name="reference">Reference frame.</param>
      <param name="frame">Resulting frame.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the quaternion.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.GetVector">
      <summary>Returns the quaternion frame as a vector.</summary>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.ToValueArray">
      <summary>Returns the quaternion frame components.</summary>
      <returns>Components in the following order: X Y Z Qw Qx Qy Qz.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.FromMatrix(HAL.Spatial.MatrixFrame)">
      <summary>Utility converter to enable the use of MatrixFrame in FK calculus.</summary>
      <param name="matrix">Matrix frame to convert to QuaternionFrame.</param>
      <returns>Returns a converted matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor">
      <summary>Empty constructor, initializing a neutral quaternion frame.</summary>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor(HAL.Spatial.QuaternionFrame)">
      <summary>Creates a quaternion frame from an existing one.</summary>
      <param name="quaternionFrame">Quaternion frame to build from.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor(HAL.Spatial.Vector3D,HAL.Numerics.Quaternion,System.Boolean)">
      <summary>Creates a quaternion frame from a position and a rotation.</summary>
      <param name="position">Position component.</param>
      <param name="rotation">Rotation component.</param>
      <param name="normalize">Whether the rotation component should be normalized.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.RotationMatrix,System.Boolean)">
      <summary>Creates a quaternion frame from a matrix frame.</summary>
      <param name="position">Position component.</param>
      <param name="rotation">RotationMatrix component.</param>
            /// <param name="normalize">Normalize real part?</param></member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor(HAL.Numerics.Quaternion,HAL.Numerics.Quaternion,System.Boolean)">
      <summary>Creates a quaternion frame from existing quaternions.</summary>
      <param name="dual">Dual quaternion.</param>
      <param name="real">Real quaternion.</param>
      <param name="normalize">Whether the real quaternion should be normalized.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor(HAL.Numerics.DualQuaternion)">
      <summary>Creates a quaternion frame from a dual quaternion.</summary>
      <param name="dualQuaternion">Dual quaternion.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates a quaternion frame from a matrix-based frame.</summary>
      <param name="frame">Matrix-based frame.</param>
    </member>
    <member name="P:HAL.Spatial.QuaternionFrame.Position">
      <summary>Position component of the quaternion frame.</summary>
    </member>
    <member name="P:HAL.Spatial.QuaternionFrame.Rotation">
      <summary>Rotation component of the quaternion frame.</summary>
    </member>
    <member name="P:HAL.Spatial.QuaternionFrame.IsValid">
      <summary>True if the object is valid.</summary>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Equals(HAL.Spatial.QuaternionFrame,System.Int32)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
      <param name="precision">Test precision.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Equals(HAL.Spatial.QuaternionFrame)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Inverse">
      <summary>Inverse of the quaternion frame, as the full conjugate of its quaternion components.</summary>
      <returns>Inverse of the quaternion frame.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Multiply(HAL.Spatial.QuaternionFrame,System.Boolean)">
      <summary>Multiplies this quaternion frame with another.</summary>
      <param name="quaternionFrame">Multiplier.</param>
      <param name="normalize">If true, normalizes the resulting rotation quaternion.</param>
      <returns>Resulting frame.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Relocate(HAL.Spatial.QuaternionFrame,HAL.Spatial.QuaternionFrame)">
      <summary>Relocates this object on another basis frame.</summary>
      <param name="reference">Reference frame.</param>
      <param name="target">Target frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.RotateAroundZ(HAL.Units.Angle.rad)">
      <summary>Generates a rotation around the Z axis.</summary>
      <remarks> Consider this method as static, as the transformation members do not contribute to its behavior. </remarks>
      <param name="angle">Rotation angle.</param>
      <returns>Corresponding transformation.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Rotate(HAL.Numerics.Quaternion)">
      <summary>Rotate the object with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Rotate(HAL.Spatial.QuaternionFrame,HAL.Units.Angle.rad)">
      <summary>Rotates this object around the Z axis of a specified quaternion frame.</summary>
      <param name="frame">Quaternion frame.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Translate(HAL.Spatial.Vector3D)">
      <summary>Translates this object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Translate(HAL.Spatial.QuaternionFrame,HAL.Units.Length.m)">
      <summary>Translates this object along the Z axis of a specified frame.</summary>
      <param name="frame">Translation frame.</param>
      <param name="distance">Translation distance.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.TranslateAlongZ(HAL.Units.Length.m)">
      <summary>Generates a translation along the Z axis.</summary>
      <remarks> Consider this method as static, as the transformation members do not contribute to its behavior. </remarks>
      <param name="distance">Translation distance.</param>
      <returns>Corresponding transformation.</returns>
    </member>
    <member name="M:HAL.Spatial.QuaternionFrame.Transform(HAL.Spatial.QuaternionFrame)">
      <summary>Transforms a frame by a given transformation.</summary>
      <param name="transformation">The transformation by which this frame should be transformed.</param>
      <returns>The transformed frame.</returns>
    </member>
    <member name="T:HAL.Spatial.ReferencedFrame">
      <summary>Frame referenced in a specific coordinate system, in a specified formalism.</summary>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.#ctor">
      <summary>Creates a null referenced frame.</summary>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.#ctor(HAL.Spatial.ReferencedFrame)">
      <summary>Creates a referenced frame from an existing one.</summary>
      <param name="frame">Existing frame.</param>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.#ctor(HAL.Spatial.MatrixFrame)">
      <summary>Creates a world referenced frame.</summary>
      <param name="frame">Local frame, as a transformation from the world.</param>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.#ctor(HAL.Objects.Reference,HAL.Spatial.MatrixFrame)">
      <summary>Creates a referenced frame from existing values.</summary>
      <param name="host">Reference object from which this frame is offset.</param>
      <param name="frame">Local frame, as a transformation from the reference.</param>
    </member>
    <member name="P:HAL.Spatial.ReferencedFrame.Frame">
      <summary>Local frame, as a transformation from the reference.</summary>
    </member>
    <member name="P:HAL.Spatial.ReferencedFrame.Host">
      <summary>Reference object from which this frame is offset.</summary>
    </member>
    <member name="P:HAL.Spatial.ReferencedFrame.IsValid">
      <summary>True if this object is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.ReferencedFrame.Bindings">
      <summary>A list of bindings that contain this as either the source or target of the binding.</summary>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.LocationIn(HAL.Objects.ObjectGraph,System.Boolean)">
      <summary>Returns the position of the frame in the world.</summary>
      <param name="objectGraph">The object graph that defines the world in which this frame is hosted.</param>
      <param name="neutral">If true, will retrieve the neutral location of this object.</param>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.LocationInWorld(System.Boolean)">
      <summary>Returns the position of the frame in the world.</summary>
      <param name="neutral">If true, will retrieve the neutral location of this object.</param>
    </member>
    <member name="E:HAL.Spatial.ReferencedFrame.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.OnPropertyChanged(System.String)">
      <summary>The method called by the setter of a property to trigger the PropertyChanged event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.Dispose(System.Boolean)">
      <summary>Disposes of this object.</summary>
      <param name="disposing">Defines whether this should dispose managed objects.</param>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.Dispose">
      <summary>Disposes of this object.</summary>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.Equals(HAL.Spatial.ReferencedFrame)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.op_Equality(HAL.Spatial.ReferencedFrame,HAL.Spatial.ReferencedFrame)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Spatial.ReferencedFrame" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.ReferencedFrame.op_Inequality(HAL.Spatial.ReferencedFrame,HAL.Spatial.ReferencedFrame)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Spatial.ReferencedFrame" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="T:HAL.Spatial.ReferenceRelationship">
      <summary>Enumerates reference relationships supported by HAL.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.Unset">
      <summary>Unset (invalid) reference relationship.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.Approach">
      <summary>Translation along the tool approach vector to a distance of the target.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.Away">
      <summary>Translation along the tool approach vector to a distance from the target.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.Towards">
      <summary>Partial interpolation towards a target limited by a distance.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.Along">
      <summary>Translation of the tool along a specified vector.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.Around">
      <summary>Rotation of the tool around a specified vector.</summary>
    </member>
    <member name="F:HAL.Spatial.ReferenceRelationship.AxisOffset">
      <summary>Joint offset from the current position.</summary>
    </member>
    <member name="T:HAL.Spatial.RotationConvention">
      <summary>Euler rotation convention.</summary>
    </member>
    <member name="F:HAL.Spatial.RotationConvention.Intrinsic">
      <summary>Rotations occur about the axes of the rotating coordinate system, which changes its orientation after each elemental rotation.</summary>
    </member>
    <member name="F:HAL.Spatial.RotationConvention.Extrinsic">
      <summary>Rotations occur about the axes of the original coordinate system, which remains motionless.</summary>
    </member>
    <member name="T:HAL.Spatial.RotationMatrix">
      <summary>3x3 rotation matrix.</summary>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.ToArray">
      <summary>Converts this matrix to a column-wise array.</summary>
      <returns>Matrix values as array.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Explicit(HAL.Spatial.RotationMatrix)~HAL.Numerics.Matrix">
      <summary>Explicit cast from <see cref="T:HAL.Spatial.RotationMatrix" /> to <see cref="T:HAL.Numerics.Matrix" /> by extracting its matrix.</summary>
      <param name="rotation">The rotation to convert to a matrix.</param>
      <returns>A 3x3 matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Explicit(HAL.Numerics.Matrix)~HAL.Spatial.RotationMatrix">
      <summary>Explicit cast from <see cref="T:HAL.Numerics.Matrix" /> to <see cref="T:HAL.Spatial.RotationMatrix" />.</summary>
      <param name="matrix">The matrix to convert to a frame.</param>
      <returns>A matrix frame.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Explicit(HAL.Spatial.RotationMatrix)~HAL.Numerics.Quaternion">
      <summary>Explicit cast from <see cref="T:HAL.Spatial.RotationMatrix" /> to <see cref="T:HAL.Numerics.Quaternion" />.</summary>
      <param name="matrix">The matrix to convert to a quaternion.</param>
      <returns>Converted rotation matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Explicit(HAL.Spatial.RotationMatrix)~HAL.Spatial.Vector3D">
      <summary>Explicit cast from <see cref="T:HAL.Spatial.RotationMatrix" /> to <see cref="T:HAL.Spatial.Vector3D" />.</summary>
      <param name="matrix">The matrix to convert to a rotation vector (axis-angle).</param>
      <returns>Converted rotation matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Explicit(HAL.Spatial.RotationMatrix)~HAL.Spatial.EulerRotation">
      <summary>Explicit cast from <see cref="T:HAL.Spatial.RotationMatrix" /> to <see cref="T:HAL.Spatial.EulerRotation" />.</summary>
      <param name="matrix">The matrix to convert to an Euler rotation.</param>
      <returns>Converted rotation matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(System.Double[],System.Boolean)">
      <summary>Creates a rotation matrix from values.</summary>
      <param name="values">Values.</param>
      <param name="fromColumnWise">Whether values are column wise.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(System.Double[][])">
      <summary>Creates a rotation matrix from values.</summary>
      <param name="values">Values as [column][row].</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Creates a rotation matrix from x, y and z vectors.</summary>
      <param name="x">X column (0) of the rotation matrix.</param>
      <param name="y">Y column (1) of the rotation matrix.</param>
      <param name="z">Z column (2) of the rotation matrix.</param>
      <param name="normalize">Whether the vectors should be normalized.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(HAL.Spatial.Vector3D@,HAL.Units.Angle.Angle)">
      <summary>Creates a rotation matrix from an axis-angle rotation.</summary>
      <param name="vector">Rotation vector, used as the axis of rotation.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Creates a rotation matrix from a normal direction vector.</summary>
      <param name="vector">Vector to use as a the Z axis.</param>
      <param name="normalize">Normalize the rotation base.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(HAL.Spatial.EulerRotation)">
      <summary>Creates a rotation matrix from a rotation in Euler angles.</summary>
      <param name="eulerRotation">Rotation in Euler angles.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.#ctor(HAL.Numerics.Quaternion@)">
      <summary>Creates a rotation matrix from a quaternion.</summary>
      <param name="quaternion">Quaternion.</param>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.Values">
      <summary>Matrix values such as [column][row].</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.X">
      <summary>X vector.</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.Y">
      <summary>Y vector.</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.Z">
      <summary>Z vector.</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.Determinant">
      <summary>Matrix determinant.</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.Trace">
      <summary>Matrix trace.</summary>
    </member>
    <member name="F:HAL.Spatial.RotationMatrix.Identity">
      <summary>Identity rotation matrix.</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.IsValid">
      <summary>Whether this object is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.RotationMatrix.Item(System.Int32)">
      <summary>Retrieves a column vector at a specified column index.</summary>
      <param name="column">Column index.</param>
      <returns>Corresponding column content.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.DistanceTo(HAL.Spatial.RotationMatrix)">
      <summary>Angular distance from this rotation matrix to a second one.</summary>
      <param name="rotationMatrix">Second rotation matrix.</param>
      <returns>Total rotation displacement.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Rotate(HAL.Spatial.RotationMatrix)">
      <summary>Rotate the object with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.RotateAroundZ(HAL.Units.Angle.rad)">
      <summary>Rotate the object around the Z axis of rotation.</summary>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Equals(HAL.Spatial.RotationMatrix)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Equals(HAL.Spatial.RotationMatrix,System.Int32)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <param name="precision">Test precision.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Equality(HAL.Spatial.RotationMatrix,HAL.Spatial.RotationMatrix)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:HAL.Spatial.NewRotationMatrix" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Inequality(HAL.Spatial.RotationMatrix,HAL.Spatial.RotationMatrix)">
      <summary>Returns a value that indicates whether two <see cref="T:HAL.Spatial.NewRotationMatrix" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Add(HAL.Spatial.RotationMatrix)">
      <summary>Adds a matrix to this one.</summary>
      <param name="matrix">Added matrix.</param>
      <returns>Added matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Addition(HAL.Spatial.RotationMatrix,HAL.Spatial.RotationMatrix)">
      <summary>Creates a new matrix from the addition of two matrices.</summary>
      <param name="firstMatrix">First matrix to add.</param>
      <param name="secondMatrix">Second matrix to add.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Subtract(HAL.Spatial.RotationMatrix)">
      <summary>Subtracts a matrix to this one.</summary>
      <param name="matrix">Subtracted matrix.</param>
      <returns>Added matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Subtraction(HAL.Spatial.RotationMatrix,HAL.Spatial.RotationMatrix)">
      <summary>Creates a new matrix from the subtraction of two matrices.</summary>
      <param name="firstMatrix">Matrix to subtract from.</param>
      <param name="secondMatrix">Matrix to subtract.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Multiply(HAL.Spatial.RotationMatrix)">
      <summary>Multiplies this matrix with another one.</summary>
      <param name="matrix">Second matrix.</param>
      <returns>Multiplied matrices.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Multiply(HAL.Spatial.RotationMatrix,HAL.Spatial.RotationMatrix)">
      <summary>Creates a new matrix from the multiplication of two matrices.</summary>
      <param name="firstMatrix">Matrix to multiply.</param>
      <param name="secondMatrix">Matrix to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Multiply(HAL.Spatial.Vector3D)">
      <summary>Multiplies this matrix by a vector.</summary>
      <param name="vector">Vector to multiply the matrix with.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Multiply(HAL.Spatial.RotationMatrix,HAL.Spatial.Vector3D)">
      <summary>Creates a new matrix from the multiplication of a matrix with a vector.</summary>
      <param name="matrix">Matrix to multiply.</param>
      <param name="vector">Vector to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Multiply(System.Double)">
      <summary>Multiplies this matrix with a scalar.</summary>
      <param name="scalar">Scalar.</param>
      <returns>Multiplied matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Multiply(HAL.Spatial.RotationMatrix,System.Double)">
      <summary>Creates a new matrix from the multiplication of a matrix with a scalar.</summary>
      <param name="matrix">Matrix to multiply.</param>
      <param name="scalar">Scalar to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.op_Multiply(System.Double,HAL.Spatial.RotationMatrix)">
      <summary>Creates a new matrix from the multiplication of a matrix with a scalar.</summary>
      <param name="matrix">Matrix to multiply.</param>
      <param name="scalar">Scalar to multiply with.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Inverse">
      <summary>Inverses this matrix.</summary>
      <returns>Inversed matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.InverseMultiply(HAL.Spatial.RotationMatrix)">
      <summary>Inverses this matrix then multiply it with a second matrix.</summary>
      <returns>Inversed matrix.</returns>
    </member>
    <member name="M:HAL.Spatial.RotationMatrix.Transpose">
      <summary>Transposes this matrix.</summary>
      <returns>Transposed matrix.</returns>
    </member>
    <member name="T:HAL.Spatial.Triangle">
      <summary>Closed polygon defined by three points.</summary>
    </member>
    <member name="M:HAL.Spatial.Triangle.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Spatial.Vector3D)">
      <summary>Creates a triangle from the three corner points.</summary>
      <param name="v0">First corner.</param>
      <param name="v1">Second corner.</param>
      <param name="v2">Third corner.</param>
    </member>
    <member name="P:HAL.Spatial.Triangle.Vertices">
      <summary>Vertices.</summary>
    </member>
    <member name="P:HAL.Spatial.Triangle.Item(System.Int32)">
      <summary>Vertex indexer.</summary>
      <param name="index">Vertex index.</param>
      <returns>Vertex at the given index.</returns>
    </member>
    <member name="P:HAL.Spatial.Triangle.IsValid">
      <summary>Whether this object is valid.</summary>
    </member>
    <member name="P:HAL.Spatial.Triangle.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="M:HAL.Spatial.Triangle.GetBarycentricCoordinates(HAL.Spatial.Vector3D@)">
      <summary>Compute barycentric coordinates/weights of vPoint inside triangle (Vertices[0],Vertices[1],Vertices[2]).</summary>
      <remarks>If point is in triangle plane and inside triangle, coordinates will be positive and sum to 1. i.e. if result is a, then vPoint = a.x*Vertices[0] + a.y*Vertices[1] + a.z*Vertices[2].</remarks>
      <param name="point">Point.</param>
    </member>
    <member name="P:HAL.Spatial.Triangle.Normal">
      <summary>Normal.</summary>
    </member>
    <member name="P:HAL.Spatial.Triangle.Area">
      <summary>Area.</summary>
    </member>
    <member name="P:HAL.Spatial.Triangle.Frame">
      <summary>Frame on which this lies.</summary>
    </member>
    <member name="P:HAL.Spatial.Triangle.Edges">
      <summary>Edges of the triangle in order Vertices[0]Vertices[1], Vertices[1]Vertices[2], Vertices[2]Vertices[0].</summary>
    </member>
    <member name="P:HAL.Spatial.Triangle.Center">
      <summary>Vertex center point of the triangle.</summary>
    </member>
    <member name="M:HAL.Spatial.Triangle.PointAt(System.Double,System.Double,System.Double)">
      <summary>Calculates the point at the given barycentric coordinate.</summary>
      <param name="barycentric0">First coordinate.</param>
      <param name="barycentric1">Second coordinate.</param>
      <param name="barycentric2">Third coordinate.</param>
    </member>
    <member name="M:HAL.Spatial.Triangle.PointAt(HAL.Spatial.Vector3D@)">
      <summary>Calculates the point at the given barycentric coordinate.</summary>
      <param name="barycentric">Coordinates.</param>
    </member>
    <member name="M:HAL.Spatial.Triangle.ContainsPoint(HAL.Spatial.Vector3D@)">
      <summary>Verifies whether a given point is contained within this triangle.</summary>
      <param name="point">Point to test.</param>
    </member>
    <member name="M:HAL.Spatial.Triangle.Intersect(HAL.Spatial.Curves.Line)">
      <summary>Calculates the intersection between this triangle and a segment.</summary>
      <returns>Intersection between the line (considered infinite) and triangle, if any. Intersection event B can be checked between 0 and 1 for strict segment intersections.</returns>
      <remarks>Uses the Moller-Trumbore ray intersection algorithm with an optional constraint on the ray parameter.</remarks>
    </member>
    <member name="M:HAL.Spatial.Triangle.Intersects(HAL.Spatial.Triangle@)">
      <summary>Tests whether this triangle intersects with another but doesn't calculate the intersection information.</summary>
      <param name="other">Triangle to test.</param>
      <returns>Whether there is an intersection.</returns>
    </member>
    <member name="M:HAL.Spatial.Triangle.Intersect(HAL.Spatial.Triangle)">
      <summary>Computes the intersection between this triangle and another.</summary>
      <param name="other">Triangle to test.</param>
      <returns>Intersection results, if any.</returns>
    </member>
    <member name="M:HAL.Spatial.Triangle.DistanceTo(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Calculates the distance between a point and this triangle.</summary>
      <param name="point">Point.</param>
      <param name="closestPoint">Point on triangle to which the distance is measured.</param>
      <param name="barycentricCoordinates">Barycentric coordinates on triangle to which the distance is measured.</param>
      <param name="skipPointCalculation">Whether to skip the calculation of the closest point.</param>
    </member>
    <member name="M:HAL.Spatial.Triangle.SquaredDistanceTo(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Calculates the squared distance between a point and this triangle.</summary>
      <param name="point">Point.</param>
      <param name="closestPoint">Point on triangle to which the distance is measured.</param>
      <param name="barycentricCoordinates">Barycentric coordinates on triangle to which the distance is measured.</param>
      <param name="skipPointCalculation">Whether to skip the calculation of the closest point.</param>
    </member>
    <member name="M:HAL.Spatial.Triangle.SquaredDistanceTo(HAL.Spatial.Curves.Line@,HAL.Spatial.Vector3D@,System.Double@,System.Boolean)">
      <summary>Calculates the square distance to a line.</summary>
      <param name="line">Test line.</param>
      <param name="closestPoint">Closest point on triangle.</param>
      <param name="parameter">Parameter on line.</param>
      <param name="strict">Whether the calculation should be constrained to the line segment.</param>
      <returns>Squared distance from line to closest point.</returns>
    </member>
    <member name="M:HAL.Spatial.Triangle.SquaredDistanceTo(HAL.Spatial.Triangle@,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,System.Boolean)">
      <summary>Calculates the squared distance between this triangle and another.</summary>
      <param name="other">Other triangle.</param>
      <param name="closestOnThis">Point on this triangle to which the distance is measured.</param>
      <param name="closestOnOther">Point on the other triangle to which the distance is measured.</param>
      <param name="skipPointCalculation">Whether to skip the calculation of the closest point.</param>
    </member>
    <member name="M:HAL.Spatial.Triangle.Pull(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Triangle.Pull(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Triangle.Reparametrize(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Triangle.Reparametrize(HAL.Spatial.ISpatialObject1D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Triangle.Reparametrize(HAL.Spatial.ISpatialObject2D)">
      <inheritdoc />
    </member>
    <member name="T:HAL.Spatial.Vector3D">
      <summary>Vector in three dimensions.</summary>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Angle(HAL.Spatial.Vector3D@)">
      <summary>Compute the angle in radians between this vector and a second one.</summary>
      <param name="vector">Second vector.</param>
      <returns>Measured angle in radians.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.OrientedAngle(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Compute the oriented angle in radians between this vector and a second one.</summary>
      <param name="vector">Second vector.</param>
      <param name="axis">Orientation axis vector.</param>
      <returns>Measured angle in radians.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.IsParallelTo(HAL.Spatial.Vector3D@)">
      <summary>Checks whether the given vector is parallel to this.</summary>
      <param name="other">Vector to test.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.IsPerpendicularTo(HAL.Spatial.Vector3D@)">
      <summary>Checks whether the given vector is perpendicular to this.</summary>
      <param name="other">Vector to test.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.DistanceTo(HAL.Spatial.Vector3D@)">
      <summary>Compute the distance between this point and a second one.</summary>
      <param name="point">Second point.</param>
      <returns>Returns the distance between the points.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.SquaredDistanceTo(HAL.Spatial.Vector3D@)">
      <summary>Compute the squared distance between this point and a second one.</summary>
      <param name="point">Second point.</param>
      <returns>Returns the squared distance between the points.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.HAL#Spatial#ISpatialObject0D#DistanceTo(HAL.Spatial.ISpatialObject0D)">
      <inheritdoc />
    </member>
    <member name="M:HAL.Spatial.Vector3D.Norm(System.Double)">
      <summary>Computes the p-norm of the vector.</summary>
      <param name="p">p argument.</param>
      <returns>P-norm of the vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.GetComplementBasis(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Calculates the orthonormal basis for a given vector.</summary>
      <remarks>The output vectors {U,V} are unit length and mutually perpendicular, and {U,V,W} is an orthonormal basis.</remarks>
      <param name="w">Normal vector.</param>
      <param name="u">First orthonormal output.</param>
      <param name="v">Second orthonormal output.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.AreColinear(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Tests 3 vectors for colinearity by testing the lengths between each pair of points.</summary>
      <param name="v1">First vector.</param>
      <param name="v2">Second vector.</param>
      <param name="v3">Third vector.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.TestDistanceTo(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D,HAL.Units.Length.Length@)">
      <summary>Computes the distance between two points.</summary>
      <param name="from">First point.</param>
      <param name="to">Second point.</param>
      <param name="distance">Measured distance.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the object.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Explicit(HAL.Spatial.Vector3D)~HAL.Numerics.Quaternion">
      <summary>Converts a 3D vector to a quaternion.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Explicit(HAL.Spatial.Vector3D)~HAL.Spatial.RotationMatrix">
      <summary>Converts a 3D vector to a rotation matrix.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Explicit(HAL.Spatial.Vector3D)~HAL.Spatial.EulerRotation">
      <summary>Converts a 3D vector to a Euler rotation.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Explicit(HAL.Spatial.Vector3D)~HAL.Numerics.Vector">
      <summary>Converts a 3D vector to a generic vector.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Explicit(HAL.Spatial.Vector3D)~MathNet.Numerics.LinearAlgebra.Double.DenseVector">
      <summary>Converts a HAL vector to a Math.NET vector.</summary>
      <param name="vector">Vector to convert.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>Creates a 3D vector from three components.</summary>
      <param name="x">X component of the vector.</param>
      <param name="y">Y component of the vector.</param>
      <param name="z">Z component of the vector.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(System.Double[])">
      <summary>Creates a 3D vector from an array of three components, based on physical units.</summary>
      <param name="values">Values.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Units.Length.m[])">
      <summary>Creates a 3D vector from an array of three components.</summary>
      <param name="components">Components.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Creates a 3D vector from three components, based on physical units.</summary>
      <param name="x">X component of the vector.</param>
      <param name="y">Y component of the vector.</param>
      <param name="z">Z component of the vector.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(System.Double)">
      <summary>Creates a 3D vector with all components set to an initial value.</summary>
      <param name="initValue">The value to assign to all components.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Spatial.Vector3D)">
      <summary>Creates a 3D vector from an existing one.</summary>
      <param name="vector">Existing vector.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Numerics.Vector)">
      <summary>Creates a 3D vector from an existing vector.</summary>
      <param name="vector">Existing vector.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Spatial.Vector3D,HAL.Spatial.Vector3D)">
      <summary>Creates a vector from two points.</summary>
      <param name="start">Start point.</param>
      <param name="end">End point.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Numerics.Quaternion)">
      <summary>Creates a 3D vector from a quaternion.</summary>
      <param name="quaternion">Quaternion.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Spatial.RotationMatrix)">
      <summary>Creates an axis-angle rotation vector from a rotation matrix.</summary>
      <param name="rotationMatrix">Rotation matrix.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.#ctor(HAL.Spatial.EulerRotation)">
      <summary>Creates an axis-angle rotation vector from a rotation in Euler angles.</summary>
      <param name="eulerRotation">Rotation in Euler angles.</param>
    </member>
    <member name="P:HAL.Spatial.Vector3D.Count">
      <summary>Number of components (dimension) of this vector.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.X">
      <summary>First component of this vector.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.Y">
      <summary>Second component of this vector.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.Z">
      <summary>Third component of this vector.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.XCoordinate">
      <summary>X component in system length units.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.YCoordinate">
      <summary>Y component in system length units.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.ZCoordinate">
      <summary>Z component in system length units.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.ManhattanNorm">
      <summary>Manhattan (L1) norm.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.EuclideanNorm">
      <summary>Euclidean (L2) norm.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.SquaredNorm">
      <summary>Squared norm.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.Magnitude">
      <summary>Magnitude of this vector.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.Default">
      <summary>0-filled 3D vector.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.XAxis">
      <summary>X vector preset.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.YAxis">
      <summary>Y vector preset.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.ZAxis">
      <summary>Z vector preset.</summary>
    </member>
    <member name="F:HAL.Spatial.Vector3D.Invalid">
      <summary>Invalid vector preset.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.Values">
      <summary>Vector components.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.IsValid">
      <summary>Verifies if the vector is containing NaN coordinates.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.ParameterDimensions">
      <summary>Number of dimensions used to represent a domain on the object.</summary>
    </member>
    <member name="P:HAL.Spatial.Vector3D.Item(System.Int32)">
      <summary>Retrieves a vector component at a given index.</summary>
      <param name="i">Index.</param>
      <returns>Corresponding component.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.At(System.Int32)">
      <summary>Retrieves a value at a given index.</summary>
      <param name="index">Index of the value to be retrieved.</param>
      <returns>Retrieved value.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Equals(HAL.Spatial.Vector3D)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Equals(HAL.Spatial.Vector3D,System.Int32)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
      <param name="precision">Test precision.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
      <param name="obj">The object to compare with the current instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Spatial.Vector3D.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Normalize">
      <summary>Normalize the vector.</summary>
      <returns>Unit vector of the vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Normalize(System.Double)">
      <summary>Normalizes this vector to a unit vector with respect to a given norm.</summary>
      <param name="norm">Norm.</param>
      <returns>Normalized vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Negate">
      <summary>Negates this vector.</summary>
      <returns>Negated vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_UnaryNegation(HAL.Spatial.Vector3D@)">
      <summary>Negates a vector.</summary>
      <param name="vector">Vector to negate.</param>
      <returns>Negated vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Add(HAL.Spatial.Vector3D@)">
      <summary>Creates a new vector from the addition of this vector and a given second vector.</summary>
      <param name="vector">Vector to be added.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Add(System.Double)">
      <summary>Creates a new vector from the addition of this vector and a given scalar.</summary>
      <param name="scalar">Scalar to be added.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Addition(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Creates a new vector from the addition of two vectors.</summary>
      <param name="firstVector">First vector to add.</param>
      <param name="secondVector">Second vector to add.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Addition(HAL.Spatial.Vector3D@,System.Double)">
      <summary>Creates a new vector from the addition of a vector and a scalar.</summary>
      <param name="vector">Vector to add.</param>
      <param name="scalar">Scalar to add.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Addition(System.Double,HAL.Spatial.Vector3D@)">
      <summary>Creates a new vector from the addition of a vector and a scalar.</summary>
      <param name="vector">Vector to add.</param>
      <param name="scalar">Scalar to add.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Subtract(HAL.Spatial.Vector3D@)">
      <summary>Creates a new vector from the subtraction of this vector and a given second vector.</summary>
      <param name="vector">Vector to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Subtract(System.Double)">
      <summary>Creates a new vector from the subtraction of this vector and a given scalar.</summary>
      <param name="scalar">Scalar to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Subtraction(HAL.Spatial.Vector3D@,HAL.Spatial.Vector3D@)">
      <summary>Creates a new vector from the subtraction of two vectors.</summary>
      <param name="firstVector">Vector to subtract from.</param>
      <param name="secondVector">Vector to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Subtraction(HAL.Spatial.Vector3D@,System.Double)">
      <summary>Creates a new vector from the subtraction of a scalar from a vector.</summary>
      <param name="firstVector">Vector to subtract from.</param>
      <param name="scalar">Scalar to be subtracted.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Multiply(System.Double)">
      <summary>Creates a new vector from the multiplication of this vector and a given scalar.</summary>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Multiply(HAL.Spatial.Vector3D@,System.Double)">
      <summary>Creates a new vector from the multiplication of a vector and a scalar.</summary>
      <param name="vector">Vector to multiply.</param>
      <param name="scalar">Multiplier.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Multiply(System.Double,HAL.Spatial.Vector3D@)">
      <summary>Creates a new vector from the multiplication of a vector and a scalar.</summary>
      <param name="scalar">Multiplier.</param>
      <param name="vector">Vector to multiply.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.CrossProduct(HAL.Spatial.Vector3D@)">
      <summary>Computes the cross product (perpendicular vector) between this vector and a second one.</summary>
      <param name="vector">Second vector.</param>
      <returns>Perpendicular vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.DotProduct(HAL.Spatial.Vector3D@)">
      <summary>Computes the dot product between the vector and a second one.</summary>
      <param name="vector">Second vector.</param>
      <returns>Returns the normalized dot product.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Divide(System.Double)">
      <summary>Creates a new vector from the division of this vector and a given scalar.</summary>
      <param name="scalar">Divisor.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.op_Division(HAL.Spatial.Vector3D@,System.Double)">
      <summary>Creates a new vector from the division of a vector by a scalar.</summary>
      <param name="vector">Vector to multiply.</param>
      <param name="scalar">Divisor.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Average(System.Collections.Generic.IEnumerable{HAL.Spatial.Vector3D})">
      <summary>Averages a series of vectors.</summary>
      <param name="vectors">Vectors to average.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Average(HAL.Spatial.Vector3D[])">
      <summary>Averages a series of vectors.</summary>
      <param name="vectors">Vectors to average.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Project(HAL.Spatial.Vector3D)">
      <summary>Projects this vector onto another.</summary>
      <param name="vector">Vector to project onto.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.ProjectOnFrame(HAL.Spatial.MatrixFrame)">
      <summary>Projects this vector onto a frame.</summary>
      <param name="frame">Frame to project onto.</param>
      <returns>Resulting vector.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Relocate(HAL.Spatial.MatrixFrame,HAL.Spatial.MatrixFrame)">
      <summary>Relocate this object on another basis frame.</summary>
      <param name="reference">Object reference frame.</param>
      <param name="target">Target reference frame.</param>
      <returns>Copy of the object moved in place.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Rotate(HAL.Spatial.RotationMatrix)">
      <summary>Rotate the object with a specified rotation.</summary>
      <param name="rotation">Rotation to apply.</param>
      <returns>Copy of the object, once rotated.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Rotate(HAL.Spatial.MatrixFrame,HAL.Units.Angle.rad)">
      <summary>Rotate the object around the Z axis of a specified frame.</summary>
      <param name="frame">Rotation frame.</param>
      <param name="angle">Rotation angle.</param>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Rotate(HAL.Spatial.Vector3D,HAL.Units.Angle.Angle)">
      <summary>Rotate the object around the specified vector.</summary>
      <param name="vector">Rotation axis.</param>
      <param name="angle">Rotation angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Rotate(HAL.Spatial.Vector3D)">
      <summary>Rotate the object around the specified vector. </summary>
      <param name="vector">The rotation axis. The vector's magnitude is the rotation angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Translate(HAL.Spatial.Vector3D)">
      <summary>Translate the object by a specified vector.</summary>
      <param name="vector">Translation vector.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Translate(HAL.Spatial.MatrixFrame,HAL.Units.Length.m)">
      <summary>Translate the object along the Z axis of a specified frame.</summary>
      <param name="frame">Translation frame.</param>
      <param name="distance">Translation distance.</param>
      <returns>Copy of the object, once translated.</returns>
    </member>
    <member name="M:HAL.Spatial.Vector3D.Transform(HAL.Spatial.MatrixFrame)">
      <summary>Transform the object with a specified transformation.</summary>
      <param name="transformation">Transformation to apply.</param>
      <returns>Copy of the object, once transformed.</returns>
    </member>
    <member name="T:HAL.Timing.Clock">
      <summary>Microsecond timer for precise event timing.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.#ctor">
      <summary>Creates a timer using the instance default time step.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.#ctor(HAL.Timing.Clock)">
      <summary>Creates a clock from an existing one, sharing the same underlying stopwatch.</summary>
      <param name="clonee">
      </param>
    </member>
    <member name="M:HAL.Timing.Clock.#ctor(HAL.Units.Time.s)">
      <summary>Creates a timer with a specified step.</summary>
      <param name="step">Timer step.</param>
    </member>
    <member name="P:HAL.Timing.Clock.Time">
      <summary>Total time counted by this clock.</summary>
    </member>
    <member name="P:HAL.Timing.Clock.Step">
      <summary>Time step incremented by the timer.</summary>
    </member>
    <member name="P:HAL.Timing.Clock.IsRunning">
      <summary>Gets or set the activity flag of this timer.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.Start">
      <summary>Starts the timer.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.Stop">
      <summary>Signals the timer to stop after the current cycle.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.StopAndWait(System.Int32)">
      <summary>Signals the timer to stop and waits until it has terminated.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.AwaitCompletion(System.Int32)">
      <summary>Waits for the timer to stop.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.Reset">
      <summary>Resets this timer.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.Restart">
      <summary>Restarts this timer.</summary>
    </member>
    <member name="M:HAL.Timing.Clock.Clone">
      <inheritdoc />
    </member>
    <member name="M:HAL.Timing.Clock.Dispose(System.Boolean)">
      <summary>Disposes this whilst maintaining a record of whether it has already been disposed.</summary>
      <param name="disposing">Whether this is being disposed.</param>
    </member>
    <member name="M:HAL.Timing.Clock.Dispose">
      <inheritdoc />
    </member>
    <member name="T:HAL.Units.Helpers">
      <summary>Static collection of serialization utility methods.</summary>
    </member>
    <member name="M:HAL.Units.Helpers.FromDouble``1(System.Double)">
      <summary>Creates a measurement from generic type TMeasurement with the value defined in value. This is intended only for use where a standard constructor is unavailable e.g. because the measurement type is a generic parameter.</summary>
      <param name="value">The value to assign the new measurement.</param>
      <typeparam name="TUnit">The type of the measurement to be created. </typeparam>
      <returns>A new measurement of type TMeasurement with the value of value.</returns>
    </member>
    <member name="M:HAL.Units.Helpers.TryParseUnitizedValue(System.String,System.Boolean@,HAL.Units.IUnitizedValue@)">
      <summary>Attempts to parse a unitized value from text.</summary>
      <param name="input">Input.</param>
      <param name="isUnitLess">Whether the parsed value is unit-less.</param>
      <param name="parsed">Parsed value.</param>
      <returns>Whether the parsing was successful.</returns>
    </member>
    <member name="M:HAL.Units.Helpers.ToMeasurement``1(System.String)">
      <summary>Converts a string representation of a measured unit to a <see cref="T:HAL.Units.IUnitizedValue" />.</summary>
      <typeparam name="T">Target type of <see cref="T:HAL.Units.IUnitizedValue" /></typeparam>
      <param name="input">A textual representation of a measurement, optionally including the units.</param>
      <returns>Converted input.</returns>
    </member>
    <member name="M:HAL.Units.Helpers.MeasurementFromString(System.String)">
      <summary>Converts a string representation of a unit to a <see cref="T:HAL.Units.IUnitizedValue" />.</summary>
      <param name="input">A textual representation of a measurement, optionally including the units.</param>
      <returns>Converted input.</returns>
    </member>
    <member name="M:HAL.Units.Helpers.MeasurementFromString(System.String,System.Type)">
      <summary>Converts a string representation of a unit to a <see cref="T:HAL.Units.IUnitizedValue" />.</summary>
      <param name="input">A textual representation of a measurement, optionally including the units.</param>
      <param name="returnType">The type of measurement to be returned.</param>
      <returns>A measurement of type TType with the size of the input text.</returns>
    </member>
    <member name="M:HAL.Units.Helpers.MeasurementFromString``1(System.String)">
      <summary>Converts a string representation of a unit to a <see cref="T:HAL.Units.IUnitizedValue" />.</summary>
      <param name="input">A textual representation of a measurement, optionally including the units.</param>
      <typeparam name="TType">The type of measurement to be returned. </typeparam>
      <returns>A measurement of type TType with the size of the input text.</returns>
    </member>
    <member name="F:HAL.Units.Helpers.UnitSuffixMap">
      <summary>Static collection of unit suffixes and their corresponding types.</summary>
    </member>
    <member name="M:HAL.Units.Helpers.MeasurementUnits(System.Type)">
      <summary>Retrieves unit types available for a specified measurement type.</summary>
      <param name="measurementType">Measurement type.</param>
    </member>
    <member name="T:HAL.Units.IJointAcceleration">
      <summary>Qualifies a value to be used to measure a robot joint acceleration.</summary>
    </member>
    <member name="T:HAL.Units.IJointMeasurement">
      <summary>Qualifies a joint measurement.</summary>
    </member>
    <member name="T:HAL.Units.IJointPosition">
      <summary>Qualifies a value to be used to measure a robot joint position.</summary>
    </member>
    <member name="T:HAL.Units.IJointSpeed">
      <summary>Qualifies a value to be used to measure a robot joint speed.</summary>
    </member>
    <member name="T:HAL.Units.IMeasurement">
      <summary>Generic measurement, storing a value, a range and a tolerance.</summary>
    </member>
    <member name="P:HAL.Units.IMeasurement.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.IMeasurement.Range">
      <summary>Validity range of the value, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.IMeasurement.Tolerance">
      <summary>Tolerance range of the value, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.IMeasurement.IsValid">
      <summary>Whether the measurement value is valid.</summary>
    </member>
    <member name="P:HAL.Units.IMeasurement.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.IMeasurement.ToDouble">
      <summary>Extracts the double value of this measurement in system units.</summary>
      <returns>The double value of this measurement in system units</returns>
    </member>
    <member name="M:HAL.Units.IMeasurement.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.IMeasurement.ReassignClone(System.Double)">
      <summary>Duplicates this measurement and reassigns its value to that given.</summary>
      <returns>A copy of this measurement with a new value.</returns>
    </member>
    <member name="M:HAL.Units.IMeasurement.ReassignClone(HAL.Units.IUnitizedValue)">
      <summary>Duplicates this measurement and reassigns its value to that given.</summary>
      <returns>A copy of this measurement with a new value.</returns>
    </member>
    <member name="M:HAL.Units.IMeasurement.CreateRange">
      <summary>Validity range of the value, in system unit.</summary>
    </member>
    <member name="M:HAL.Units.IMeasurement.CreateRange(HAL.Units.IUnitizedValue)">
      <summary>Creates an interval from 0 to a given terminal value.</summary>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.IMeasurement.CreateRange(HAL.Units.IUnitizedValue,HAL.Units.IUnitizedValue)">
      <summary>Creates an interval from existing values.</summary>
      <param name="start">Lower bound of the interval.</param>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.IMeasurement.CreateRange(System.Double,System.Double)">
      <summary>Creates an interval from existing values.</summary>
      <param name="start">Lower bound of the interval.</param>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.IMeasurement.SetToMax">
      <summary>Sets the value of this measurement to the maximum value of its allowable range.</summary>
    </member>
    <member name="M:HAL.Units.IMeasurement.SetToMin">
      <summary>Sets the value of this measurement to the minimum value of its allowable range.</summary>
    </member>
    <member name="T:HAL.Units.IProportionalMeasurement">
      <summary>Qualifies a proportional measurement.</summary>
    </member>
    <member name="P:HAL.Units.IProportionalMeasurement.Factor">
      <summary>Factor to be applied.</summary>
    </member>
    <member name="P:HAL.Units.IProportionalMeasurement.Measurement">
      <summary>Explicit measurement value. Discarded if a factor is specified.</summary>
    </member>
    <member name="M:HAL.Units.IProportionalMeasurement.ApplyTo``1(``0,System.Boolean)">
      <summary>Computes the proportional value of a measurement by taking into account the specified factor.</summary>
      <typeparam name="T">Measurement type.</typeparam>
      <param name="measurement">Measurement.</param>
      <param name="clone">Whether the measurement should be cloned before being modified.</param>
      <returns>Updated measurement.</returns>
    </member>
    <member name="T:HAL.Units.IUnitizedValue">
      <summary>Low-level interface, wrapping a measured value.</summary>
    </member>
    <member name="P:HAL.Units.IUnitizedValue.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.IUnitizedValue.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.IUnitizedValue.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.InSystemUnits">
      <summary>Converts the value of this measurement to the appropriate system units</summary>
      <returns>The value converted to system units</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that this should now have.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Subtract(HAL.Units.IUnitizedValue)">
      <summary>Substracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.IUnitizedValue.GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Measurement`2">
      <summary>Generic measurement class, storing a value, a range and a tolerance. Implement this class if you wish to add a new type of measurement.</summary>
      <typeparam name="TBaseUnit">Base unit type.</typeparam>
      <typeparam name="TSelf">Type of this measurement.</typeparam>
    </member>
    <member name="F:HAL.Units.Measurement`2._tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="M:HAL.Units.Measurement`2.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Measurement`2.#ctor(`0)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.#ctor(`0,`0,`0)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.#ctor(`1)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Measurement`2.BaseUnit">
      <summary>Base unit type of this measurement.</summary>
    </member>
    <member name="P:HAL.Units.Measurement`2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Measurement`2.Range">
      <summary>Validity range of the value, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Measurement`2.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Measurement`2.IsValid">
      <summary>Whether the measurement value is valid.</summary>
    </member>
    <member name="P:HAL.Units.Measurement`2.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Measurement`2.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.ToDouble">
      <summary>Extracts the double value of this measurement in system units.</summary>
      <returns>The double value of this measurement in system units</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.SetToMax">
      <summary>Sets the value of this measurement to the maximum value of its allowable range.</summary>
    </member>
    <member name="M:HAL.Units.Measurement`2.SetToMin">
      <summary>Sets the value of this measurement to the minimum value of its allowable range.</summary>
    </member>
    <member name="M:HAL.Units.Measurement`2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.ReassignClone(System.Double)">
      <summary>Duplicates this measurement and reassigns its value to that given.</summary>
      <returns>A copy of this measurement with a new value.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.ReassignClone(`0)">
      <summary>Duplicates this measurement and reassigns its value to that given.</summary>
      <returns>A copy of this measurement with a new value.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.CreateRange">
      <summary>Validity range of the value, in system unit.</summary>
    </member>
    <member name="M:HAL.Units.Measurement`2.CreateRange(`0)">
      <summary>Creates an interval from 0 to a given terminal value.</summary>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.CreateRange(`0,`0)">
      <summary>Creates an interval from existing values.</summary>
      <param name="start">Lower bound of the interval.</param>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.CreateRange(System.Double,System.Double)">
      <summary>Creates an interval from existing values.</summary>
      <param name="start">Lower bound of the interval.</param>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.HAL#Units#IMeasurement#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.HAL#Units#IMeasurement#ReassignClone(System.Double)">
      <summary>Duplicates this measurement and reassigns its value to that given.</summary>
      <returns>A copy of this measurement with a new value.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.HAL#Units#IMeasurement#ReassignClone(HAL.Units.IUnitizedValue)">
      <summary>Duplicates this measurement and reassigns its value to that given.</summary>
      <returns>A copy of this measurement with a new value.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.CompareTo(`1)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order. </returns>
      <param name="other">An object to compare with this instance. </param>
    </member>
    <member name="M:HAL.Units.Measurement`2.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:HAL.Units.Measurement`2.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The object to be compared to this.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.Equals(`1)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_Equality(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Equality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_Inequality(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_GreaterThan(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_GreaterThanOrEqual(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_LessThan(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_LessThanOrEqual(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Less or equal than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_Addition(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_Subtraction(HAL.Units.Measurement{`0,`1},`0)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_Multiply(HAL.Units.Measurement{`0,`1},System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Measurement`2.op_Division(HAL.Units.Measurement{`0,`1},System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="T:HAL.Units.MeasurementHelpers">
      <summary>Static collection of measurement utility methods.</summary>
    </member>
    <member name="F:HAL.Units.MeasurementHelpers.DefaultMax">
      <summary>Default maximum value for measurements.</summary>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.FromDouble``1(System.Double)">
      <summary>Creates a measurement from generic type TMeasurement with the value defined in value. This is intended only for use where a standard constructor is unavailable e.g. because the measurement type is a generic parameter.</summary>
      <param name="value">The value to assign the new measurement.</param>
      <typeparam name="TMeasurement">The type of the measurement to be created. </typeparam>
      <returns>A new measurement of type TMeasurement with the value of value.</returns>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.CreateRange``1">
      <summary>Validity range of the value, in system unit.</summary>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.CreateRange``1(HAL.Units.IUnitizedValue)">
      <summary>Creates an interval from 0 to a given terminal value.</summary>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.CreateRange``1(HAL.Units.IUnitizedValue,HAL.Units.IUnitizedValue)">
      <summary>Creates an interval from existing values.</summary>
      <param name="start">Lower bound of the interval.</param>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.CreateRange``1(System.Double,System.Double)">
      <summary>Creates an interval from existing values.</summary>
      <param name="start">Lower bound of the interval.</param>
      <param name="end">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.AsPercentage(HAL.Units.IMeasurement)">
      <summary>Calculates a factor of the value with respect to its range.</summary>
      <param name="measurement">Measurement to convert.</param>
      <returns>A percentage.</returns>
    </member>
    <member name="M:HAL.Units.MeasurementHelpers.AsRatio(HAL.Units.IMeasurement)">
      <summary>Calculates a factor of the value with respect to its range.</summary>
      <param name="measurement">Measurement to convert.</param>
      <returns>A value between 0 and 1 denoting the ratio of the range taken by the value.</returns>
    </member>
    <member name="T:HAL.Units.ProportionalMeasurement`1">
      <summary>Proportional measurement.</summary>
      <typeparam name="T">Measurement type.</typeparam>
    </member>
    <member name="M:HAL.Units.ProportionalMeasurement`1.#ctor(System.Nullable{System.Double})">
      <summary>Creates a proportional measurement.</summary>
      <param name="factor">Factor to be applied.</param>
    </member>
    <member name="M:HAL.Units.ProportionalMeasurement`1.#ctor(`0)">
      <summary>Creates a proportional measurement.</summary>
      <param name="measurement">Wrapped measurement.</param>
    </member>
    <member name="P:HAL.Units.ProportionalMeasurement`1.Factor">
      <summary>Factor to be applied.</summary>
    </member>
    <member name="P:HAL.Units.ProportionalMeasurement`1.Measurement">
      <summary>Explicit measurement value, if any. Discarded if a factor is specified.</summary>
    </member>
    <member name="M:HAL.Units.ProportionalMeasurement`1.ApplyTo``1(``0,System.Boolean)">
      <summary>Computes the proportional value of a measurement by taking into account the specified factor.</summary>
      <typeparam name="TMeasurement">Measurement type.</typeparam>
      <param name="measurement">Measurement.</param>
      <param name="clone">Whether the measurement should be cloned before being modified.</param>
      <returns>Updated measurement.</returns>
    </member>
    <member name="M:HAL.Units.ProportionalMeasurement`1.Clone">
      <summary>Clones this object.</summary>
      <returns>Shallow copy of the original object.</returns>
    </member>
    <member name="T:HAL.Units.UnitizedInterval`1">
      <summary>Interval, as a continuous domain between two bounds stored in a given unit.</summary>
      <typeparam name="T">Unit type.</typeparam>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.#ctor">
      <summary>Empty constructor, initializing a zero-length interval.</summary>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.#ctor(HAL.Units.UnitizedInterval{`0})">
      <summary>Creates an interval from an existing one.</summary>
      <param name="interval">Existing interval.</param>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.#ctor(`0,`0)">
      <summary>Creates an interval from existing values.</summary>
      <param name="from">Lower bound of the interval.</param>
      <param name="to">Upper bound of the interval.</param>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.#ctor(`0)">
      <summary>Creates an interval from 0 to a given terminal value.</summary>
      <param name="to">Upper bound of the interval.</param>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.T0">
      <summary>Lower bound of the interval.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.T1">
      <summary>Upper bound of the interval.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.Length">
      <summary>Length of the interval.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.Min">
      <summary>Smallest of T0 and T1.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.Mid">
      <summary>Middle of the interval.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.Max">
      <summary>Larger of T0 and T1.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.Sign">
      <summary>Returns the sign of the difference between the end and start bounds.</summary>
    </member>
    <member name="P:HAL.Units.UnitizedInterval`1.IsValid">
      <summary>True if the bounds are valid numbers.</summary>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.Contains(`0,System.Boolean,System.Boolean)">
      <summary>Evaluates if a parameter is contained by the interval.</summary>
      <param name="t">Parameter to evaluate.</param>
      <param name="strictAtStart">If true, will return false if the parameter is equal to the enter bound.</param>
      <param name="strictAtEnd">If true, will return false if the parameter is equal to the exit bound.</param>
      <returns>True if the parameter is contained.</returns>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.Contains(`0,System.Boolean@,System.Boolean@,System.Boolean,System.Boolean)">
      <summary>Evaluates if a parameter is contained by the interval.</summary>
      <param name="t">Parameter to evaluate.</param>
      <param name="testAtStart">Containment test against the interval start.</param>
      <param name="testAtEnd">Containment test against the interval end.</param>
      <param name="strictAtStart">If true, will return false if the parameter is equal to the enter bound.</param>
      <param name="strictAtEnd">If true, will return false if the parameter is equal to the exit bound.</param>
      <returns>True if the parameter is contained.</returns>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.HAL#Numerics#IInterval#Contains(HAL.Units.IUnitizedValue,System.Boolean,System.Boolean)">
      <summary>Evaluates if a parameter is contained by the interval.</summary>
      <param name="t">Parameter to evaluate.</param>
      <param name="strictAtStart">If true, will return false if the parameter is equal to the enter bound.</param>
      <param name="strictAtEnd">If true, will return false if the parameter is equal to the exit bound.</param>
      <returns>True if the parameter is contained.</returns>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.HAL#Numerics#IInterval#Contains(HAL.Units.IUnitizedValue,System.Boolean@,System.Boolean@,System.Boolean,System.Boolean)">
      <summary>Evaluates if a parameter is contained by the interval.</summary>
      <param name="t">Parameter to evaluate.</param>
      <param name="testAtStart">Containment test against the interval start.</param>
      <param name="testAtEnd">Containment test against the interval end.</param>
      <param name="strictAtStart">If true, will return false if the parameter is equal to the enter bound.</param>
      <param name="strictAtEnd">If true, will return false if the parameter is equal to the exit bound.</param>
      <returns>True if the parameter is contained.</returns>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.Clamp(HAL.Units.IUnitizedValue)">
      <summary>Clamps a value to this interval.</summary>
      <param name="value">Value to be tested.</param>
      <returns>Clamped value.</returns>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.ToString">
      <summary>Cast to string.</summary>
      <returns>Returns a string representation of the interval.</returns>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.Equals(HAL.Units.UnitizedInterval{`0})">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.Equals(HAL.Numerics.IInterval)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:HAL.Units.UnitizedInterval`1.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:HAL.Units.Absolute.Absolute">
      <summary>A measurement of Absolute, expressed in abs (abs).</summary>
    </member>
    <member name="F:HAL.Units.Absolute.Absolute.DefaultEpsilon">
      <summary>The default difference allowed between two Absolute measurements.</summary>
    </member>
    <member name="F:HAL.Units.Absolute.Absolute.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Absolute measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Absolute.Absolute.DefaultTolerance">
      <summary>The default tolerance allowed between two Absolute measurements.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.#ctor(HAL.Units.Absolute.abs)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.#ctor(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.#ctor(HAL.Units.Absolute.Absolute)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Absolute.Absolute.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Absolute.Absolute.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Absolute.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Equal(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether values are within the default tolerance of Absolute.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.NotEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Equal(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.NotEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Equal(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.NotEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.LessThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GreaterThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Equals(HAL.Units.Absolute.Absolute)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Equality(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.Absolute)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Inequality(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.Absolute)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Equality(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Inequality(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_GreaterThan(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_GreaterThanOrEqual(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_LessThan(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_LessThanOrEqual(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Addition(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Subtraction(HAL.Units.Absolute.Absolute,HAL.Units.Absolute.abs)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Multiply(HAL.Units.Absolute.Absolute,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Division(HAL.Units.Absolute.Absolute,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Implicit(HAL.Units.Absolute.abs)~HAL.Units.Absolute.Absolute">
      <summary>Implicit conversion from a value in Abs.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Implicit(HAL.Units.Absolute.Absolute)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Absolute.Absolute.op_Implicit(HAL.Units.Absolute.Absolute)~HAL.Units.Absolute.abs">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Absolute.IAbsolute">
      <summary>Implement this class if you wish to add a(n) Absolute measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Absolute.abs">
      <summary>Abs unit.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.#ctor(HAL.Units.Absolute.IAbsolute)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Absolute.abs.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Absolute.abs.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Absolute.abs.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Implicit(System.Double)~HAL.Units.Absolute.abs">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_UnaryPlus(HAL.Units.Absolute.abs)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_UnaryNegation(HAL.Units.Absolute.abs)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Addition(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>abs addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Subtraction(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>abs subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Multiply(HAL.Units.Absolute.abs,System.Double)">
      <summary>abs multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Division(HAL.Units.Absolute.abs,System.Double)">
      <summary>abs division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Equality(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Equality operator with the default Absolute tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_Inequality(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_GreaterThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_GreaterThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_LessThan(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.op_LessThanOrEqual(HAL.Units.Absolute.abs,HAL.Units.Absolute.abs)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Absolute.abs.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Add(HAL.Units.Absolute.abs)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Subtract(HAL.Units.Absolute.abs)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Equals(HAL.Units.Absolute.abs)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.NotEqual(HAL.Units.Absolute.abs)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.LessThan(HAL.Units.Absolute.abs)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.LessThanOrEqual(HAL.Units.Absolute.abs)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.GreaterThan(HAL.Units.Absolute.abs)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.GreaterThanOrEqual(HAL.Units.Absolute.abs)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.Equals(HAL.Units.Absolute.IAbsolute)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Absolute.abs.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.AngularAcceleration">
      <summary>A measurement of AngularAcceleration, expressed in radians per second squared (rad/s²).</summary>
    </member>
    <member name="F:HAL.Units.Acceleration.AngularAcceleration.DefaultEpsilon">
      <summary>The default difference allowed between two AngularAcceleration measurements.</summary>
    </member>
    <member name="F:HAL.Units.Acceleration.AngularAcceleration.DefaultEpsilonSquared">
      <summary>The default difference allowed between two AngularAcceleration measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Acceleration.AngularAcceleration.DefaultTolerance">
      <summary>The default tolerance allowed between two AngularAcceleration measurements.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.#ctor(HAL.Units.Acceleration.rad_s2)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.#ctor(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.#ctor(HAL.Units.Acceleration.AngularAcceleration)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.AngularAcceleration.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.AngularAcceleration.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of AngularAcceleration.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Equal(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether values are within the default tolerance of AngularAcceleration.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.NotEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Equal(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.NotEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Equal(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.NotEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.LessThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GreaterThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Equals(HAL.Units.Acceleration.AngularAcceleration)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Equality(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.AngularAcceleration)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Inequality(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.AngularAcceleration)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Equality(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Inequality(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_GreaterThan(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_GreaterThanOrEqual(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_LessThan(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_LessThanOrEqual(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Addition(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Subtraction(HAL.Units.Acceleration.AngularAcceleration,HAL.Units.Acceleration.rad_s2)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Multiply(HAL.Units.Acceleration.AngularAcceleration,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Division(HAL.Units.Acceleration.AngularAcceleration,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Implicit(HAL.Units.Acceleration.deg_s2)~HAL.Units.Acceleration.AngularAcceleration">
      <summary>Implicit conversion from a value in Degrees per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Implicit(HAL.Units.Acceleration.rad_s2)~HAL.Units.Acceleration.AngularAcceleration">
      <summary>Implicit conversion from a value in Radians per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Implicit(HAL.Units.Acceleration.AngularAcceleration)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.AngularAcceleration.op_Implicit(HAL.Units.Acceleration.AngularAcceleration)~HAL.Units.Acceleration.rad_s2">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Acceleration.IAngularAcceleration">
      <summary>Implement this class if you wish to add a(n) AngularAcceleration measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.deg_s2">
      <summary>Degrees per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.#ctor(HAL.Units.Acceleration.IAngularAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.deg_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.deg_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.deg_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.deg_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.op_Explicit(HAL.Units.Acceleration.deg_s2)~HAL.Units.Acceleration.rad_s2">
      <summary>Implicit conversion to rad_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.op_UnaryPlus(HAL.Units.Acceleration.deg_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.op_UnaryNegation(HAL.Units.Acceleration.deg_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Add(HAL.Units.Acceleration.deg_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Subtract(HAL.Units.Acceleration.deg_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Equals(HAL.Units.Acceleration.deg_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.NotEqual(HAL.Units.Acceleration.deg_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.LessThan(HAL.Units.Acceleration.deg_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.LessThanOrEqual(HAL.Units.Acceleration.deg_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.GreaterThan(HAL.Units.Acceleration.deg_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.GreaterThanOrEqual(HAL.Units.Acceleration.deg_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.Equals(HAL.Units.Acceleration.IAngularAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.deg_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.rad_s2">
      <summary>Radians per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.#ctor(HAL.Units.Acceleration.IAngularAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.rad_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.rad_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.rad_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.rad_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Explicit(HAL.Units.Acceleration.rad_s2)~HAL.Units.Acceleration.deg_s2">
      <summary>Implicit conversion to deg_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_UnaryPlus(HAL.Units.Acceleration.rad_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_UnaryNegation(HAL.Units.Acceleration.rad_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Addition(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>rad_s2 addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Subtraction(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>rad_s2 subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Multiply(HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>rad_s2 multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Division(HAL.Units.Acceleration.rad_s2,System.Double)">
      <summary>rad_s2 division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Equality(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Equality operator with the default AngularAcceleration tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_Inequality(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_GreaterThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_GreaterThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_LessThan(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.op_LessThanOrEqual(HAL.Units.Acceleration.rad_s2,HAL.Units.Acceleration.rad_s2)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Add(HAL.Units.Acceleration.rad_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Subtract(HAL.Units.Acceleration.rad_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Equals(HAL.Units.Acceleration.rad_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.NotEqual(HAL.Units.Acceleration.rad_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.LessThan(HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.LessThanOrEqual(HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.GreaterThan(HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.GreaterThanOrEqual(HAL.Units.Acceleration.rad_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.Equals(HAL.Units.Acceleration.IAngularAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.rad_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.LinearAcceleration">
      <summary>A measurement of LinearAcceleration, expressed in meters per second squared (m/s²).</summary>
    </member>
    <member name="F:HAL.Units.Acceleration.LinearAcceleration.DefaultEpsilon">
      <summary>The default difference allowed between two LinearAcceleration measurements.</summary>
    </member>
    <member name="F:HAL.Units.Acceleration.LinearAcceleration.DefaultEpsilonSquared">
      <summary>The default difference allowed between two LinearAcceleration measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Acceleration.LinearAcceleration.DefaultTolerance">
      <summary>The default tolerance allowed between two LinearAcceleration measurements.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.#ctor(HAL.Units.Acceleration.m_s2)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.#ctor(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.#ctor(HAL.Units.Acceleration.LinearAcceleration)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.LinearAcceleration.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.LinearAcceleration.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of LinearAcceleration.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Equal(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether values are within the default tolerance of LinearAcceleration.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.NotEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Equal(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.NotEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Equal(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.NotEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.LessThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GreaterThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Equals(HAL.Units.Acceleration.LinearAcceleration)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Equality(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.LinearAcceleration)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Inequality(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.LinearAcceleration)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Equality(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Inequality(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_GreaterThan(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_GreaterThanOrEqual(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_LessThan(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_LessThanOrEqual(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Addition(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Subtraction(HAL.Units.Acceleration.LinearAcceleration,HAL.Units.Acceleration.m_s2)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Multiply(HAL.Units.Acceleration.LinearAcceleration,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Division(HAL.Units.Acceleration.LinearAcceleration,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.mm_s2)~HAL.Units.Acceleration.LinearAcceleration">
      <summary>Implicit conversion from a value in Millimeters per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.cm_s2)~HAL.Units.Acceleration.LinearAcceleration">
      <summary>Implicit conversion from a value in Centimeters per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.m_s2)~HAL.Units.Acceleration.LinearAcceleration">
      <summary>Implicit conversion from a value in Meters per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.inch_s2)~HAL.Units.Acceleration.LinearAcceleration">
      <summary>Implicit conversion from a value in Inches per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.ft_s2)~HAL.Units.Acceleration.LinearAcceleration">
      <summary>Implicit conversion from a value in Feet per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.LinearAcceleration)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.LinearAcceleration.op_Implicit(HAL.Units.Acceleration.LinearAcceleration)~HAL.Units.Acceleration.m_s2">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Acceleration.ILinearAcceleration">
      <summary>Implement this class if you wish to add a(n) LinearAcceleration measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.mm_s2">
      <summary>Millimeters per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.#ctor(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.mm_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.mm_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.mm_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.mm_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_Explicit(HAL.Units.Acceleration.mm_s2)~HAL.Units.Acceleration.cm_s2">
      <summary>Implicit conversion to cm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_Explicit(HAL.Units.Acceleration.mm_s2)~HAL.Units.Acceleration.m_s2">
      <summary>Implicit conversion to m_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_Explicit(HAL.Units.Acceleration.mm_s2)~HAL.Units.Acceleration.inch_s2">
      <summary>Implicit conversion to inch_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_Explicit(HAL.Units.Acceleration.mm_s2)~HAL.Units.Acceleration.ft_s2">
      <summary>Implicit conversion to ft_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_UnaryPlus(HAL.Units.Acceleration.mm_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.op_UnaryNegation(HAL.Units.Acceleration.mm_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Add(HAL.Units.Acceleration.mm_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Subtract(HAL.Units.Acceleration.mm_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Equals(HAL.Units.Acceleration.mm_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.NotEqual(HAL.Units.Acceleration.mm_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.LessThan(HAL.Units.Acceleration.mm_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.LessThanOrEqual(HAL.Units.Acceleration.mm_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.GreaterThan(HAL.Units.Acceleration.mm_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.GreaterThanOrEqual(HAL.Units.Acceleration.mm_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.Equals(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.mm_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.cm_s2">
      <summary>Centimeters per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.#ctor(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.cm_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.cm_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.cm_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.cm_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_Explicit(HAL.Units.Acceleration.cm_s2)~HAL.Units.Acceleration.mm_s2">
      <summary>Implicit conversion to mm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_Explicit(HAL.Units.Acceleration.cm_s2)~HAL.Units.Acceleration.m_s2">
      <summary>Implicit conversion to m_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_Explicit(HAL.Units.Acceleration.cm_s2)~HAL.Units.Acceleration.inch_s2">
      <summary>Implicit conversion to inch_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_Explicit(HAL.Units.Acceleration.cm_s2)~HAL.Units.Acceleration.ft_s2">
      <summary>Implicit conversion to ft_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_UnaryPlus(HAL.Units.Acceleration.cm_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.op_UnaryNegation(HAL.Units.Acceleration.cm_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Add(HAL.Units.Acceleration.cm_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Subtract(HAL.Units.Acceleration.cm_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Equals(HAL.Units.Acceleration.cm_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.NotEqual(HAL.Units.Acceleration.cm_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.LessThan(HAL.Units.Acceleration.cm_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.LessThanOrEqual(HAL.Units.Acceleration.cm_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.GreaterThan(HAL.Units.Acceleration.cm_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.GreaterThanOrEqual(HAL.Units.Acceleration.cm_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.Equals(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.cm_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.m_s2">
      <summary>Meters per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.#ctor(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.m_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.m_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.m_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.m_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Explicit(HAL.Units.Acceleration.m_s2)~HAL.Units.Acceleration.mm_s2">
      <summary>Implicit conversion to mm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Explicit(HAL.Units.Acceleration.m_s2)~HAL.Units.Acceleration.cm_s2">
      <summary>Implicit conversion to cm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Explicit(HAL.Units.Acceleration.m_s2)~HAL.Units.Acceleration.inch_s2">
      <summary>Implicit conversion to inch_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Explicit(HAL.Units.Acceleration.m_s2)~HAL.Units.Acceleration.ft_s2">
      <summary>Implicit conversion to ft_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_UnaryPlus(HAL.Units.Acceleration.m_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_UnaryNegation(HAL.Units.Acceleration.m_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Addition(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>m_s2 addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Subtraction(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>m_s2 subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Multiply(HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>m_s2 multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Division(HAL.Units.Acceleration.m_s2,System.Double)">
      <summary>m_s2 division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Equality(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Equality operator with the default LinearAcceleration tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_Inequality(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_GreaterThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_GreaterThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_LessThan(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.op_LessThanOrEqual(HAL.Units.Acceleration.m_s2,HAL.Units.Acceleration.m_s2)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Add(HAL.Units.Acceleration.m_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Subtract(HAL.Units.Acceleration.m_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Equals(HAL.Units.Acceleration.m_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.NotEqual(HAL.Units.Acceleration.m_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.LessThan(HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.LessThanOrEqual(HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.GreaterThan(HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.GreaterThanOrEqual(HAL.Units.Acceleration.m_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.Equals(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.m_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.inch_s2">
      <summary>Inches per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.#ctor(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.inch_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.inch_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.inch_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.inch_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_Explicit(HAL.Units.Acceleration.inch_s2)~HAL.Units.Acceleration.mm_s2">
      <summary>Implicit conversion to mm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_Explicit(HAL.Units.Acceleration.inch_s2)~HAL.Units.Acceleration.cm_s2">
      <summary>Implicit conversion to cm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_Explicit(HAL.Units.Acceleration.inch_s2)~HAL.Units.Acceleration.m_s2">
      <summary>Implicit conversion to m_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_Explicit(HAL.Units.Acceleration.inch_s2)~HAL.Units.Acceleration.ft_s2">
      <summary>Implicit conversion to ft_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_UnaryPlus(HAL.Units.Acceleration.inch_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.op_UnaryNegation(HAL.Units.Acceleration.inch_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Add(HAL.Units.Acceleration.inch_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Subtract(HAL.Units.Acceleration.inch_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Equals(HAL.Units.Acceleration.inch_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.NotEqual(HAL.Units.Acceleration.inch_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.LessThan(HAL.Units.Acceleration.inch_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.LessThanOrEqual(HAL.Units.Acceleration.inch_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.GreaterThan(HAL.Units.Acceleration.inch_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.GreaterThanOrEqual(HAL.Units.Acceleration.inch_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.Equals(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.inch_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Acceleration.ft_s2">
      <summary>Feet per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.#ctor(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Acceleration.ft_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.ft_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Acceleration.ft_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_Implicit(System.Double)~HAL.Units.Acceleration.ft_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_Explicit(HAL.Units.Acceleration.ft_s2)~HAL.Units.Acceleration.mm_s2">
      <summary>Implicit conversion to mm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_Explicit(HAL.Units.Acceleration.ft_s2)~HAL.Units.Acceleration.cm_s2">
      <summary>Implicit conversion to cm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_Explicit(HAL.Units.Acceleration.ft_s2)~HAL.Units.Acceleration.m_s2">
      <summary>Implicit conversion to m_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_Explicit(HAL.Units.Acceleration.ft_s2)~HAL.Units.Acceleration.inch_s2">
      <summary>Implicit conversion to inch_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s2.</param>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_UnaryPlus(HAL.Units.Acceleration.ft_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.op_UnaryNegation(HAL.Units.Acceleration.ft_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Add(HAL.Units.Acceleration.ft_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Subtract(HAL.Units.Acceleration.ft_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Equals(HAL.Units.Acceleration.ft_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.NotEqual(HAL.Units.Acceleration.ft_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.LessThan(HAL.Units.Acceleration.ft_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.LessThanOrEqual(HAL.Units.Acceleration.ft_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.GreaterThan(HAL.Units.Acceleration.ft_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.GreaterThanOrEqual(HAL.Units.Acceleration.ft_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.Equals(HAL.Units.Acceleration.ILinearAcceleration)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Acceleration.ft_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Angle.Angle">
      <summary>A measurement of Angle, expressed in radians (rad).</summary>
    </member>
    <member name="F:HAL.Units.Angle.Angle.DefaultEpsilon">
      <summary>The default difference allowed between two Angle measurements.</summary>
    </member>
    <member name="F:HAL.Units.Angle.Angle.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Angle measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Angle.Angle.DefaultTolerance">
      <summary>The default tolerance allowed between two Angle measurements.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.#ctor(HAL.Units.Angle.rad)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.#ctor(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.#ctor(HAL.Units.Angle.Angle)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Angle.Angle.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Angle.Angle.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Angle.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Equal(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether values are within the default tolerance of Angle.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.NotEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Equal(HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.NotEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Equal(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.NotEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.LessThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GreaterThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Equals(HAL.Units.Angle.Angle)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Equality(HAL.Units.Angle.Angle,HAL.Units.Angle.Angle)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Inequality(HAL.Units.Angle.Angle,HAL.Units.Angle.Angle)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Equality(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Inequality(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_GreaterThan(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_GreaterThanOrEqual(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_LessThan(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_LessThanOrEqual(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Addition(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Subtraction(HAL.Units.Angle.Angle,HAL.Units.Angle.rad)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Multiply(HAL.Units.Angle.Angle,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Division(HAL.Units.Angle.Angle,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Implicit(HAL.Units.Angle.deg)~HAL.Units.Angle.Angle">
      <summary>Implicit conversion from a value in Degrees.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Implicit(HAL.Units.Angle.quad)~HAL.Units.Angle.Angle">
      <summary>Implicit conversion from a value in Quadrants.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Implicit(HAL.Units.Angle.rad)~HAL.Units.Angle.Angle">
      <summary>Implicit conversion from a value in Radians.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Implicit(HAL.Units.Angle.rot)~HAL.Units.Angle.Angle">
      <summary>Implicit conversion from a value in Turns.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Implicit(HAL.Units.Angle.Angle)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Angle.Angle.op_Implicit(HAL.Units.Angle.Angle)~HAL.Units.Angle.rad">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Angle.IAngle">
      <summary>Implement this class if you wish to add a(n) Angle measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Angle.deg">
      <summary>Degrees unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Angle.deg.#ctor(HAL.Units.Angle.IAngle)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Angle.deg.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.deg.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.deg.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.op_Implicit(System.Double)~HAL.Units.Angle.deg">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Angle.deg.op_Explicit(HAL.Units.Angle.deg)~HAL.Units.Angle.quad">
      <summary>Implicit conversion to quad.</summary>
      <param name="measurement">Measurement in the current unit to convert to quad.</param>
    </member>
    <member name="M:HAL.Units.Angle.deg.op_Explicit(HAL.Units.Angle.deg)~HAL.Units.Angle.rad">
      <summary>Implicit conversion to rad.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad.</param>
    </member>
    <member name="M:HAL.Units.Angle.deg.op_Explicit(HAL.Units.Angle.deg)~HAL.Units.Angle.rot">
      <summary>Implicit conversion to rot.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot.</param>
    </member>
    <member name="M:HAL.Units.Angle.deg.op_UnaryPlus(HAL.Units.Angle.deg)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.op_UnaryNegation(HAL.Units.Angle.deg)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.Add(HAL.Units.Angle.deg)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.Subtract(HAL.Units.Angle.deg)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.deg.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.Equals(HAL.Units.Angle.deg)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.NotEqual(HAL.Units.Angle.deg)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.LessThan(HAL.Units.Angle.deg)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.LessThanOrEqual(HAL.Units.Angle.deg)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.GreaterThan(HAL.Units.Angle.deg)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.GreaterThanOrEqual(HAL.Units.Angle.deg)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.Equals(HAL.Units.Angle.IAngle)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.deg.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Angle.quad">
      <summary>Quadrants unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Angle.quad.#ctor(HAL.Units.Angle.IAngle)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Angle.quad.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.quad.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.quad.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.op_Implicit(System.Double)~HAL.Units.Angle.quad">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Angle.quad.op_Explicit(HAL.Units.Angle.quad)~HAL.Units.Angle.deg">
      <summary>Implicit conversion to deg.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg.</param>
    </member>
    <member name="M:HAL.Units.Angle.quad.op_Explicit(HAL.Units.Angle.quad)~HAL.Units.Angle.rad">
      <summary>Implicit conversion to rad.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad.</param>
    </member>
    <member name="M:HAL.Units.Angle.quad.op_Explicit(HAL.Units.Angle.quad)~HAL.Units.Angle.rot">
      <summary>Implicit conversion to rot.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot.</param>
    </member>
    <member name="M:HAL.Units.Angle.quad.op_UnaryPlus(HAL.Units.Angle.quad)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.op_UnaryNegation(HAL.Units.Angle.quad)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.Add(HAL.Units.Angle.quad)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.Subtract(HAL.Units.Angle.quad)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.quad.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.Equals(HAL.Units.Angle.quad)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.NotEqual(HAL.Units.Angle.quad)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.LessThan(HAL.Units.Angle.quad)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.LessThanOrEqual(HAL.Units.Angle.quad)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.GreaterThan(HAL.Units.Angle.quad)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.GreaterThanOrEqual(HAL.Units.Angle.quad)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.Equals(HAL.Units.Angle.IAngle)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.quad.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Angle.rad">
      <summary>Radians unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.#ctor(HAL.Units.Angle.IAngle)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Angle.rad.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.rad.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.rad.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Implicit(System.Double)~HAL.Units.Angle.rad">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Explicit(HAL.Units.Angle.rad)~HAL.Units.Angle.deg">
      <summary>Implicit conversion to deg.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Explicit(HAL.Units.Angle.rad)~HAL.Units.Angle.quad">
      <summary>Implicit conversion to quad.</summary>
      <param name="measurement">Measurement in the current unit to convert to quad.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Explicit(HAL.Units.Angle.rad)~HAL.Units.Angle.rot">
      <summary>Implicit conversion to rot.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_UnaryPlus(HAL.Units.Angle.rad)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_UnaryNegation(HAL.Units.Angle.rad)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Addition(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>rad addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Subtraction(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>rad subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Multiply(HAL.Units.Angle.rad,System.Double)">
      <summary>rad multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Division(HAL.Units.Angle.rad,System.Double)">
      <summary>rad division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Equality(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Equality operator with the default Angle tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_Inequality(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_GreaterThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_GreaterThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_LessThan(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.op_LessThanOrEqual(HAL.Units.Angle.rad,HAL.Units.Angle.rad)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Angle.rad.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.Add(HAL.Units.Angle.rad)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.Subtract(HAL.Units.Angle.rad)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rad.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.Equals(HAL.Units.Angle.rad)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.NotEqual(HAL.Units.Angle.rad)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.LessThan(HAL.Units.Angle.rad)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.LessThanOrEqual(HAL.Units.Angle.rad)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.GreaterThan(HAL.Units.Angle.rad)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.GreaterThanOrEqual(HAL.Units.Angle.rad)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.Equals(HAL.Units.Angle.IAngle)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rad.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Angle.rot">
      <summary>Turns unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Angle.rot.#ctor(HAL.Units.Angle.IAngle)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Angle.rot.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.rot.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Angle.rot.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.op_Implicit(System.Double)~HAL.Units.Angle.rot">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Angle.rot.op_Explicit(HAL.Units.Angle.rot)~HAL.Units.Angle.deg">
      <summary>Implicit conversion to deg.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg.</param>
    </member>
    <member name="M:HAL.Units.Angle.rot.op_Explicit(HAL.Units.Angle.rot)~HAL.Units.Angle.quad">
      <summary>Implicit conversion to quad.</summary>
      <param name="measurement">Measurement in the current unit to convert to quad.</param>
    </member>
    <member name="M:HAL.Units.Angle.rot.op_Explicit(HAL.Units.Angle.rot)~HAL.Units.Angle.rad">
      <summary>Implicit conversion to rad.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad.</param>
    </member>
    <member name="M:HAL.Units.Angle.rot.op_UnaryPlus(HAL.Units.Angle.rot)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.op_UnaryNegation(HAL.Units.Angle.rot)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.Add(HAL.Units.Angle.rot)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.Subtract(HAL.Units.Angle.rot)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Angle.rot.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.Equals(HAL.Units.Angle.rot)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.NotEqual(HAL.Units.Angle.rot)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.LessThan(HAL.Units.Angle.rot)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.LessThanOrEqual(HAL.Units.Angle.rot)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.GreaterThan(HAL.Units.Angle.rot)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.GreaterThanOrEqual(HAL.Units.Angle.rot)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.Equals(HAL.Units.Angle.IAngle)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Angle.rot.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Density.Density">
      <summary>A measurement of Density, expressed in kilograms per cubic meter (kg/m3).</summary>
    </member>
    <member name="F:HAL.Units.Density.Density.DefaultEpsilon">
      <summary>The default difference allowed between two Density measurements.</summary>
    </member>
    <member name="F:HAL.Units.Density.Density.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Density measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Density.Density.DefaultTolerance">
      <summary>The default tolerance allowed between two Density measurements.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.#ctor(HAL.Units.Density.kg_m3)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.#ctor(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.#ctor(HAL.Units.Density.Density)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Density.Density.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Density.Density.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.Density.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Density.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.Equal(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether values are within the default tolerance of Density.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.NotEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.Equal(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.NotEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.Equal(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.NotEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.LessThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.GreaterThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Density.Density.Equals(HAL.Units.Density.Density)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Equality(HAL.Units.Density.Density,HAL.Units.Density.Density)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Inequality(HAL.Units.Density.Density,HAL.Units.Density.Density)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Equality(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Inequality(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_GreaterThan(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_GreaterThanOrEqual(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_LessThan(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_LessThanOrEqual(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Addition(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Subtraction(HAL.Units.Density.Density,HAL.Units.Density.kg_m3)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Multiply(HAL.Units.Density.Density,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Division(HAL.Units.Density.Density,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.kg_dm3)~HAL.Units.Density.Density">
      <summary>Implicit conversion from a value in Kilograms per Cubic Decimeter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.kg_m3)~HAL.Units.Density.Density">
      <summary>Implicit conversion from a value in Kilograms per Cubic Meter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.kg_L)~HAL.Units.Density.Density">
      <summary>Implicit conversion from a value in Kilograms per Liter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.g_mL)~HAL.Units.Density.Density">
      <summary>Implicit conversion from a value in Grams per Milliliter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.g_cm3)~HAL.Units.Density.Density">
      <summary>Implicit conversion from a value in Grams per Cubic Centimeter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.t_m3)~HAL.Units.Density.Density">
      <summary>Implicit conversion from a value in Tons per Cubic Meter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.Density)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.Density.op_Implicit(HAL.Units.Density.Density)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Density.IDensity">
      <summary>Implement this class if you wish to add a(n) Density measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Density.kg_dm3">
      <summary>Kilograms per Cubic Decimeter unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.#ctor(HAL.Units.Density.IDensity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Density.kg_dm3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.kg_dm3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.kg_dm3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_Implicit(System.Double)~HAL.Units.Density.kg_dm3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_Explicit(HAL.Units.Density.kg_dm3)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion to kg_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_Explicit(HAL.Units.Density.kg_dm3)~HAL.Units.Density.kg_L">
      <summary>Implicit conversion to kg_L.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_L.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_Explicit(HAL.Units.Density.kg_dm3)~HAL.Units.Density.g_mL">
      <summary>Implicit conversion to g_mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_mL.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_Explicit(HAL.Units.Density.kg_dm3)~HAL.Units.Density.g_cm3">
      <summary>Implicit conversion to g_cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_cm3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_Explicit(HAL.Units.Density.kg_dm3)~HAL.Units.Density.t_m3">
      <summary>Implicit conversion to t_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to t_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_UnaryPlus(HAL.Units.Density.kg_dm3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.op_UnaryNegation(HAL.Units.Density.kg_dm3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Add(HAL.Units.Density.kg_dm3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Subtract(HAL.Units.Density.kg_dm3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Equals(HAL.Units.Density.kg_dm3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.NotEqual(HAL.Units.Density.kg_dm3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.LessThan(HAL.Units.Density.kg_dm3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.LessThanOrEqual(HAL.Units.Density.kg_dm3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.GreaterThan(HAL.Units.Density.kg_dm3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.GreaterThanOrEqual(HAL.Units.Density.kg_dm3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.Equals(HAL.Units.Density.IDensity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_dm3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Density.kg_m3">
      <summary>Kilograms per Cubic Meter unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.#ctor(HAL.Units.Density.IDensity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Density.kg_m3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.kg_m3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.kg_m3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Implicit(System.Double)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Explicit(HAL.Units.Density.kg_m3)~HAL.Units.Density.kg_dm3">
      <summary>Implicit conversion to kg_dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_dm3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Explicit(HAL.Units.Density.kg_m3)~HAL.Units.Density.kg_L">
      <summary>Implicit conversion to kg_L.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_L.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Explicit(HAL.Units.Density.kg_m3)~HAL.Units.Density.g_mL">
      <summary>Implicit conversion to g_mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_mL.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Explicit(HAL.Units.Density.kg_m3)~HAL.Units.Density.g_cm3">
      <summary>Implicit conversion to g_cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_cm3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Explicit(HAL.Units.Density.kg_m3)~HAL.Units.Density.t_m3">
      <summary>Implicit conversion to t_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to t_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_UnaryPlus(HAL.Units.Density.kg_m3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_UnaryNegation(HAL.Units.Density.kg_m3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Addition(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>kg_m3 addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Subtraction(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>kg_m3 subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Multiply(HAL.Units.Density.kg_m3,System.Double)">
      <summary>kg_m3 multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Division(HAL.Units.Density.kg_m3,System.Double)">
      <summary>kg_m3 division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Equality(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Equality operator with the default Density tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_Inequality(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_GreaterThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_GreaterThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_LessThan(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.op_LessThanOrEqual(HAL.Units.Density.kg_m3,HAL.Units.Density.kg_m3)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Add(HAL.Units.Density.kg_m3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Subtract(HAL.Units.Density.kg_m3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Equals(HAL.Units.Density.kg_m3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.NotEqual(HAL.Units.Density.kg_m3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.LessThan(HAL.Units.Density.kg_m3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.LessThanOrEqual(HAL.Units.Density.kg_m3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.GreaterThan(HAL.Units.Density.kg_m3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.GreaterThanOrEqual(HAL.Units.Density.kg_m3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.Equals(HAL.Units.Density.IDensity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_m3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Density.kg_L">
      <summary>Kilograms per Liter unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.#ctor(HAL.Units.Density.IDensity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Density.kg_L.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.kg_L.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.kg_L.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_Implicit(System.Double)~HAL.Units.Density.kg_L">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_Explicit(HAL.Units.Density.kg_L)~HAL.Units.Density.kg_dm3">
      <summary>Implicit conversion to kg_dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_dm3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_Explicit(HAL.Units.Density.kg_L)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion to kg_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_Explicit(HAL.Units.Density.kg_L)~HAL.Units.Density.g_mL">
      <summary>Implicit conversion to g_mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_mL.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_Explicit(HAL.Units.Density.kg_L)~HAL.Units.Density.g_cm3">
      <summary>Implicit conversion to g_cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_cm3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_Explicit(HAL.Units.Density.kg_L)~HAL.Units.Density.t_m3">
      <summary>Implicit conversion to t_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to t_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_UnaryPlus(HAL.Units.Density.kg_L)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.op_UnaryNegation(HAL.Units.Density.kg_L)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Add(HAL.Units.Density.kg_L)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Subtract(HAL.Units.Density.kg_L)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Equals(HAL.Units.Density.kg_L)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.NotEqual(HAL.Units.Density.kg_L)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.LessThan(HAL.Units.Density.kg_L)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.LessThanOrEqual(HAL.Units.Density.kg_L)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.GreaterThan(HAL.Units.Density.kg_L)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.GreaterThanOrEqual(HAL.Units.Density.kg_L)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.Equals(HAL.Units.Density.IDensity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.kg_L.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Density.g_mL">
      <summary>Grams per Milliliter unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.#ctor(HAL.Units.Density.IDensity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Density.g_mL.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.g_mL.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.g_mL.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_Implicit(System.Double)~HAL.Units.Density.g_mL">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_Explicit(HAL.Units.Density.g_mL)~HAL.Units.Density.kg_dm3">
      <summary>Implicit conversion to kg_dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_dm3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_Explicit(HAL.Units.Density.g_mL)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion to kg_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_Explicit(HAL.Units.Density.g_mL)~HAL.Units.Density.kg_L">
      <summary>Implicit conversion to kg_L.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_L.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_Explicit(HAL.Units.Density.g_mL)~HAL.Units.Density.g_cm3">
      <summary>Implicit conversion to g_cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_cm3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_Explicit(HAL.Units.Density.g_mL)~HAL.Units.Density.t_m3">
      <summary>Implicit conversion to t_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to t_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_UnaryPlus(HAL.Units.Density.g_mL)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.op_UnaryNegation(HAL.Units.Density.g_mL)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Add(HAL.Units.Density.g_mL)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Subtract(HAL.Units.Density.g_mL)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Equals(HAL.Units.Density.g_mL)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.NotEqual(HAL.Units.Density.g_mL)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.LessThan(HAL.Units.Density.g_mL)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.LessThanOrEqual(HAL.Units.Density.g_mL)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.GreaterThan(HAL.Units.Density.g_mL)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.GreaterThanOrEqual(HAL.Units.Density.g_mL)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.Equals(HAL.Units.Density.IDensity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_mL.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Density.g_cm3">
      <summary>Grams per Cubic Centimeter unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.#ctor(HAL.Units.Density.IDensity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Density.g_cm3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.g_cm3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.g_cm3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_Implicit(System.Double)~HAL.Units.Density.g_cm3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_Explicit(HAL.Units.Density.g_cm3)~HAL.Units.Density.kg_dm3">
      <summary>Implicit conversion to kg_dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_dm3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_Explicit(HAL.Units.Density.g_cm3)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion to kg_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_Explicit(HAL.Units.Density.g_cm3)~HAL.Units.Density.kg_L">
      <summary>Implicit conversion to kg_L.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_L.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_Explicit(HAL.Units.Density.g_cm3)~HAL.Units.Density.g_mL">
      <summary>Implicit conversion to g_mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_mL.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_Explicit(HAL.Units.Density.g_cm3)~HAL.Units.Density.t_m3">
      <summary>Implicit conversion to t_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to t_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_UnaryPlus(HAL.Units.Density.g_cm3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.op_UnaryNegation(HAL.Units.Density.g_cm3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Add(HAL.Units.Density.g_cm3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Subtract(HAL.Units.Density.g_cm3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Equals(HAL.Units.Density.g_cm3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.NotEqual(HAL.Units.Density.g_cm3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.LessThan(HAL.Units.Density.g_cm3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.LessThanOrEqual(HAL.Units.Density.g_cm3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.GreaterThan(HAL.Units.Density.g_cm3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.GreaterThanOrEqual(HAL.Units.Density.g_cm3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.Equals(HAL.Units.Density.IDensity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.g_cm3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Density.t_m3">
      <summary>Tons per Cubic Meter unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.#ctor(HAL.Units.Density.IDensity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Density.t_m3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.t_m3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Density.t_m3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_Implicit(System.Double)~HAL.Units.Density.t_m3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_Explicit(HAL.Units.Density.t_m3)~HAL.Units.Density.kg_dm3">
      <summary>Implicit conversion to kg_dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_dm3.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_Explicit(HAL.Units.Density.t_m3)~HAL.Units.Density.kg_m3">
      <summary>Implicit conversion to kg_m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_m3.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_Explicit(HAL.Units.Density.t_m3)~HAL.Units.Density.kg_L">
      <summary>Implicit conversion to kg_L.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_L.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_Explicit(HAL.Units.Density.t_m3)~HAL.Units.Density.g_mL">
      <summary>Implicit conversion to g_mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_mL.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_Explicit(HAL.Units.Density.t_m3)~HAL.Units.Density.g_cm3">
      <summary>Implicit conversion to g_cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to g_cm3.</param>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_UnaryPlus(HAL.Units.Density.t_m3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.op_UnaryNegation(HAL.Units.Density.t_m3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Add(HAL.Units.Density.t_m3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Subtract(HAL.Units.Density.t_m3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Equals(HAL.Units.Density.t_m3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.NotEqual(HAL.Units.Density.t_m3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.LessThan(HAL.Units.Density.t_m3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.LessThanOrEqual(HAL.Units.Density.t_m3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.GreaterThan(HAL.Units.Density.t_m3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.GreaterThanOrEqual(HAL.Units.Density.t_m3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.Equals(HAL.Units.Density.IDensity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Density.t_m3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricCapacitance">
      <summary>A measurement of ElectricCapacitance, expressed in farads (F).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCapacitance.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricCapacitance measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCapacitance.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricCapacitance measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCapacitance.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricCapacitance measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.#ctor(HAL.Units.Electrical.F)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.#ctor(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.#ctor(HAL.Units.Electrical.ElectricCapacitance)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricCapacitance.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricCapacitance.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricCapacitance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Equal(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether values are within the default tolerance of ElectricCapacitance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.NotEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Equal(HAL.Units.Electrical.F,HAL.Units.Electrical.F,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.NotEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Equal(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.NotEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.LessThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GreaterThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Equals(HAL.Units.Electrical.ElectricCapacitance)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Equality(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.ElectricCapacitance)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Inequality(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.ElectricCapacitance)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Equality(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Inequality(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_GreaterThan(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_LessThan(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_LessThanOrEqual(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Addition(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Subtraction(HAL.Units.Electrical.ElectricCapacitance,HAL.Units.Electrical.F)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Multiply(HAL.Units.Electrical.ElectricCapacitance,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Division(HAL.Units.Electrical.ElectricCapacitance,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Implicit(HAL.Units.Electrical.F)~HAL.Units.Electrical.ElectricCapacitance">
      <summary>Implicit conversion from a value in Farads.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Implicit(HAL.Units.Electrical.ElectricCapacitance)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCapacitance.op_Implicit(HAL.Units.Electrical.ElectricCapacitance)~HAL.Units.Electrical.F">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricCapacitance">
      <summary>Implement this class if you wish to add a(n) ElectricCapacitance measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.F">
      <summary>Farads unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.#ctor(HAL.Units.Electrical.IElectricCapacitance)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.F.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.F.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.F.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Implicit(System.Double)~HAL.Units.Electrical.F">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_UnaryPlus(HAL.Units.Electrical.F)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_UnaryNegation(HAL.Units.Electrical.F)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Addition(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>F addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Subtraction(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>F subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Multiply(HAL.Units.Electrical.F,System.Double)">
      <summary>F multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Division(HAL.Units.Electrical.F,System.Double)">
      <summary>F division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Equality(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Equality operator with the default ElectricCapacitance tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_Inequality(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_GreaterThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_GreaterThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_LessThan(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.op_LessThanOrEqual(HAL.Units.Electrical.F,HAL.Units.Electrical.F)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.F.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.Add(HAL.Units.Electrical.F)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.Subtract(HAL.Units.Electrical.F)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.F.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.Equals(HAL.Units.Electrical.F)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.NotEqual(HAL.Units.Electrical.F)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.LessThan(HAL.Units.Electrical.F)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.LessThanOrEqual(HAL.Units.Electrical.F)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.GreaterThan(HAL.Units.Electrical.F)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.GreaterThanOrEqual(HAL.Units.Electrical.F)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.Equals(HAL.Units.Electrical.IElectricCapacitance)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.F.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricCharge">
      <summary>A measurement of ElectricCharge, expressed in coulombs (C).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCharge.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricCharge measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCharge.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricCharge measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCharge.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricCharge measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.#ctor(HAL.Units.Electrical.C)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.#ctor(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.#ctor(HAL.Units.Electrical.ElectricCharge)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricCharge.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricCharge.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricCharge.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Equal(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether values are within the default tolerance of ElectricCharge.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.NotEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Equal(HAL.Units.Electrical.C,HAL.Units.Electrical.C,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.NotEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Equal(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.NotEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.LessThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GreaterThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Equals(HAL.Units.Electrical.ElectricCharge)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Equality(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.ElectricCharge)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Inequality(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.ElectricCharge)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Equality(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Inequality(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_GreaterThan(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_LessThan(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_LessThanOrEqual(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Addition(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Subtraction(HAL.Units.Electrical.ElectricCharge,HAL.Units.Electrical.C)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Multiply(HAL.Units.Electrical.ElectricCharge,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Division(HAL.Units.Electrical.ElectricCharge,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Implicit(HAL.Units.Electrical.C)~HAL.Units.Electrical.ElectricCharge">
      <summary>Implicit conversion from a value in Coulombs.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Implicit(HAL.Units.Electrical.ElectricCharge)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCharge.op_Implicit(HAL.Units.Electrical.ElectricCharge)~HAL.Units.Electrical.C">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricCharge">
      <summary>Implement this class if you wish to add a(n) ElectricCharge measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.C">
      <summary>Coulombs unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.#ctor(HAL.Units.Electrical.IElectricCharge)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.C.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.C.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.C.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Implicit(System.Double)~HAL.Units.Electrical.C">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_UnaryPlus(HAL.Units.Electrical.C)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_UnaryNegation(HAL.Units.Electrical.C)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Addition(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>C addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Subtraction(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>C subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Multiply(HAL.Units.Electrical.C,System.Double)">
      <summary>C multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Division(HAL.Units.Electrical.C,System.Double)">
      <summary>C division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Equality(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Equality operator with the default ElectricCharge tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_Inequality(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_GreaterThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_GreaterThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_LessThan(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.op_LessThanOrEqual(HAL.Units.Electrical.C,HAL.Units.Electrical.C)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.C.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.Add(HAL.Units.Electrical.C)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.Subtract(HAL.Units.Electrical.C)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.C.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.Equals(HAL.Units.Electrical.C)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.NotEqual(HAL.Units.Electrical.C)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.LessThan(HAL.Units.Electrical.C)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.LessThanOrEqual(HAL.Units.Electrical.C)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.GreaterThan(HAL.Units.Electrical.C)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.GreaterThanOrEqual(HAL.Units.Electrical.C)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.Equals(HAL.Units.Electrical.IElectricCharge)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.C.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricCurrent">
      <summary>A measurement of ElectricCurrent, expressed in amperes (A).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCurrent.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricCurrent measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCurrent.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricCurrent measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricCurrent.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricCurrent measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.#ctor(HAL.Units.Electrical.A)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.#ctor(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.#ctor(HAL.Units.Electrical.ElectricCurrent)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricCurrent.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricCurrent.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricCurrent.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Equal(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether values are within the default tolerance of ElectricCurrent.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.NotEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Equal(HAL.Units.Electrical.A,HAL.Units.Electrical.A,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.NotEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Equal(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.NotEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.LessThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GreaterThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Equals(HAL.Units.Electrical.ElectricCurrent)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Equality(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.ElectricCurrent)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Inequality(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.ElectricCurrent)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Equality(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Inequality(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_GreaterThan(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_LessThan(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_LessThanOrEqual(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Addition(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Subtraction(HAL.Units.Electrical.ElectricCurrent,HAL.Units.Electrical.A)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Multiply(HAL.Units.Electrical.ElectricCurrent,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Division(HAL.Units.Electrical.ElectricCurrent,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Implicit(HAL.Units.Electrical.A)~HAL.Units.Electrical.ElectricCurrent">
      <summary>Implicit conversion from a value in Amperes.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Implicit(HAL.Units.Electrical.ElectricCurrent)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricCurrent.op_Implicit(HAL.Units.Electrical.ElectricCurrent)~HAL.Units.Electrical.A">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricCurrent">
      <summary>Implement this class if you wish to add a(n) ElectricCurrent measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.A">
      <summary>Amperes unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.#ctor(HAL.Units.Electrical.IElectricCurrent)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.A.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.A.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.A.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Implicit(System.Double)~HAL.Units.Electrical.A">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_UnaryPlus(HAL.Units.Electrical.A)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_UnaryNegation(HAL.Units.Electrical.A)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Addition(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>A addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Subtraction(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>A subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Multiply(HAL.Units.Electrical.A,System.Double)">
      <summary>A multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Division(HAL.Units.Electrical.A,System.Double)">
      <summary>A division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Equality(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Equality operator with the default ElectricCurrent tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_Inequality(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_GreaterThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_GreaterThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_LessThan(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.op_LessThanOrEqual(HAL.Units.Electrical.A,HAL.Units.Electrical.A)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.A.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.Add(HAL.Units.Electrical.A)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.Subtract(HAL.Units.Electrical.A)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.A.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.Equals(HAL.Units.Electrical.A)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.NotEqual(HAL.Units.Electrical.A)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.LessThan(HAL.Units.Electrical.A)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.LessThanOrEqual(HAL.Units.Electrical.A)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.GreaterThan(HAL.Units.Electrical.A)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.GreaterThanOrEqual(HAL.Units.Electrical.A)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.Equals(HAL.Units.Electrical.IElectricCurrent)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.A.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricField">
      <summary>A measurement of ElectricField, expressed in volts per meter (V/m).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricField.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricField measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricField.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricField measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricField.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricField measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.#ctor(HAL.Units.Electrical.V_m)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.#ctor(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.#ctor(HAL.Units.Electrical.ElectricField)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricField.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricField.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricField.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Equal(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether values are within the default tolerance of ElectricField.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.NotEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Equal(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.NotEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Equal(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.NotEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.LessThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GreaterThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Equals(HAL.Units.Electrical.ElectricField)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Equality(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.ElectricField)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Inequality(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.ElectricField)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Equality(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Inequality(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_GreaterThan(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_LessThan(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_LessThanOrEqual(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Addition(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Subtraction(HAL.Units.Electrical.ElectricField,HAL.Units.Electrical.V_m)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Multiply(HAL.Units.Electrical.ElectricField,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Division(HAL.Units.Electrical.ElectricField,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Implicit(HAL.Units.Electrical.V_m)~HAL.Units.Electrical.ElectricField">
      <summary>Implicit conversion from a value in Volts per Meter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Implicit(HAL.Units.Electrical.ElectricField)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricField.op_Implicit(HAL.Units.Electrical.ElectricField)~HAL.Units.Electrical.V_m">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricField">
      <summary>Implement this class if you wish to add a(n) ElectricField measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.V_m">
      <summary>Volts per Meter unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.#ctor(HAL.Units.Electrical.IElectricField)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.V_m.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.V_m.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.V_m.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Implicit(System.Double)~HAL.Units.Electrical.V_m">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_UnaryPlus(HAL.Units.Electrical.V_m)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_UnaryNegation(HAL.Units.Electrical.V_m)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Addition(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>V_m addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Subtraction(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>V_m subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Multiply(HAL.Units.Electrical.V_m,System.Double)">
      <summary>V_m multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Division(HAL.Units.Electrical.V_m,System.Double)">
      <summary>V_m division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Equality(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Equality operator with the default ElectricField tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_Inequality(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_GreaterThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_GreaterThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_LessThan(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.op_LessThanOrEqual(HAL.Units.Electrical.V_m,HAL.Units.Electrical.V_m)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Add(HAL.Units.Electrical.V_m)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Subtract(HAL.Units.Electrical.V_m)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Equals(HAL.Units.Electrical.V_m)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.NotEqual(HAL.Units.Electrical.V_m)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.LessThan(HAL.Units.Electrical.V_m)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.LessThanOrEqual(HAL.Units.Electrical.V_m)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.GreaterThan(HAL.Units.Electrical.V_m)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.GreaterThanOrEqual(HAL.Units.Electrical.V_m)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.Equals(HAL.Units.Electrical.IElectricField)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V_m.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricInductance">
      <summary>A measurement of ElectricInductance, expressed in henries (H).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricInductance.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricInductance measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricInductance.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricInductance measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricInductance.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricInductance measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.#ctor(HAL.Units.Electrical.H)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.#ctor(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.#ctor(HAL.Units.Electrical.ElectricInductance)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricInductance.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricInductance.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricInductance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Equal(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether values are within the default tolerance of ElectricInductance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.NotEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Equal(HAL.Units.Electrical.H,HAL.Units.Electrical.H,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.NotEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Equal(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.NotEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.LessThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GreaterThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Equals(HAL.Units.Electrical.ElectricInductance)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Equality(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.ElectricInductance)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Inequality(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.ElectricInductance)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Equality(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Inequality(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_GreaterThan(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_LessThan(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_LessThanOrEqual(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Addition(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Subtraction(HAL.Units.Electrical.ElectricInductance,HAL.Units.Electrical.H)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Multiply(HAL.Units.Electrical.ElectricInductance,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Division(HAL.Units.Electrical.ElectricInductance,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Implicit(HAL.Units.Electrical.H)~HAL.Units.Electrical.ElectricInductance">
      <summary>Implicit conversion from a value in Henries.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Implicit(HAL.Units.Electrical.ElectricInductance)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricInductance.op_Implicit(HAL.Units.Electrical.ElectricInductance)~HAL.Units.Electrical.H">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricInductance">
      <summary>Implement this class if you wish to add a(n) ElectricInductance measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.H">
      <summary>Henries unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.#ctor(HAL.Units.Electrical.IElectricInductance)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.H.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.H.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.H.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Implicit(System.Double)~HAL.Units.Electrical.H">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_UnaryPlus(HAL.Units.Electrical.H)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_UnaryNegation(HAL.Units.Electrical.H)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Addition(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>H addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Subtraction(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>H subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Multiply(HAL.Units.Electrical.H,System.Double)">
      <summary>H multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Division(HAL.Units.Electrical.H,System.Double)">
      <summary>H division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Equality(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Equality operator with the default ElectricInductance tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_Inequality(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_GreaterThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_GreaterThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_LessThan(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.op_LessThanOrEqual(HAL.Units.Electrical.H,HAL.Units.Electrical.H)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.H.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.Add(HAL.Units.Electrical.H)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.Subtract(HAL.Units.Electrical.H)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.H.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.Equals(HAL.Units.Electrical.H)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.NotEqual(HAL.Units.Electrical.H)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.LessThan(HAL.Units.Electrical.H)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.LessThanOrEqual(HAL.Units.Electrical.H)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.GreaterThan(HAL.Units.Electrical.H)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.GreaterThanOrEqual(HAL.Units.Electrical.H)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.Equals(HAL.Units.Electrical.IElectricInductance)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.H.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricPower">
      <summary>A measurement of ElectricPower, expressed in watts (W).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricPower.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricPower measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricPower.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricPower measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricPower.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricPower measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.#ctor(HAL.Units.Electrical.W)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.#ctor(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.#ctor(HAL.Units.Electrical.ElectricPower)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricPower.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricPower.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricPower.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Equal(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether values are within the default tolerance of ElectricPower.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.NotEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Equal(HAL.Units.Electrical.W,HAL.Units.Electrical.W,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.NotEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Equal(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.NotEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.LessThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GreaterThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Equals(HAL.Units.Electrical.ElectricPower)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Equality(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.ElectricPower)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Inequality(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.ElectricPower)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Equality(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Inequality(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_GreaterThan(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_LessThan(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_LessThanOrEqual(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Addition(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Subtraction(HAL.Units.Electrical.ElectricPower,HAL.Units.Electrical.W)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Multiply(HAL.Units.Electrical.ElectricPower,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Division(HAL.Units.Electrical.ElectricPower,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Implicit(HAL.Units.Electrical.W)~HAL.Units.Electrical.ElectricPower">
      <summary>Implicit conversion from a value in Watts.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Implicit(HAL.Units.Electrical.ElectricPower)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricPower.op_Implicit(HAL.Units.Electrical.ElectricPower)~HAL.Units.Electrical.W">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricPower">
      <summary>Implement this class if you wish to add a(n) ElectricPower measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.W">
      <summary>Watts unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.#ctor(HAL.Units.Electrical.IElectricPower)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.W.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.W.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.W.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Implicit(System.Double)~HAL.Units.Electrical.W">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_UnaryPlus(HAL.Units.Electrical.W)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_UnaryNegation(HAL.Units.Electrical.W)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Addition(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>W addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Subtraction(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>W subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Multiply(HAL.Units.Electrical.W,System.Double)">
      <summary>W multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Division(HAL.Units.Electrical.W,System.Double)">
      <summary>W division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Equality(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Equality operator with the default ElectricPower tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_Inequality(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_GreaterThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_GreaterThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_LessThan(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.op_LessThanOrEqual(HAL.Units.Electrical.W,HAL.Units.Electrical.W)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.W.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.Add(HAL.Units.Electrical.W)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.Subtract(HAL.Units.Electrical.W)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.W.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.Equals(HAL.Units.Electrical.W)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.NotEqual(HAL.Units.Electrical.W)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.LessThan(HAL.Units.Electrical.W)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.LessThanOrEqual(HAL.Units.Electrical.W)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.GreaterThan(HAL.Units.Electrical.W)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.GreaterThanOrEqual(HAL.Units.Electrical.W)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.Equals(HAL.Units.Electrical.IElectricPower)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.W.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricResistance">
      <summary>A measurement of ElectricResistance, expressed in ohms (Ω).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricResistance.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricResistance measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricResistance.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricResistance measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricResistance.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricResistance measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.#ctor(HAL.Units.Electrical.ohm)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.#ctor(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.#ctor(HAL.Units.Electrical.ElectricResistance)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricResistance.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricResistance.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricResistance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Equal(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether values are within the default tolerance of ElectricResistance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.NotEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Equal(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.NotEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Equal(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.NotEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.LessThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GreaterThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Equals(HAL.Units.Electrical.ElectricResistance)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Equality(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ElectricResistance)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Inequality(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ElectricResistance)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Equality(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Inequality(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_GreaterThan(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_LessThan(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_LessThanOrEqual(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Addition(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Subtraction(HAL.Units.Electrical.ElectricResistance,HAL.Units.Electrical.ohm)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Multiply(HAL.Units.Electrical.ElectricResistance,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Division(HAL.Units.Electrical.ElectricResistance,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Implicit(HAL.Units.Electrical.ohm)~HAL.Units.Electrical.ElectricResistance">
      <summary>Implicit conversion from a value in Ohms.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Implicit(HAL.Units.Electrical.ElectricResistance)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistance.op_Implicit(HAL.Units.Electrical.ElectricResistance)~HAL.Units.Electrical.ohm">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricResistance">
      <summary>Implement this class if you wish to add a(n) ElectricResistance measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ohm">
      <summary>Ohms unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.#ctor(HAL.Units.Electrical.IElectricResistance)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ohm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ohm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ohm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Implicit(System.Double)~HAL.Units.Electrical.ohm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_UnaryPlus(HAL.Units.Electrical.ohm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_UnaryNegation(HAL.Units.Electrical.ohm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Addition(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>ohm addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Subtraction(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>ohm subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Multiply(HAL.Units.Electrical.ohm,System.Double)">
      <summary>ohm multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Division(HAL.Units.Electrical.ohm,System.Double)">
      <summary>ohm division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Equality(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Equality operator with the default ElectricResistance tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_Inequality(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_GreaterThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_GreaterThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_LessThan(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.op_LessThanOrEqual(HAL.Units.Electrical.ohm,HAL.Units.Electrical.ohm)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Add(HAL.Units.Electrical.ohm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Subtract(HAL.Units.Electrical.ohm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Equals(HAL.Units.Electrical.ohm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.NotEqual(HAL.Units.Electrical.ohm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.LessThan(HAL.Units.Electrical.ohm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.LessThanOrEqual(HAL.Units.Electrical.ohm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.GreaterThan(HAL.Units.Electrical.ohm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.GreaterThanOrEqual(HAL.Units.Electrical.ohm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.Equals(HAL.Units.Electrical.IElectricResistance)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricResistivity">
      <summary>A measurement of ElectricResistivity, expressed in ohms per meter (Ω/m).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricResistivity.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricResistivity measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricResistivity.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricResistivity measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricResistivity.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricResistivity measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.#ctor(HAL.Units.Electrical.ohm_m)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.#ctor(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.#ctor(HAL.Units.Electrical.ElectricResistivity)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricResistivity.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricResistivity.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricResistivity.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Equal(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether values are within the default tolerance of ElectricResistivity.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.NotEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Equal(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.NotEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Equal(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.NotEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.LessThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GreaterThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Equals(HAL.Units.Electrical.ElectricResistivity)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Equality(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ElectricResistivity)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Inequality(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ElectricResistivity)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Equality(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Inequality(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_GreaterThan(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_LessThan(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_LessThanOrEqual(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Addition(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Subtraction(HAL.Units.Electrical.ElectricResistivity,HAL.Units.Electrical.ohm_m)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Multiply(HAL.Units.Electrical.ElectricResistivity,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Division(HAL.Units.Electrical.ElectricResistivity,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Implicit(HAL.Units.Electrical.ohm_m)~HAL.Units.Electrical.ElectricResistivity">
      <summary>Implicit conversion from a value in Ohms per Meter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Implicit(HAL.Units.Electrical.ElectricResistivity)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricResistivity.op_Implicit(HAL.Units.Electrical.ElectricResistivity)~HAL.Units.Electrical.ohm_m">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricResistivity">
      <summary>Implement this class if you wish to add a(n) ElectricResistivity measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ohm_m">
      <summary>Ohms per Meter unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.#ctor(HAL.Units.Electrical.IElectricResistivity)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ohm_m.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ohm_m.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ohm_m.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Implicit(System.Double)~HAL.Units.Electrical.ohm_m">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_UnaryPlus(HAL.Units.Electrical.ohm_m)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_UnaryNegation(HAL.Units.Electrical.ohm_m)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Addition(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>ohm_m addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Subtraction(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>ohm_m subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Multiply(HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>ohm_m multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Division(HAL.Units.Electrical.ohm_m,System.Double)">
      <summary>ohm_m division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Equality(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Equality operator with the default ElectricResistivity tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_Inequality(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_GreaterThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_GreaterThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_LessThan(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.op_LessThanOrEqual(HAL.Units.Electrical.ohm_m,HAL.Units.Electrical.ohm_m)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Add(HAL.Units.Electrical.ohm_m)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Subtract(HAL.Units.Electrical.ohm_m)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Equals(HAL.Units.Electrical.ohm_m)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.NotEqual(HAL.Units.Electrical.ohm_m)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.LessThan(HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.LessThanOrEqual(HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.GreaterThan(HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.GreaterThanOrEqual(HAL.Units.Electrical.ohm_m)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.Equals(HAL.Units.Electrical.IElectricResistivity)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ohm_m.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.ElectricTension">
      <summary>A measurement of ElectricTension, expressed in volts (V).</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricTension.DefaultEpsilon">
      <summary>The default difference allowed between two ElectricTension measurements.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricTension.DefaultEpsilonSquared">
      <summary>The default difference allowed between two ElectricTension measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Electrical.ElectricTension.DefaultTolerance">
      <summary>The default tolerance allowed between two ElectricTension measurements.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.#ctor(HAL.Units.Electrical.V)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.#ctor(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.#ctor(HAL.Units.Electrical.ElectricTension)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricTension.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.ElectricTension.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of ElectricTension.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Equal(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether values are within the default tolerance of ElectricTension.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.NotEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Equal(HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.NotEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Equal(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.NotEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.LessThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GreaterThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Equals(HAL.Units.Electrical.ElectricTension)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Equality(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Inequality(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.ElectricTension)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Equality(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Inequality(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_GreaterThan(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_GreaterThanOrEqual(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_LessThan(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_LessThanOrEqual(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Addition(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Subtraction(HAL.Units.Electrical.ElectricTension,HAL.Units.Electrical.V)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Multiply(HAL.Units.Electrical.ElectricTension,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Division(HAL.Units.Electrical.ElectricTension,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Implicit(HAL.Units.Electrical.V)~HAL.Units.Electrical.ElectricTension">
      <summary>Implicit conversion from a value in Volts.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Implicit(HAL.Units.Electrical.ElectricTension)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.ElectricTension.op_Implicit(HAL.Units.Electrical.ElectricTension)~HAL.Units.Electrical.V">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Electrical.IElectricTension">
      <summary>Implement this class if you wish to add a(n) ElectricTension measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Electrical.V">
      <summary>Volts unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.#ctor(HAL.Units.Electrical.IElectricTension)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Electrical.V.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.V.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Electrical.V.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Implicit(System.Double)~HAL.Units.Electrical.V">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_UnaryPlus(HAL.Units.Electrical.V)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_UnaryNegation(HAL.Units.Electrical.V)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Addition(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>V addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Subtraction(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>V subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Multiply(HAL.Units.Electrical.V,System.Double)">
      <summary>V multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Division(HAL.Units.Electrical.V,System.Double)">
      <summary>V division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Equality(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Equality operator with the default ElectricTension tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_Inequality(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_GreaterThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_GreaterThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_LessThan(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.op_LessThanOrEqual(HAL.Units.Electrical.V,HAL.Units.Electrical.V)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Electrical.V.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.Add(HAL.Units.Electrical.V)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.Subtract(HAL.Units.Electrical.V)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Electrical.V.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.Equals(HAL.Units.Electrical.V)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.NotEqual(HAL.Units.Electrical.V)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.LessThan(HAL.Units.Electrical.V)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.LessThanOrEqual(HAL.Units.Electrical.V)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.GreaterThan(HAL.Units.Electrical.V)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.GreaterThanOrEqual(HAL.Units.Electrical.V)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.Equals(HAL.Units.Electrical.IElectricTension)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Electrical.V.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Energy.Energy">
      <summary>A measurement of Energy, expressed in joules (J).</summary>
    </member>
    <member name="F:HAL.Units.Energy.Energy.DefaultEpsilon">
      <summary>The default difference allowed between two Energy measurements.</summary>
    </member>
    <member name="F:HAL.Units.Energy.Energy.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Energy measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Energy.Energy.DefaultTolerance">
      <summary>The default tolerance allowed between two Energy measurements.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.#ctor(HAL.Units.Energy.J)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.#ctor(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.#ctor(HAL.Units.Energy.Energy)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Energy.Energy.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Energy.Energy.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Energy.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Equal(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether values are within the default tolerance of Energy.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.NotEqual(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThan(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThan(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Equal(HAL.Units.Energy.J,HAL.Units.Energy.J,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.NotEqual(HAL.Units.Energy.J,HAL.Units.Energy.J,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThan(HAL.Units.Energy.J,HAL.Units.Energy.J,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThan(HAL.Units.Energy.J,HAL.Units.Energy.J,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Equal(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.NotEqual(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThan(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.LessThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThan(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GreaterThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Equals(HAL.Units.Energy.Energy)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Equality(HAL.Units.Energy.Energy,HAL.Units.Energy.Energy)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Inequality(HAL.Units.Energy.Energy,HAL.Units.Energy.Energy)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Equality(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Inequality(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_GreaterThan(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_GreaterThanOrEqual(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_LessThan(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_LessThanOrEqual(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Addition(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Subtraction(HAL.Units.Energy.Energy,HAL.Units.Energy.J)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Multiply(HAL.Units.Energy.Energy,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Division(HAL.Units.Energy.Energy,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Implicit(HAL.Units.Energy.J)~HAL.Units.Energy.Energy">
      <summary>Implicit conversion from a value in Joules.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Implicit(HAL.Units.Energy.Energy)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Energy.Energy.op_Implicit(HAL.Units.Energy.Energy)~HAL.Units.Energy.J">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Energy.IEnergy">
      <summary>Implement this class if you wish to add a(n) Energy measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Energy.J">
      <summary>Joules unit.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.#ctor(HAL.Units.Energy.IEnergy)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Energy.J.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Energy.J.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Energy.J.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Implicit(System.Double)~HAL.Units.Energy.J">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_UnaryPlus(HAL.Units.Energy.J)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.op_UnaryNegation(HAL.Units.Energy.J)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Addition(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>J addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Subtraction(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>J subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Multiply(HAL.Units.Energy.J,System.Double)">
      <summary>J multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Division(HAL.Units.Energy.J,System.Double)">
      <summary>J division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Equality(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Equality operator with the default Energy tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_Inequality(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_GreaterThan(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_GreaterThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_LessThan(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.op_LessThanOrEqual(HAL.Units.Energy.J,HAL.Units.Energy.J)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Energy.J.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.Add(HAL.Units.Energy.J)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.Subtract(HAL.Units.Energy.J)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Energy.J.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.Equals(HAL.Units.Energy.J)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.NotEqual(HAL.Units.Energy.J)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.LessThan(HAL.Units.Energy.J)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.LessThanOrEqual(HAL.Units.Energy.J)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.GreaterThan(HAL.Units.Energy.J)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.GreaterThanOrEqual(HAL.Units.Energy.J)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.Equals(HAL.Units.Energy.IEnergy)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Energy.J.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Force.Force">
      <summary>A measurement of Force, expressed in newtons (N).</summary>
    </member>
    <member name="F:HAL.Units.Force.Force.DefaultEpsilon">
      <summary>The default difference allowed between two Force measurements.</summary>
    </member>
    <member name="F:HAL.Units.Force.Force.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Force measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Force.Force.DefaultTolerance">
      <summary>The default tolerance allowed between two Force measurements.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.#ctor(HAL.Units.Force.N)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.#ctor(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.#ctor(HAL.Units.Force.Force)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Force.Force.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Force.Force.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Force.Force.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Force.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.Equal(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether values are within the default tolerance of Force.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.NotEqual(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThan(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThan(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.Equal(HAL.Units.Force.N,HAL.Units.Force.N,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.NotEqual(HAL.Units.Force.N,HAL.Units.Force.N,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThan(HAL.Units.Force.N,HAL.Units.Force.N,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThan(HAL.Units.Force.N,HAL.Units.Force.N,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.Equal(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.NotEqual(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThan(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.LessThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThan(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.GreaterThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Force.Force.Equals(HAL.Units.Force.Force)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Equality(HAL.Units.Force.Force,HAL.Units.Force.Force)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Inequality(HAL.Units.Force.Force,HAL.Units.Force.Force)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Equality(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Inequality(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_GreaterThan(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_GreaterThanOrEqual(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_LessThan(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_LessThanOrEqual(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Addition(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Subtraction(HAL.Units.Force.Force,HAL.Units.Force.N)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Multiply(HAL.Units.Force.Force,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Division(HAL.Units.Force.Force,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Implicit(HAL.Units.Force.N)~HAL.Units.Force.Force">
      <summary>Implicit conversion from a value in Newtons.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Implicit(HAL.Units.Force.kgm_s2)~HAL.Units.Force.Force">
      <summary>Implicit conversion from a value in Kilogram Meters per Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Implicit(HAL.Units.Force.Force)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Force.Force.op_Implicit(HAL.Units.Force.Force)~HAL.Units.Force.N">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Force.IForce">
      <summary>Implement this class if you wish to add a(n) Force measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Force.N">
      <summary>Newtons unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Force.N.#ctor(HAL.Units.Force.IForce)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Force.N.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Force.N.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Force.N.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.op_Implicit(System.Double)~HAL.Units.Force.N">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_Explicit(HAL.Units.Force.N)~HAL.Units.Force.kgm_s2">
      <summary>Implicit conversion to kgm_s2.</summary>
      <param name="measurement">Measurement in the current unit to convert to kgm_s2.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_UnaryPlus(HAL.Units.Force.N)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.op_UnaryNegation(HAL.Units.Force.N)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.op_Addition(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>N addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_Subtraction(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>N subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_Multiply(HAL.Units.Force.N,System.Double)">
      <summary>N multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_Division(HAL.Units.Force.N,System.Double)">
      <summary>N division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Force.N.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.op_Equality(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Equality operator with the default Force tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_Inequality(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_GreaterThan(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_GreaterThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_LessThan(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.op_LessThanOrEqual(HAL.Units.Force.N,HAL.Units.Force.N)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Force.N.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.Add(HAL.Units.Force.N)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.Subtract(HAL.Units.Force.N)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.N.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.Equals(HAL.Units.Force.N)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.NotEqual(HAL.Units.Force.N)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.LessThan(HAL.Units.Force.N)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.LessThanOrEqual(HAL.Units.Force.N)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.GreaterThan(HAL.Units.Force.N)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.GreaterThanOrEqual(HAL.Units.Force.N)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.Equals(HAL.Units.Force.IForce)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.N.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Force.kgm_s2">
      <summary>Kilogram Meters per Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.#ctor(HAL.Units.Force.IForce)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Force.kgm_s2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Force.kgm_s2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Force.kgm_s2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.op_Implicit(System.Double)~HAL.Units.Force.kgm_s2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.op_Explicit(HAL.Units.Force.kgm_s2)~HAL.Units.Force.N">
      <summary>Implicit conversion to N.</summary>
      <param name="measurement">Measurement in the current unit to convert to N.</param>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.op_UnaryPlus(HAL.Units.Force.kgm_s2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.op_UnaryNegation(HAL.Units.Force.kgm_s2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Add(HAL.Units.Force.kgm_s2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Subtract(HAL.Units.Force.kgm_s2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Equals(HAL.Units.Force.kgm_s2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.NotEqual(HAL.Units.Force.kgm_s2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.LessThan(HAL.Units.Force.kgm_s2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.LessThanOrEqual(HAL.Units.Force.kgm_s2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.GreaterThan(HAL.Units.Force.kgm_s2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.GreaterThanOrEqual(HAL.Units.Force.kgm_s2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.Equals(HAL.Units.Force.IForce)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Force.kgm_s2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Frequency.Frequency">
      <summary>A measurement of Frequency, expressed in hertz (Hz).</summary>
    </member>
    <member name="F:HAL.Units.Frequency.Frequency.DefaultEpsilon">
      <summary>The default difference allowed between two Frequency measurements.</summary>
    </member>
    <member name="F:HAL.Units.Frequency.Frequency.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Frequency measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Frequency.Frequency.DefaultTolerance">
      <summary>The default tolerance allowed between two Frequency measurements.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.#ctor(HAL.Units.Frequency.Hz)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.#ctor(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.#ctor(HAL.Units.Frequency.Frequency)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Frequency.Frequency.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Frequency.Frequency.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Frequency.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Equal(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether values are within the default tolerance of Frequency.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.NotEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Equal(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.NotEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Equal(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.NotEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.LessThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GreaterThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Equals(HAL.Units.Frequency.Frequency)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Equality(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Frequency)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Inequality(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Frequency)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Equality(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Inequality(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_GreaterThan(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_GreaterThanOrEqual(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_LessThan(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_LessThanOrEqual(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Addition(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Subtraction(HAL.Units.Frequency.Frequency,HAL.Units.Frequency.Hz)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Multiply(HAL.Units.Frequency.Frequency,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Division(HAL.Units.Frequency.Frequency,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Implicit(HAL.Units.Frequency.Hz)~HAL.Units.Frequency.Frequency">
      <summary>Implicit conversion from a value in Hertz.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Implicit(HAL.Units.Frequency.Frequency)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Frequency.op_Implicit(HAL.Units.Frequency.Frequency)~HAL.Units.Frequency.Hz">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Frequency.IFrequency">
      <summary>Implement this class if you wish to add a(n) Frequency measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Frequency.Hz">
      <summary>Hertz unit.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.#ctor(HAL.Units.Frequency.IFrequency)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Frequency.Hz.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Frequency.Hz.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Frequency.Hz.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Implicit(System.Double)~HAL.Units.Frequency.Hz">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_UnaryPlus(HAL.Units.Frequency.Hz)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_UnaryNegation(HAL.Units.Frequency.Hz)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Addition(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Hz addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Subtraction(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Hz subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Multiply(HAL.Units.Frequency.Hz,System.Double)">
      <summary>Hz multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Division(HAL.Units.Frequency.Hz,System.Double)">
      <summary>Hz division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Equality(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Equality operator with the default Frequency tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_Inequality(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_GreaterThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_GreaterThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_LessThan(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.op_LessThanOrEqual(HAL.Units.Frequency.Hz,HAL.Units.Frequency.Hz)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Add(HAL.Units.Frequency.Hz)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Subtract(HAL.Units.Frequency.Hz)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Equals(HAL.Units.Frequency.Hz)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.NotEqual(HAL.Units.Frequency.Hz)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.LessThan(HAL.Units.Frequency.Hz)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.LessThanOrEqual(HAL.Units.Frequency.Hz)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.GreaterThan(HAL.Units.Frequency.Hz)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.GreaterThanOrEqual(HAL.Units.Frequency.Hz)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.Equals(HAL.Units.Frequency.IFrequency)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Frequency.Hz.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.Length">
      <summary>A measurement of Length, expressed in meters (m).</summary>
    </member>
    <member name="F:HAL.Units.Length.Length.DefaultEpsilon">
      <summary>The default difference allowed between two Length measurements.</summary>
    </member>
    <member name="F:HAL.Units.Length.Length.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Length measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Length.Length.DefaultTolerance">
      <summary>The default tolerance allowed between two Length measurements.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.#ctor(HAL.Units.Length.m)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.#ctor(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.#ctor(HAL.Units.Length.Length)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Length.Length.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Length.Length.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.Length.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Length.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.Equal(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether values are within the default tolerance of Length.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.NotEqual(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThan(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThan(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.Equal(HAL.Units.Length.m,HAL.Units.Length.m,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.NotEqual(HAL.Units.Length.m,HAL.Units.Length.m,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThan(HAL.Units.Length.m,HAL.Units.Length.m,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThan(HAL.Units.Length.m,HAL.Units.Length.m,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.Equal(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.NotEqual(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThan(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.LessThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThan(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.GreaterThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Length.Length.Equals(HAL.Units.Length.Length)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Equality(HAL.Units.Length.Length,HAL.Units.Length.Length)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Inequality(HAL.Units.Length.Length,HAL.Units.Length.Length)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Equality(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Inequality(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_GreaterThan(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_GreaterThanOrEqual(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_LessThan(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_LessThanOrEqual(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Addition(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Subtraction(HAL.Units.Length.Length,HAL.Units.Length.m)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Multiply(HAL.Units.Length.Length,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Division(HAL.Units.Length.Length,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.nm)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Nanometers.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.um)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Micrometers.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.mm)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Millimeters.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.cm)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Centimeters.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.dm)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Decimeters.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.m)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Meters.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.dam)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Decameters.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.hm)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Hectometers.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.km)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Kilometers.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.th)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Thous.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.inch)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Inches.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.ft)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Feet.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.yd)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Yards.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.mi)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Miles.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.nmi)~HAL.Units.Length.Length">
      <summary>Implicit conversion from a value in Nautical Miles.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.Length)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.Length.op_Implicit(HAL.Units.Length.Length)~HAL.Units.Length.m">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Length.ILength">
      <summary>Implement this class if you wish to add a(n) Length measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Length.nm">
      <summary>Nanometers unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.nm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.nm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.nm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Implicit(System.Double)~HAL.Units.Length.nm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_Explicit(HAL.Units.Length.nm)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.nm.op_UnaryPlus(HAL.Units.Length.nm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.op_UnaryNegation(HAL.Units.Length.nm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.Add(HAL.Units.Length.nm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.Subtract(HAL.Units.Length.nm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.Equals(HAL.Units.Length.nm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.NotEqual(HAL.Units.Length.nm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.LessThan(HAL.Units.Length.nm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.LessThanOrEqual(HAL.Units.Length.nm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.GreaterThan(HAL.Units.Length.nm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.GreaterThanOrEqual(HAL.Units.Length.nm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.um">
      <summary>Micrometers unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.um.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.um.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.um.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.um.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.op_Implicit(System.Double)~HAL.Units.Length.um">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_Explicit(HAL.Units.Length.um)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.um.op_UnaryPlus(HAL.Units.Length.um)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.op_UnaryNegation(HAL.Units.Length.um)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.Add(HAL.Units.Length.um)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.Subtract(HAL.Units.Length.um)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.um.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.Equals(HAL.Units.Length.um)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.NotEqual(HAL.Units.Length.um)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.LessThan(HAL.Units.Length.um)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.LessThanOrEqual(HAL.Units.Length.um)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.GreaterThan(HAL.Units.Length.um)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.GreaterThanOrEqual(HAL.Units.Length.um)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.um.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.mm">
      <summary>Millimeters unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.mm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.mm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.mm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Implicit(System.Double)~HAL.Units.Length.mm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_Explicit(HAL.Units.Length.mm)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.mm.op_UnaryPlus(HAL.Units.Length.mm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.op_UnaryNegation(HAL.Units.Length.mm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.Add(HAL.Units.Length.mm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.Subtract(HAL.Units.Length.mm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.Equals(HAL.Units.Length.mm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.NotEqual(HAL.Units.Length.mm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.LessThan(HAL.Units.Length.mm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.LessThanOrEqual(HAL.Units.Length.mm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.GreaterThan(HAL.Units.Length.mm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.GreaterThanOrEqual(HAL.Units.Length.mm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.cm">
      <summary>Centimeters unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.cm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.cm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.cm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Implicit(System.Double)~HAL.Units.Length.cm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_Explicit(HAL.Units.Length.cm)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.cm.op_UnaryPlus(HAL.Units.Length.cm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.op_UnaryNegation(HAL.Units.Length.cm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.Add(HAL.Units.Length.cm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.Subtract(HAL.Units.Length.cm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.cm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.Equals(HAL.Units.Length.cm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.NotEqual(HAL.Units.Length.cm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.LessThan(HAL.Units.Length.cm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.LessThanOrEqual(HAL.Units.Length.cm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.GreaterThan(HAL.Units.Length.cm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.GreaterThanOrEqual(HAL.Units.Length.cm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.cm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.dm">
      <summary>Decimeters unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.dm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.dm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.dm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Implicit(System.Double)~HAL.Units.Length.dm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_Explicit(HAL.Units.Length.dm)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.dm.op_UnaryPlus(HAL.Units.Length.dm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.op_UnaryNegation(HAL.Units.Length.dm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.Add(HAL.Units.Length.dm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.Subtract(HAL.Units.Length.dm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.Equals(HAL.Units.Length.dm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.NotEqual(HAL.Units.Length.dm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.LessThan(HAL.Units.Length.dm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.LessThanOrEqual(HAL.Units.Length.dm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.GreaterThan(HAL.Units.Length.dm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.GreaterThanOrEqual(HAL.Units.Length.dm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.m">
      <summary>Meters unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.m.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.m.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.m.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.m.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.op_Implicit(System.Double)~HAL.Units.Length.m">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Explicit(HAL.Units.Length.m)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_UnaryPlus(HAL.Units.Length.m)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.op_UnaryNegation(HAL.Units.Length.m)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.op_Addition(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>m addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Subtraction(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>m subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Multiply(HAL.Units.Length.m,System.Double)">
      <summary>m multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Division(HAL.Units.Length.m,System.Double)">
      <summary>m division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Length.m.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.op_Equality(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Equality operator with the default Length tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_Inequality(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_GreaterThan(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_GreaterThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_LessThan(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.op_LessThanOrEqual(HAL.Units.Length.m,HAL.Units.Length.m)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Length.m.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.Add(HAL.Units.Length.m)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.Subtract(HAL.Units.Length.m)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.m.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.Equals(HAL.Units.Length.m)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.NotEqual(HAL.Units.Length.m)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.LessThan(HAL.Units.Length.m)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.LessThanOrEqual(HAL.Units.Length.m)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.GreaterThan(HAL.Units.Length.m)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.GreaterThanOrEqual(HAL.Units.Length.m)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.m.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.dam">
      <summary>Decameters unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.dam.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.dam.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.dam.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Implicit(System.Double)~HAL.Units.Length.dam">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_Explicit(HAL.Units.Length.dam)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.dam.op_UnaryPlus(HAL.Units.Length.dam)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.op_UnaryNegation(HAL.Units.Length.dam)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.Add(HAL.Units.Length.dam)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.Subtract(HAL.Units.Length.dam)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.dam.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.Equals(HAL.Units.Length.dam)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.NotEqual(HAL.Units.Length.dam)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.LessThan(HAL.Units.Length.dam)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.LessThanOrEqual(HAL.Units.Length.dam)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.GreaterThan(HAL.Units.Length.dam)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.GreaterThanOrEqual(HAL.Units.Length.dam)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.dam.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.hm">
      <summary>Hectometers unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.hm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.hm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.hm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Implicit(System.Double)~HAL.Units.Length.hm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_Explicit(HAL.Units.Length.hm)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.hm.op_UnaryPlus(HAL.Units.Length.hm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.op_UnaryNegation(HAL.Units.Length.hm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.Add(HAL.Units.Length.hm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.Subtract(HAL.Units.Length.hm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.hm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.Equals(HAL.Units.Length.hm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.NotEqual(HAL.Units.Length.hm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.LessThan(HAL.Units.Length.hm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.LessThanOrEqual(HAL.Units.Length.hm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.GreaterThan(HAL.Units.Length.hm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.GreaterThanOrEqual(HAL.Units.Length.hm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.hm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.km">
      <summary>Kilometers unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.km.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.km.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.km.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.km.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.op_Implicit(System.Double)~HAL.Units.Length.km">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_Explicit(HAL.Units.Length.km)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.km.op_UnaryPlus(HAL.Units.Length.km)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.op_UnaryNegation(HAL.Units.Length.km)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.Add(HAL.Units.Length.km)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.Subtract(HAL.Units.Length.km)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.km.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.Equals(HAL.Units.Length.km)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.NotEqual(HAL.Units.Length.km)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.LessThan(HAL.Units.Length.km)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.LessThanOrEqual(HAL.Units.Length.km)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.GreaterThan(HAL.Units.Length.km)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.GreaterThanOrEqual(HAL.Units.Length.km)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.km.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.th">
      <summary>Thous unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.th.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.th.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.th.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.th.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.op_Implicit(System.Double)~HAL.Units.Length.th">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_Explicit(HAL.Units.Length.th)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.th.op_UnaryPlus(HAL.Units.Length.th)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.op_UnaryNegation(HAL.Units.Length.th)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.Add(HAL.Units.Length.th)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.Subtract(HAL.Units.Length.th)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.th.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.Equals(HAL.Units.Length.th)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.NotEqual(HAL.Units.Length.th)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.LessThan(HAL.Units.Length.th)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.LessThanOrEqual(HAL.Units.Length.th)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.GreaterThan(HAL.Units.Length.th)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.GreaterThanOrEqual(HAL.Units.Length.th)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.th.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.inch">
      <summary>Inches unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.inch.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.inch.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.inch.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Implicit(System.Double)~HAL.Units.Length.inch">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_Explicit(HAL.Units.Length.inch)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.inch.op_UnaryPlus(HAL.Units.Length.inch)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.op_UnaryNegation(HAL.Units.Length.inch)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.Add(HAL.Units.Length.inch)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.Subtract(HAL.Units.Length.inch)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.inch.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.Equals(HAL.Units.Length.inch)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.NotEqual(HAL.Units.Length.inch)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.LessThan(HAL.Units.Length.inch)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.LessThanOrEqual(HAL.Units.Length.inch)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.GreaterThan(HAL.Units.Length.inch)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.GreaterThanOrEqual(HAL.Units.Length.inch)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.inch.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.ft">
      <summary>Feet unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.ft.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.ft.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.ft.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Implicit(System.Double)~HAL.Units.Length.ft">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_Explicit(HAL.Units.Length.ft)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.ft.op_UnaryPlus(HAL.Units.Length.ft)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.op_UnaryNegation(HAL.Units.Length.ft)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.Add(HAL.Units.Length.ft)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.Subtract(HAL.Units.Length.ft)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.ft.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.Equals(HAL.Units.Length.ft)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.NotEqual(HAL.Units.Length.ft)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.LessThan(HAL.Units.Length.ft)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.LessThanOrEqual(HAL.Units.Length.ft)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.GreaterThan(HAL.Units.Length.ft)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.GreaterThanOrEqual(HAL.Units.Length.ft)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.ft.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.yd">
      <summary>Yards unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.yd.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.yd.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.yd.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Implicit(System.Double)~HAL.Units.Length.yd">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_Explicit(HAL.Units.Length.yd)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.yd.op_UnaryPlus(HAL.Units.Length.yd)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.op_UnaryNegation(HAL.Units.Length.yd)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.Add(HAL.Units.Length.yd)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.Subtract(HAL.Units.Length.yd)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.yd.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.Equals(HAL.Units.Length.yd)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.NotEqual(HAL.Units.Length.yd)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.LessThan(HAL.Units.Length.yd)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.LessThanOrEqual(HAL.Units.Length.yd)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.GreaterThan(HAL.Units.Length.yd)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.GreaterThanOrEqual(HAL.Units.Length.yd)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.yd.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.mi">
      <summary>Miles unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.mi.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.mi.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.mi.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Implicit(System.Double)~HAL.Units.Length.mi">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_Explicit(HAL.Units.Length.mi)~HAL.Units.Length.nmi">
      <summary>Implicit conversion to nmi.</summary>
      <param name="measurement">Measurement in the current unit to convert to nmi.</param>
    </member>
    <member name="M:HAL.Units.Length.mi.op_UnaryPlus(HAL.Units.Length.mi)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.op_UnaryNegation(HAL.Units.Length.mi)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.Add(HAL.Units.Length.mi)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.Subtract(HAL.Units.Length.mi)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.mi.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.Equals(HAL.Units.Length.mi)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.NotEqual(HAL.Units.Length.mi)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.LessThan(HAL.Units.Length.mi)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.LessThanOrEqual(HAL.Units.Length.mi)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.GreaterThan(HAL.Units.Length.mi)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.GreaterThanOrEqual(HAL.Units.Length.mi)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.mi.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Length.nmi">
      <summary>Nautical Miles unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.#ctor(HAL.Units.Length.ILength)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Length.nmi.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.nmi.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Length.nmi.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Implicit(System.Double)~HAL.Units.Length.nmi">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.nm">
      <summary>Implicit conversion to nm.</summary>
      <param name="measurement">Measurement in the current unit to convert to nm.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.um">
      <summary>Implicit conversion to um.</summary>
      <param name="measurement">Measurement in the current unit to convert to um.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.mm">
      <summary>Implicit conversion to mm.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.cm">
      <summary>Implicit conversion to cm.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.dm">
      <summary>Implicit conversion to dm.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.m">
      <summary>Implicit conversion to m.</summary>
      <param name="measurement">Measurement in the current unit to convert to m.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.dam">
      <summary>Implicit conversion to dam.</summary>
      <param name="measurement">Measurement in the current unit to convert to dam.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.hm">
      <summary>Implicit conversion to hm.</summary>
      <param name="measurement">Measurement in the current unit to convert to hm.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.km">
      <summary>Implicit conversion to km.</summary>
      <param name="measurement">Measurement in the current unit to convert to km.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.th">
      <summary>Implicit conversion to th.</summary>
      <param name="measurement">Measurement in the current unit to convert to th.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.inch">
      <summary>Implicit conversion to inch.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.ft">
      <summary>Implicit conversion to ft.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.yd">
      <summary>Implicit conversion to yd.</summary>
      <param name="measurement">Measurement in the current unit to convert to yd.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_Explicit(HAL.Units.Length.nmi)~HAL.Units.Length.mi">
      <summary>Implicit conversion to mi.</summary>
      <param name="measurement">Measurement in the current unit to convert to mi.</param>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_UnaryPlus(HAL.Units.Length.nmi)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.op_UnaryNegation(HAL.Units.Length.nmi)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.Add(HAL.Units.Length.nmi)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.Subtract(HAL.Units.Length.nmi)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Length.nmi.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.Equals(HAL.Units.Length.nmi)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.NotEqual(HAL.Units.Length.nmi)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.LessThan(HAL.Units.Length.nmi)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.LessThanOrEqual(HAL.Units.Length.nmi)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.GreaterThan(HAL.Units.Length.nmi)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.GreaterThanOrEqual(HAL.Units.Length.nmi)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.Equals(HAL.Units.Length.ILength)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Length.nmi.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Mass.Mass">
      <summary>A measurement of Mass, expressed in kilograms (kg).</summary>
    </member>
    <member name="F:HAL.Units.Mass.Mass.DefaultEpsilon">
      <summary>The default difference allowed between two Mass measurements.</summary>
    </member>
    <member name="F:HAL.Units.Mass.Mass.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Mass measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Mass.Mass.DefaultTolerance">
      <summary>The default tolerance allowed between two Mass measurements.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.#ctor(HAL.Units.Mass.kg)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.#ctor(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.#ctor(HAL.Units.Mass.Mass)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Mass.Mass.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Mass.Mass.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Mass.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Equal(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether values are within the default tolerance of Mass.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.NotEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Equal(HAL.Units.Mass.kg,HAL.Units.Mass.kg,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.NotEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Equal(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.NotEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.LessThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GreaterThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Equals(HAL.Units.Mass.Mass)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Equality(HAL.Units.Mass.Mass,HAL.Units.Mass.Mass)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Inequality(HAL.Units.Mass.Mass,HAL.Units.Mass.Mass)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Equality(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Inequality(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_GreaterThan(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_GreaterThanOrEqual(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_LessThan(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_LessThanOrEqual(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Addition(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Subtraction(HAL.Units.Mass.Mass,HAL.Units.Mass.kg)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Multiply(HAL.Units.Mass.Mass,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Division(HAL.Units.Mass.Mass,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Implicit(HAL.Units.Mass.kg)~HAL.Units.Mass.Mass">
      <summary>Implicit conversion from a value in Kilograms.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Implicit(HAL.Units.Mass.g)~HAL.Units.Mass.Mass">
      <summary>Implicit conversion from a value in Grams.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Implicit(HAL.Units.Mass.mg)~HAL.Units.Mass.Mass">
      <summary>Implicit conversion from a value in Milligrams.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Implicit(HAL.Units.Mass.Mass)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Mass.Mass.op_Implicit(HAL.Units.Mass.Mass)~HAL.Units.Mass.kg">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Mass.IMass">
      <summary>Implement this class if you wish to add a(n) Mass measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Mass.kg">
      <summary>Kilograms unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.#ctor(HAL.Units.Mass.IMass)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Mass.kg.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Mass.kg.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Mass.kg.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Implicit(System.Double)~HAL.Units.Mass.kg">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Explicit(HAL.Units.Mass.kg)~HAL.Units.Mass.g">
      <summary>Implicit conversion to g.</summary>
      <param name="measurement">Measurement in the current unit to convert to g.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Explicit(HAL.Units.Mass.kg)~HAL.Units.Mass.mg">
      <summary>Implicit conversion to mg.</summary>
      <param name="measurement">Measurement in the current unit to convert to mg.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_UnaryPlus(HAL.Units.Mass.kg)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_UnaryNegation(HAL.Units.Mass.kg)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Addition(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>kg addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Subtraction(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>kg subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Multiply(HAL.Units.Mass.kg,System.Double)">
      <summary>kg multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Division(HAL.Units.Mass.kg,System.Double)">
      <summary>kg division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Equality(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Equality operator with the default Mass tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_Inequality(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_GreaterThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_GreaterThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_LessThan(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.op_LessThanOrEqual(HAL.Units.Mass.kg,HAL.Units.Mass.kg)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Mass.kg.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.Add(HAL.Units.Mass.kg)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.Subtract(HAL.Units.Mass.kg)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.kg.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.Equals(HAL.Units.Mass.kg)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.NotEqual(HAL.Units.Mass.kg)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.LessThan(HAL.Units.Mass.kg)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.LessThanOrEqual(HAL.Units.Mass.kg)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.GreaterThan(HAL.Units.Mass.kg)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.GreaterThanOrEqual(HAL.Units.Mass.kg)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.Equals(HAL.Units.Mass.IMass)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.kg.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Mass.g">
      <summary>Grams unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Mass.g.#ctor(HAL.Units.Mass.IMass)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Mass.g.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Mass.g.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Mass.g.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.op_Implicit(System.Double)~HAL.Units.Mass.g">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Mass.g.op_Explicit(HAL.Units.Mass.g)~HAL.Units.Mass.kg">
      <summary>Implicit conversion to kg.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg.</param>
    </member>
    <member name="M:HAL.Units.Mass.g.op_Explicit(HAL.Units.Mass.g)~HAL.Units.Mass.mg">
      <summary>Implicit conversion to mg.</summary>
      <param name="measurement">Measurement in the current unit to convert to mg.</param>
    </member>
    <member name="M:HAL.Units.Mass.g.op_UnaryPlus(HAL.Units.Mass.g)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.op_UnaryNegation(HAL.Units.Mass.g)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.Add(HAL.Units.Mass.g)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.Subtract(HAL.Units.Mass.g)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.g.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.Equals(HAL.Units.Mass.g)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.NotEqual(HAL.Units.Mass.g)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.LessThan(HAL.Units.Mass.g)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.LessThanOrEqual(HAL.Units.Mass.g)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.GreaterThan(HAL.Units.Mass.g)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.GreaterThanOrEqual(HAL.Units.Mass.g)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.Equals(HAL.Units.Mass.IMass)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.g.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Mass.mg">
      <summary>Milligrams unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Mass.mg.#ctor(HAL.Units.Mass.IMass)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Mass.mg.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Mass.mg.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Mass.mg.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.op_Implicit(System.Double)~HAL.Units.Mass.mg">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Mass.mg.op_Explicit(HAL.Units.Mass.mg)~HAL.Units.Mass.kg">
      <summary>Implicit conversion to kg.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg.</param>
    </member>
    <member name="M:HAL.Units.Mass.mg.op_Explicit(HAL.Units.Mass.mg)~HAL.Units.Mass.g">
      <summary>Implicit conversion to g.</summary>
      <param name="measurement">Measurement in the current unit to convert to g.</param>
    </member>
    <member name="M:HAL.Units.Mass.mg.op_UnaryPlus(HAL.Units.Mass.mg)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.op_UnaryNegation(HAL.Units.Mass.mg)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.Add(HAL.Units.Mass.mg)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.Subtract(HAL.Units.Mass.mg)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Mass.mg.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.Equals(HAL.Units.Mass.mg)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.NotEqual(HAL.Units.Mass.mg)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.LessThan(HAL.Units.Mass.mg)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.LessThanOrEqual(HAL.Units.Mass.mg)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.GreaterThan(HAL.Units.Mass.mg)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.GreaterThanOrEqual(HAL.Units.Mass.mg)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.Equals(HAL.Units.Mass.IMass)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Mass.mg.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.Pressure">
      <summary>A measurement of Pressure, expressed in pascals (Pa).</summary>
    </member>
    <member name="F:HAL.Units.Pressure.Pressure.DefaultEpsilon">
      <summary>The default difference allowed between two Pressure measurements.</summary>
    </member>
    <member name="F:HAL.Units.Pressure.Pressure.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Pressure measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Pressure.Pressure.DefaultTolerance">
      <summary>The default tolerance allowed between two Pressure measurements.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.#ctor(HAL.Units.Pressure.Pa)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.#ctor(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.#ctor(HAL.Units.Pressure.Pressure)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Pressure.Pressure.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.Pressure.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Pressure.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Equal(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether values are within the default tolerance of Pressure.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.NotEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Equal(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.NotEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Equal(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.NotEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.LessThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GreaterThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Equals(HAL.Units.Pressure.Pressure)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Equality(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pressure)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Inequality(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pressure)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Equality(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Inequality(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_GreaterThan(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_GreaterThanOrEqual(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_LessThan(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_LessThanOrEqual(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Addition(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Subtraction(HAL.Units.Pressure.Pressure,HAL.Units.Pressure.Pa)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Multiply(HAL.Units.Pressure.Pressure,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Division(HAL.Units.Pressure.Pressure,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.Pa)~HAL.Units.Pressure.Pressure">
      <summary>Implicit conversion from a value in Pascals.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.kg_ms2)~HAL.Units.Pressure.Pressure">
      <summary>Implicit conversion from a value in Kilograms per Meter Second Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.N_m2)~HAL.Units.Pressure.Pressure">
      <summary>Implicit conversion from a value in Newtons per Meter Squared.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.psi)~HAL.Units.Pressure.Pressure">
      <summary>Implicit conversion from a value in Pounds per Square Inch.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.bar)~HAL.Units.Pressure.Pressure">
      <summary>Implicit conversion from a value in Bars.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.MPa)~HAL.Units.Pressure.Pressure">
      <summary>Implicit conversion from a value in Megapascals.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.Pressure)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pressure.op_Implicit(HAL.Units.Pressure.Pressure)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Pressure.IPressure">
      <summary>Implement this class if you wish to add a(n) Pressure measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.Pa">
      <summary>Pascals unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.#ctor(HAL.Units.Pressure.IPressure)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Pressure.Pa.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.Pa.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.Pa.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Implicit(System.Double)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Explicit(HAL.Units.Pressure.Pa)~HAL.Units.Pressure.kg_ms2">
      <summary>Implicit conversion to kg_ms2.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_ms2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Explicit(HAL.Units.Pressure.Pa)~HAL.Units.Pressure.N_m2">
      <summary>Implicit conversion to N_m2.</summary>
      <param name="measurement">Measurement in the current unit to convert to N_m2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Explicit(HAL.Units.Pressure.Pa)~HAL.Units.Pressure.psi">
      <summary>Implicit conversion to psi.</summary>
      <param name="measurement">Measurement in the current unit to convert to psi.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Explicit(HAL.Units.Pressure.Pa)~HAL.Units.Pressure.bar">
      <summary>Implicit conversion to bar.</summary>
      <param name="measurement">Measurement in the current unit to convert to bar.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Explicit(HAL.Units.Pressure.Pa)~HAL.Units.Pressure.MPa">
      <summary>Implicit conversion to MPa.</summary>
      <param name="measurement">Measurement in the current unit to convert to MPa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_UnaryPlus(HAL.Units.Pressure.Pa)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_UnaryNegation(HAL.Units.Pressure.Pa)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Addition(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Pa addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Subtraction(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Pa subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Multiply(HAL.Units.Pressure.Pa,System.Double)">
      <summary>Pa multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Division(HAL.Units.Pressure.Pa,System.Double)">
      <summary>Pa division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Equality(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Equality operator with the default Pressure tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_Inequality(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_GreaterThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_GreaterThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_LessThan(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.op_LessThanOrEqual(HAL.Units.Pressure.Pa,HAL.Units.Pressure.Pa)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Add(HAL.Units.Pressure.Pa)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Subtract(HAL.Units.Pressure.Pa)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Equals(HAL.Units.Pressure.Pa)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.NotEqual(HAL.Units.Pressure.Pa)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.LessThan(HAL.Units.Pressure.Pa)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.LessThanOrEqual(HAL.Units.Pressure.Pa)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.GreaterThan(HAL.Units.Pressure.Pa)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.GreaterThanOrEqual(HAL.Units.Pressure.Pa)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.Equals(HAL.Units.Pressure.IPressure)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.Pa.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.kg_ms2">
      <summary>Kilograms per Meter Second Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.#ctor(HAL.Units.Pressure.IPressure)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Pressure.kg_ms2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.kg_ms2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.kg_ms2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_Implicit(System.Double)~HAL.Units.Pressure.kg_ms2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_Explicit(HAL.Units.Pressure.kg_ms2)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion to Pa.</summary>
      <param name="measurement">Measurement in the current unit to convert to Pa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_Explicit(HAL.Units.Pressure.kg_ms2)~HAL.Units.Pressure.N_m2">
      <summary>Implicit conversion to N_m2.</summary>
      <param name="measurement">Measurement in the current unit to convert to N_m2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_Explicit(HAL.Units.Pressure.kg_ms2)~HAL.Units.Pressure.psi">
      <summary>Implicit conversion to psi.</summary>
      <param name="measurement">Measurement in the current unit to convert to psi.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_Explicit(HAL.Units.Pressure.kg_ms2)~HAL.Units.Pressure.bar">
      <summary>Implicit conversion to bar.</summary>
      <param name="measurement">Measurement in the current unit to convert to bar.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_Explicit(HAL.Units.Pressure.kg_ms2)~HAL.Units.Pressure.MPa">
      <summary>Implicit conversion to MPa.</summary>
      <param name="measurement">Measurement in the current unit to convert to MPa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_UnaryPlus(HAL.Units.Pressure.kg_ms2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.op_UnaryNegation(HAL.Units.Pressure.kg_ms2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Add(HAL.Units.Pressure.kg_ms2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Subtract(HAL.Units.Pressure.kg_ms2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Equals(HAL.Units.Pressure.kg_ms2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.NotEqual(HAL.Units.Pressure.kg_ms2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.LessThan(HAL.Units.Pressure.kg_ms2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.LessThanOrEqual(HAL.Units.Pressure.kg_ms2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.GreaterThan(HAL.Units.Pressure.kg_ms2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.GreaterThanOrEqual(HAL.Units.Pressure.kg_ms2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.Equals(HAL.Units.Pressure.IPressure)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.kg_ms2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.N_m2">
      <summary>Newtons per Meter Squared unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.#ctor(HAL.Units.Pressure.IPressure)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Pressure.N_m2.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.N_m2.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.N_m2.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_Implicit(System.Double)~HAL.Units.Pressure.N_m2">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_Explicit(HAL.Units.Pressure.N_m2)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion to Pa.</summary>
      <param name="measurement">Measurement in the current unit to convert to Pa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_Explicit(HAL.Units.Pressure.N_m2)~HAL.Units.Pressure.kg_ms2">
      <summary>Implicit conversion to kg_ms2.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_ms2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_Explicit(HAL.Units.Pressure.N_m2)~HAL.Units.Pressure.psi">
      <summary>Implicit conversion to psi.</summary>
      <param name="measurement">Measurement in the current unit to convert to psi.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_Explicit(HAL.Units.Pressure.N_m2)~HAL.Units.Pressure.bar">
      <summary>Implicit conversion to bar.</summary>
      <param name="measurement">Measurement in the current unit to convert to bar.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_Explicit(HAL.Units.Pressure.N_m2)~HAL.Units.Pressure.MPa">
      <summary>Implicit conversion to MPa.</summary>
      <param name="measurement">Measurement in the current unit to convert to MPa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_UnaryPlus(HAL.Units.Pressure.N_m2)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.op_UnaryNegation(HAL.Units.Pressure.N_m2)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Add(HAL.Units.Pressure.N_m2)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Subtract(HAL.Units.Pressure.N_m2)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Equals(HAL.Units.Pressure.N_m2)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.NotEqual(HAL.Units.Pressure.N_m2)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.LessThan(HAL.Units.Pressure.N_m2)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.LessThanOrEqual(HAL.Units.Pressure.N_m2)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.GreaterThan(HAL.Units.Pressure.N_m2)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.GreaterThanOrEqual(HAL.Units.Pressure.N_m2)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.Equals(HAL.Units.Pressure.IPressure)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.N_m2.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.psi">
      <summary>Pounds per Square Inch unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.#ctor(HAL.Units.Pressure.IPressure)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Pressure.psi.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.psi.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.psi.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_Implicit(System.Double)~HAL.Units.Pressure.psi">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_Explicit(HAL.Units.Pressure.psi)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion to Pa.</summary>
      <param name="measurement">Measurement in the current unit to convert to Pa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_Explicit(HAL.Units.Pressure.psi)~HAL.Units.Pressure.kg_ms2">
      <summary>Implicit conversion to kg_ms2.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_ms2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_Explicit(HAL.Units.Pressure.psi)~HAL.Units.Pressure.N_m2">
      <summary>Implicit conversion to N_m2.</summary>
      <param name="measurement">Measurement in the current unit to convert to N_m2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_Explicit(HAL.Units.Pressure.psi)~HAL.Units.Pressure.bar">
      <summary>Implicit conversion to bar.</summary>
      <param name="measurement">Measurement in the current unit to convert to bar.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_Explicit(HAL.Units.Pressure.psi)~HAL.Units.Pressure.MPa">
      <summary>Implicit conversion to MPa.</summary>
      <param name="measurement">Measurement in the current unit to convert to MPa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_UnaryPlus(HAL.Units.Pressure.psi)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.op_UnaryNegation(HAL.Units.Pressure.psi)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Add(HAL.Units.Pressure.psi)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Subtract(HAL.Units.Pressure.psi)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Equals(HAL.Units.Pressure.psi)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.NotEqual(HAL.Units.Pressure.psi)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.LessThan(HAL.Units.Pressure.psi)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.LessThanOrEqual(HAL.Units.Pressure.psi)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.GreaterThan(HAL.Units.Pressure.psi)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.GreaterThanOrEqual(HAL.Units.Pressure.psi)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.Equals(HAL.Units.Pressure.IPressure)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.psi.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.bar">
      <summary>Bars unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.#ctor(HAL.Units.Pressure.IPressure)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Pressure.bar.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.bar.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.bar.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_Implicit(System.Double)~HAL.Units.Pressure.bar">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_Explicit(HAL.Units.Pressure.bar)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion to Pa.</summary>
      <param name="measurement">Measurement in the current unit to convert to Pa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_Explicit(HAL.Units.Pressure.bar)~HAL.Units.Pressure.kg_ms2">
      <summary>Implicit conversion to kg_ms2.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_ms2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_Explicit(HAL.Units.Pressure.bar)~HAL.Units.Pressure.N_m2">
      <summary>Implicit conversion to N_m2.</summary>
      <param name="measurement">Measurement in the current unit to convert to N_m2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_Explicit(HAL.Units.Pressure.bar)~HAL.Units.Pressure.psi">
      <summary>Implicit conversion to psi.</summary>
      <param name="measurement">Measurement in the current unit to convert to psi.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_Explicit(HAL.Units.Pressure.bar)~HAL.Units.Pressure.MPa">
      <summary>Implicit conversion to MPa.</summary>
      <param name="measurement">Measurement in the current unit to convert to MPa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_UnaryPlus(HAL.Units.Pressure.bar)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.op_UnaryNegation(HAL.Units.Pressure.bar)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Add(HAL.Units.Pressure.bar)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Subtract(HAL.Units.Pressure.bar)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Equals(HAL.Units.Pressure.bar)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.NotEqual(HAL.Units.Pressure.bar)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.LessThan(HAL.Units.Pressure.bar)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.LessThanOrEqual(HAL.Units.Pressure.bar)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.GreaterThan(HAL.Units.Pressure.bar)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.GreaterThanOrEqual(HAL.Units.Pressure.bar)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.Equals(HAL.Units.Pressure.IPressure)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.bar.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Pressure.MPa">
      <summary>Megapascals unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.#ctor(HAL.Units.Pressure.IPressure)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Pressure.MPa.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.MPa.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Pressure.MPa.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_Implicit(System.Double)~HAL.Units.Pressure.MPa">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_Explicit(HAL.Units.Pressure.MPa)~HAL.Units.Pressure.Pa">
      <summary>Implicit conversion to Pa.</summary>
      <param name="measurement">Measurement in the current unit to convert to Pa.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_Explicit(HAL.Units.Pressure.MPa)~HAL.Units.Pressure.kg_ms2">
      <summary>Implicit conversion to kg_ms2.</summary>
      <param name="measurement">Measurement in the current unit to convert to kg_ms2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_Explicit(HAL.Units.Pressure.MPa)~HAL.Units.Pressure.N_m2">
      <summary>Implicit conversion to N_m2.</summary>
      <param name="measurement">Measurement in the current unit to convert to N_m2.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_Explicit(HAL.Units.Pressure.MPa)~HAL.Units.Pressure.psi">
      <summary>Implicit conversion to psi.</summary>
      <param name="measurement">Measurement in the current unit to convert to psi.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_Explicit(HAL.Units.Pressure.MPa)~HAL.Units.Pressure.bar">
      <summary>Implicit conversion to bar.</summary>
      <param name="measurement">Measurement in the current unit to convert to bar.</param>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_UnaryPlus(HAL.Units.Pressure.MPa)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.op_UnaryNegation(HAL.Units.Pressure.MPa)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Add(HAL.Units.Pressure.MPa)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Subtract(HAL.Units.Pressure.MPa)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Equals(HAL.Units.Pressure.MPa)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.NotEqual(HAL.Units.Pressure.MPa)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.LessThan(HAL.Units.Pressure.MPa)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.LessThanOrEqual(HAL.Units.Pressure.MPa)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.GreaterThan(HAL.Units.Pressure.MPa)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.GreaterThanOrEqual(HAL.Units.Pressure.MPa)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.Equals(HAL.Units.Pressure.IPressure)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Pressure.MPa.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.AngularSpeed">
      <summary>A measurement of AngularSpeed, expressed in radians per second (rad/s).</summary>
    </member>
    <member name="F:HAL.Units.Speed.AngularSpeed.DefaultEpsilon">
      <summary>The default difference allowed between two AngularSpeed measurements.</summary>
    </member>
    <member name="F:HAL.Units.Speed.AngularSpeed.DefaultEpsilonSquared">
      <summary>The default difference allowed between two AngularSpeed measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Speed.AngularSpeed.DefaultTolerance">
      <summary>The default tolerance allowed between two AngularSpeed measurements.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.#ctor(HAL.Units.Speed.rad_s)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.#ctor(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.#ctor(HAL.Units.Speed.AngularSpeed)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Speed.AngularSpeed.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Speed.AngularSpeed.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of AngularSpeed.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Equal(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether values are within the default tolerance of AngularSpeed.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.NotEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Equal(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.NotEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Equal(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.NotEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.LessThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GreaterThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Equals(HAL.Units.Speed.AngularSpeed)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Equality(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.AngularSpeed)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Inequality(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.AngularSpeed)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Equality(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Inequality(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_GreaterThan(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_GreaterThanOrEqual(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_LessThan(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_LessThanOrEqual(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Addition(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Subtraction(HAL.Units.Speed.AngularSpeed,HAL.Units.Speed.rad_s)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Multiply(HAL.Units.Speed.AngularSpeed,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Division(HAL.Units.Speed.AngularSpeed,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.deg_s)~HAL.Units.Speed.AngularSpeed">
      <summary>Implicit conversion from a value in Degrees per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.rad_s)~HAL.Units.Speed.AngularSpeed">
      <summary>Implicit conversion from a value in Radians per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.rot_s)~HAL.Units.Speed.AngularSpeed">
      <summary>Implicit conversion from a value in Turns per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.deg_min)~HAL.Units.Speed.AngularSpeed">
      <summary>Implicit conversion from a value in Degrees per Minute.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.rad_min)~HAL.Units.Speed.AngularSpeed">
      <summary>Implicit conversion from a value in Radians per Minute.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.rot_min)~HAL.Units.Speed.AngularSpeed">
      <summary>Implicit conversion from a value in Turns per Minute.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.AngularSpeed)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.AngularSpeed.op_Implicit(HAL.Units.Speed.AngularSpeed)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Speed.IAngularSpeed">
      <summary>Implement this class if you wish to add a(n) AngularSpeed measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Speed.deg_s">
      <summary>Degrees per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.#ctor(HAL.Units.Speed.IAngularSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.deg_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.deg_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.deg_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_Implicit(System.Double)~HAL.Units.Speed.deg_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_Explicit(HAL.Units.Speed.deg_s)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion to rad_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_Explicit(HAL.Units.Speed.deg_s)~HAL.Units.Speed.rot_s">
      <summary>Implicit conversion to rot_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_Explicit(HAL.Units.Speed.deg_s)~HAL.Units.Speed.deg_min">
      <summary>Implicit conversion to deg_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_Explicit(HAL.Units.Speed.deg_s)~HAL.Units.Speed.rad_min">
      <summary>Implicit conversion to rad_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_Explicit(HAL.Units.Speed.deg_s)~HAL.Units.Speed.rot_min">
      <summary>Implicit conversion to rot_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_UnaryPlus(HAL.Units.Speed.deg_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.op_UnaryNegation(HAL.Units.Speed.deg_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Add(HAL.Units.Speed.deg_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Subtract(HAL.Units.Speed.deg_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Equals(HAL.Units.Speed.deg_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.NotEqual(HAL.Units.Speed.deg_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.LessThan(HAL.Units.Speed.deg_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.LessThanOrEqual(HAL.Units.Speed.deg_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.GreaterThan(HAL.Units.Speed.deg_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.GreaterThanOrEqual(HAL.Units.Speed.deg_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.Equals(HAL.Units.Speed.IAngularSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.rad_s">
      <summary>Radians per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.#ctor(HAL.Units.Speed.IAngularSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.rad_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rad_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rad_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Implicit(System.Double)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Explicit(HAL.Units.Speed.rad_s)~HAL.Units.Speed.deg_s">
      <summary>Implicit conversion to deg_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Explicit(HAL.Units.Speed.rad_s)~HAL.Units.Speed.rot_s">
      <summary>Implicit conversion to rot_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Explicit(HAL.Units.Speed.rad_s)~HAL.Units.Speed.deg_min">
      <summary>Implicit conversion to deg_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Explicit(HAL.Units.Speed.rad_s)~HAL.Units.Speed.rad_min">
      <summary>Implicit conversion to rad_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Explicit(HAL.Units.Speed.rad_s)~HAL.Units.Speed.rot_min">
      <summary>Implicit conversion to rot_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_UnaryPlus(HAL.Units.Speed.rad_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_UnaryNegation(HAL.Units.Speed.rad_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Addition(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>rad_s addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Subtraction(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>rad_s subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Multiply(HAL.Units.Speed.rad_s,System.Double)">
      <summary>rad_s multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Division(HAL.Units.Speed.rad_s,System.Double)">
      <summary>rad_s division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Equality(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Equality operator with the default AngularSpeed tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_Inequality(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_GreaterThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_GreaterThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_LessThan(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.op_LessThanOrEqual(HAL.Units.Speed.rad_s,HAL.Units.Speed.rad_s)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Add(HAL.Units.Speed.rad_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Subtract(HAL.Units.Speed.rad_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Equals(HAL.Units.Speed.rad_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.NotEqual(HAL.Units.Speed.rad_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.LessThan(HAL.Units.Speed.rad_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.LessThanOrEqual(HAL.Units.Speed.rad_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.GreaterThan(HAL.Units.Speed.rad_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.GreaterThanOrEqual(HAL.Units.Speed.rad_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.Equals(HAL.Units.Speed.IAngularSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.rot_s">
      <summary>Turns per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.#ctor(HAL.Units.Speed.IAngularSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.rot_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rot_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rot_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_Implicit(System.Double)~HAL.Units.Speed.rot_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_Explicit(HAL.Units.Speed.rot_s)~HAL.Units.Speed.deg_s">
      <summary>Implicit conversion to deg_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_Explicit(HAL.Units.Speed.rot_s)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion to rad_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_Explicit(HAL.Units.Speed.rot_s)~HAL.Units.Speed.deg_min">
      <summary>Implicit conversion to deg_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_Explicit(HAL.Units.Speed.rot_s)~HAL.Units.Speed.rad_min">
      <summary>Implicit conversion to rad_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_Explicit(HAL.Units.Speed.rot_s)~HAL.Units.Speed.rot_min">
      <summary>Implicit conversion to rot_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_UnaryPlus(HAL.Units.Speed.rot_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.op_UnaryNegation(HAL.Units.Speed.rot_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Add(HAL.Units.Speed.rot_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Subtract(HAL.Units.Speed.rot_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Equals(HAL.Units.Speed.rot_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.NotEqual(HAL.Units.Speed.rot_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.LessThan(HAL.Units.Speed.rot_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.LessThanOrEqual(HAL.Units.Speed.rot_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.GreaterThan(HAL.Units.Speed.rot_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.GreaterThanOrEqual(HAL.Units.Speed.rot_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.Equals(HAL.Units.Speed.IAngularSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.deg_min">
      <summary>Degrees per Minute unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.#ctor(HAL.Units.Speed.IAngularSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.deg_min.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.deg_min.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.deg_min.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_Implicit(System.Double)~HAL.Units.Speed.deg_min">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_Explicit(HAL.Units.Speed.deg_min)~HAL.Units.Speed.deg_s">
      <summary>Implicit conversion to deg_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_Explicit(HAL.Units.Speed.deg_min)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion to rad_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_Explicit(HAL.Units.Speed.deg_min)~HAL.Units.Speed.rot_s">
      <summary>Implicit conversion to rot_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_Explicit(HAL.Units.Speed.deg_min)~HAL.Units.Speed.rad_min">
      <summary>Implicit conversion to rad_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_Explicit(HAL.Units.Speed.deg_min)~HAL.Units.Speed.rot_min">
      <summary>Implicit conversion to rot_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_UnaryPlus(HAL.Units.Speed.deg_min)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.op_UnaryNegation(HAL.Units.Speed.deg_min)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Add(HAL.Units.Speed.deg_min)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Subtract(HAL.Units.Speed.deg_min)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Equals(HAL.Units.Speed.deg_min)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.NotEqual(HAL.Units.Speed.deg_min)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.LessThan(HAL.Units.Speed.deg_min)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.LessThanOrEqual(HAL.Units.Speed.deg_min)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.GreaterThan(HAL.Units.Speed.deg_min)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.GreaterThanOrEqual(HAL.Units.Speed.deg_min)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.Equals(HAL.Units.Speed.IAngularSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.deg_min.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.rad_min">
      <summary>Radians per Minute unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.#ctor(HAL.Units.Speed.IAngularSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.rad_min.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rad_min.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rad_min.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_Implicit(System.Double)~HAL.Units.Speed.rad_min">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_Explicit(HAL.Units.Speed.rad_min)~HAL.Units.Speed.deg_s">
      <summary>Implicit conversion to deg_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_Explicit(HAL.Units.Speed.rad_min)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion to rad_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_Explicit(HAL.Units.Speed.rad_min)~HAL.Units.Speed.rot_s">
      <summary>Implicit conversion to rot_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_Explicit(HAL.Units.Speed.rad_min)~HAL.Units.Speed.deg_min">
      <summary>Implicit conversion to deg_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_Explicit(HAL.Units.Speed.rad_min)~HAL.Units.Speed.rot_min">
      <summary>Implicit conversion to rot_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_UnaryPlus(HAL.Units.Speed.rad_min)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.op_UnaryNegation(HAL.Units.Speed.rad_min)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Add(HAL.Units.Speed.rad_min)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Subtract(HAL.Units.Speed.rad_min)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Equals(HAL.Units.Speed.rad_min)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.NotEqual(HAL.Units.Speed.rad_min)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.LessThan(HAL.Units.Speed.rad_min)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.LessThanOrEqual(HAL.Units.Speed.rad_min)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.GreaterThan(HAL.Units.Speed.rad_min)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.GreaterThanOrEqual(HAL.Units.Speed.rad_min)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.Equals(HAL.Units.Speed.IAngularSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rad_min.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.rot_min">
      <summary>Turns per Minute unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.#ctor(HAL.Units.Speed.IAngularSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.rot_min.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rot_min.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.rot_min.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_Implicit(System.Double)~HAL.Units.Speed.rot_min">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_Explicit(HAL.Units.Speed.rot_min)~HAL.Units.Speed.deg_s">
      <summary>Implicit conversion to deg_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_Explicit(HAL.Units.Speed.rot_min)~HAL.Units.Speed.rad_s">
      <summary>Implicit conversion to rad_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_Explicit(HAL.Units.Speed.rot_min)~HAL.Units.Speed.rot_s">
      <summary>Implicit conversion to rot_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to rot_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_Explicit(HAL.Units.Speed.rot_min)~HAL.Units.Speed.deg_min">
      <summary>Implicit conversion to deg_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to deg_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_Explicit(HAL.Units.Speed.rot_min)~HAL.Units.Speed.rad_min">
      <summary>Implicit conversion to rad_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to rad_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_UnaryPlus(HAL.Units.Speed.rot_min)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.op_UnaryNegation(HAL.Units.Speed.rot_min)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Add(HAL.Units.Speed.rot_min)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Subtract(HAL.Units.Speed.rot_min)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Equals(HAL.Units.Speed.rot_min)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.NotEqual(HAL.Units.Speed.rot_min)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.LessThan(HAL.Units.Speed.rot_min)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.LessThanOrEqual(HAL.Units.Speed.rot_min)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.GreaterThan(HAL.Units.Speed.rot_min)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.GreaterThanOrEqual(HAL.Units.Speed.rot_min)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.Equals(HAL.Units.Speed.IAngularSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.rot_min.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.LinearSpeed">
      <summary>A measurement of LinearSpeed, expressed in meters per second (m/s).</summary>
    </member>
    <member name="F:HAL.Units.Speed.LinearSpeed.DefaultEpsilon">
      <summary>The default difference allowed between two LinearSpeed measurements.</summary>
    </member>
    <member name="F:HAL.Units.Speed.LinearSpeed.DefaultEpsilonSquared">
      <summary>The default difference allowed between two LinearSpeed measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Speed.LinearSpeed.DefaultTolerance">
      <summary>The default tolerance allowed between two LinearSpeed measurements.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.#ctor(HAL.Units.Speed.m_s)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.#ctor(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.#ctor(HAL.Units.Speed.LinearSpeed)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Speed.LinearSpeed.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Speed.LinearSpeed.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of LinearSpeed.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Equal(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether values are within the default tolerance of LinearSpeed.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.NotEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Equal(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.NotEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Equal(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.NotEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.LessThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GreaterThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Equals(HAL.Units.Speed.LinearSpeed)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Equality(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.LinearSpeed)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Inequality(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.LinearSpeed)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Equality(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Inequality(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_GreaterThan(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_GreaterThanOrEqual(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_LessThan(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_LessThanOrEqual(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Addition(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Subtraction(HAL.Units.Speed.LinearSpeed,HAL.Units.Speed.m_s)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Multiply(HAL.Units.Speed.LinearSpeed,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Division(HAL.Units.Speed.LinearSpeed,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Millimeters per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Centimeters per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Meters per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Inches per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Feet per Second.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Millimeters per Minute.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.kph)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Kilometers per Hour.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.mph)~HAL.Units.Speed.LinearSpeed">
      <summary>Implicit conversion from a value in Miles per Hour.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.LinearSpeed)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.LinearSpeed.op_Implicit(HAL.Units.Speed.LinearSpeed)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Speed.ILinearSpeed">
      <summary>Implement this class if you wish to add a(n) LinearSpeed measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Speed.mm_s">
      <summary>Millimeters per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.mm_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.mm_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.mm_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Implicit(System.Double)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_Explicit(HAL.Units.Speed.mm_s)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_UnaryPlus(HAL.Units.Speed.mm_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.op_UnaryNegation(HAL.Units.Speed.mm_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Add(HAL.Units.Speed.mm_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Subtract(HAL.Units.Speed.mm_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Equals(HAL.Units.Speed.mm_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.NotEqual(HAL.Units.Speed.mm_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.LessThan(HAL.Units.Speed.mm_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.LessThanOrEqual(HAL.Units.Speed.mm_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.GreaterThan(HAL.Units.Speed.mm_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.GreaterThanOrEqual(HAL.Units.Speed.mm_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.cm_s">
      <summary>Centimeters per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.cm_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.cm_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.cm_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Implicit(System.Double)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_Explicit(HAL.Units.Speed.cm_s)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_UnaryPlus(HAL.Units.Speed.cm_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.op_UnaryNegation(HAL.Units.Speed.cm_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Add(HAL.Units.Speed.cm_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Subtract(HAL.Units.Speed.cm_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Equals(HAL.Units.Speed.cm_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.NotEqual(HAL.Units.Speed.cm_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.LessThan(HAL.Units.Speed.cm_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.LessThanOrEqual(HAL.Units.Speed.cm_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.GreaterThan(HAL.Units.Speed.cm_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.GreaterThanOrEqual(HAL.Units.Speed.cm_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.cm_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.m_s">
      <summary>Meters per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.m_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.m_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.m_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Implicit(System.Double)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Explicit(HAL.Units.Speed.m_s)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_UnaryPlus(HAL.Units.Speed.m_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_UnaryNegation(HAL.Units.Speed.m_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Addition(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>m_s addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Subtraction(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>m_s subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Multiply(HAL.Units.Speed.m_s,System.Double)">
      <summary>m_s multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Division(HAL.Units.Speed.m_s,System.Double)">
      <summary>m_s division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Equality(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Equality operator with the default LinearSpeed tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_Inequality(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_GreaterThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_GreaterThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_LessThan(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.op_LessThanOrEqual(HAL.Units.Speed.m_s,HAL.Units.Speed.m_s)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Speed.m_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Add(HAL.Units.Speed.m_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Subtract(HAL.Units.Speed.m_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Equals(HAL.Units.Speed.m_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.NotEqual(HAL.Units.Speed.m_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.LessThan(HAL.Units.Speed.m_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.LessThanOrEqual(HAL.Units.Speed.m_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.GreaterThan(HAL.Units.Speed.m_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.GreaterThanOrEqual(HAL.Units.Speed.m_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.m_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.inch_s">
      <summary>Inches per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.inch_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.inch_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.inch_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Implicit(System.Double)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_Explicit(HAL.Units.Speed.inch_s)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_UnaryPlus(HAL.Units.Speed.inch_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.op_UnaryNegation(HAL.Units.Speed.inch_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Add(HAL.Units.Speed.inch_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Subtract(HAL.Units.Speed.inch_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Equals(HAL.Units.Speed.inch_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.NotEqual(HAL.Units.Speed.inch_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.LessThan(HAL.Units.Speed.inch_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.LessThanOrEqual(HAL.Units.Speed.inch_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.GreaterThan(HAL.Units.Speed.inch_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.GreaterThanOrEqual(HAL.Units.Speed.inch_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.inch_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.ft_s">
      <summary>Feet per Second unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.ft_s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.ft_s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.ft_s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Implicit(System.Double)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_Explicit(HAL.Units.Speed.ft_s)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_UnaryPlus(HAL.Units.Speed.ft_s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.op_UnaryNegation(HAL.Units.Speed.ft_s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Add(HAL.Units.Speed.ft_s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Subtract(HAL.Units.Speed.ft_s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Equals(HAL.Units.Speed.ft_s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.NotEqual(HAL.Units.Speed.ft_s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.LessThan(HAL.Units.Speed.ft_s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.LessThanOrEqual(HAL.Units.Speed.ft_s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.GreaterThan(HAL.Units.Speed.ft_s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.GreaterThanOrEqual(HAL.Units.Speed.ft_s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.ft_s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.mm_min">
      <summary>Millimeters per Minute unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.mm_min.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.mm_min.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.mm_min.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Implicit(System.Double)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_Explicit(HAL.Units.Speed.mm_min)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_UnaryPlus(HAL.Units.Speed.mm_min)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.op_UnaryNegation(HAL.Units.Speed.mm_min)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Add(HAL.Units.Speed.mm_min)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Subtract(HAL.Units.Speed.mm_min)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Equals(HAL.Units.Speed.mm_min)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.NotEqual(HAL.Units.Speed.mm_min)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.LessThan(HAL.Units.Speed.mm_min)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.LessThanOrEqual(HAL.Units.Speed.mm_min)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.GreaterThan(HAL.Units.Speed.mm_min)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.GreaterThanOrEqual(HAL.Units.Speed.mm_min)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mm_min.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.kph">
      <summary>Kilometers per Hour unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.kph.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.kph.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.kph.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Implicit(System.Double)~HAL.Units.Speed.kph">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_Explicit(HAL.Units.Speed.kph)~HAL.Units.Speed.mph">
      <summary>Implicit conversion to mph.</summary>
      <param name="measurement">Measurement in the current unit to convert to mph.</param>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_UnaryPlus(HAL.Units.Speed.kph)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.op_UnaryNegation(HAL.Units.Speed.kph)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.Add(HAL.Units.Speed.kph)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.Subtract(HAL.Units.Speed.kph)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.kph.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.Equals(HAL.Units.Speed.kph)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.NotEqual(HAL.Units.Speed.kph)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.LessThan(HAL.Units.Speed.kph)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.LessThanOrEqual(HAL.Units.Speed.kph)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.GreaterThan(HAL.Units.Speed.kph)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.GreaterThanOrEqual(HAL.Units.Speed.kph)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.kph.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Speed.mph">
      <summary>Miles per Hour unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.#ctor(HAL.Units.Speed.ILinearSpeed)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Speed.mph.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.mph.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Speed.mph.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Implicit(System.Double)~HAL.Units.Speed.mph">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.mm_s">
      <summary>Implicit conversion to mm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.cm_s">
      <summary>Implicit conversion to cm_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.m_s">
      <summary>Implicit conversion to m_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to m_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.inch_s">
      <summary>Implicit conversion to inch_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to inch_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.ft_s">
      <summary>Implicit conversion to ft_s.</summary>
      <param name="measurement">Measurement in the current unit to convert to ft_s.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.mm_min">
      <summary>Implicit conversion to mm_min.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm_min.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_Explicit(HAL.Units.Speed.mph)~HAL.Units.Speed.kph">
      <summary>Implicit conversion to kph.</summary>
      <param name="measurement">Measurement in the current unit to convert to kph.</param>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_UnaryPlus(HAL.Units.Speed.mph)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.op_UnaryNegation(HAL.Units.Speed.mph)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.Add(HAL.Units.Speed.mph)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.Subtract(HAL.Units.Speed.mph)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Speed.mph.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.Equals(HAL.Units.Speed.mph)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.NotEqual(HAL.Units.Speed.mph)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.LessThan(HAL.Units.Speed.mph)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.LessThanOrEqual(HAL.Units.Speed.mph)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.GreaterThan(HAL.Units.Speed.mph)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.GreaterThanOrEqual(HAL.Units.Speed.mph)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.Equals(HAL.Units.Speed.ILinearSpeed)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Speed.mph.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Temperature.Temperature">
      <summary>A measurement of Temperature, expressed in kelvin (K).</summary>
    </member>
    <member name="F:HAL.Units.Temperature.Temperature.DefaultEpsilon">
      <summary>The default difference allowed between two Temperature measurements.</summary>
    </member>
    <member name="F:HAL.Units.Temperature.Temperature.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Temperature measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Temperature.Temperature.DefaultTolerance">
      <summary>The default tolerance allowed between two Temperature measurements.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.#ctor(HAL.Units.Temperature.K)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.#ctor(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.#ctor(HAL.Units.Temperature.Temperature)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Temperature.Temperature.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.Temperature.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Temperature.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Equal(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether values are within the default tolerance of Temperature.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.NotEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Equal(HAL.Units.Temperature.K,HAL.Units.Temperature.K,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.NotEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Equal(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.NotEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.LessThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GreaterThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Equals(HAL.Units.Temperature.Temperature)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Equality(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.Temperature)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Inequality(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.Temperature)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Equality(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Inequality(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_GreaterThan(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_GreaterThanOrEqual(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_LessThan(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_LessThanOrEqual(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Addition(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Subtraction(HAL.Units.Temperature.Temperature,HAL.Units.Temperature.K)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Multiply(HAL.Units.Temperature.Temperature,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Division(HAL.Units.Temperature.Temperature,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Implicit(HAL.Units.Temperature.K)~HAL.Units.Temperature.Temperature">
      <summary>Implicit conversion from a value in Kelvin.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Implicit(HAL.Units.Temperature.degC)~HAL.Units.Temperature.Temperature">
      <summary>Implicit conversion from a value in Degrees Celsius.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Implicit(HAL.Units.Temperature.degF)~HAL.Units.Temperature.Temperature">
      <summary>Implicit conversion from a value in Degrees Fahrenheit.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Implicit(HAL.Units.Temperature.Temperature)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Temperature.Temperature.op_Implicit(HAL.Units.Temperature.Temperature)~HAL.Units.Temperature.K">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Temperature.ITemperature">
      <summary>Implement this class if you wish to add a(n) Temperature measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Temperature.K">
      <summary>Kelvin unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.#ctor(HAL.Units.Temperature.ITemperature)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Temperature.K.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.K.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.K.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Implicit(System.Double)~HAL.Units.Temperature.K">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Explicit(HAL.Units.Temperature.K)~HAL.Units.Temperature.degC">
      <summary>Implicit conversion to degC.</summary>
      <param name="measurement">Measurement in the current unit to convert to degC.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Explicit(HAL.Units.Temperature.K)~HAL.Units.Temperature.degF">
      <summary>Implicit conversion to degF.</summary>
      <param name="measurement">Measurement in the current unit to convert to degF.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_UnaryPlus(HAL.Units.Temperature.K)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_UnaryNegation(HAL.Units.Temperature.K)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Addition(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>K addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Subtraction(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>K subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Multiply(HAL.Units.Temperature.K,System.Double)">
      <summary>K multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Division(HAL.Units.Temperature.K,System.Double)">
      <summary>K division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Equality(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Equality operator with the default Temperature tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_Inequality(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_GreaterThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_GreaterThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_LessThan(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.op_LessThanOrEqual(HAL.Units.Temperature.K,HAL.Units.Temperature.K)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Temperature.K.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.Add(HAL.Units.Temperature.K)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.Subtract(HAL.Units.Temperature.K)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.K.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.Equals(HAL.Units.Temperature.K)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.NotEqual(HAL.Units.Temperature.K)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.LessThan(HAL.Units.Temperature.K)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.LessThanOrEqual(HAL.Units.Temperature.K)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.GreaterThan(HAL.Units.Temperature.K)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.GreaterThanOrEqual(HAL.Units.Temperature.K)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.Equals(HAL.Units.Temperature.ITemperature)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.K.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Temperature.degC">
      <summary>Degrees Celsius unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degC.#ctor(HAL.Units.Temperature.ITemperature)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Temperature.degC.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.degC.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.degC.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.op_Implicit(System.Double)~HAL.Units.Temperature.degC">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degC.op_Explicit(HAL.Units.Temperature.degC)~HAL.Units.Temperature.K">
      <summary>Implicit conversion to K.</summary>
      <param name="measurement">Measurement in the current unit to convert to K.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degC.op_Explicit(HAL.Units.Temperature.degC)~HAL.Units.Temperature.degF">
      <summary>Implicit conversion to degF.</summary>
      <param name="measurement">Measurement in the current unit to convert to degF.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degC.op_UnaryPlus(HAL.Units.Temperature.degC)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.op_UnaryNegation(HAL.Units.Temperature.degC)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Add(HAL.Units.Temperature.degC)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Subtract(HAL.Units.Temperature.degC)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Equals(HAL.Units.Temperature.degC)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.NotEqual(HAL.Units.Temperature.degC)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.LessThan(HAL.Units.Temperature.degC)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.LessThanOrEqual(HAL.Units.Temperature.degC)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.GreaterThan(HAL.Units.Temperature.degC)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.GreaterThanOrEqual(HAL.Units.Temperature.degC)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.Equals(HAL.Units.Temperature.ITemperature)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degC.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Temperature.degF">
      <summary>Degrees Fahrenheit unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degF.#ctor(HAL.Units.Temperature.ITemperature)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Temperature.degF.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.degF.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Temperature.degF.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.op_Implicit(System.Double)~HAL.Units.Temperature.degF">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degF.op_Explicit(HAL.Units.Temperature.degF)~HAL.Units.Temperature.K">
      <summary>Implicit conversion to K.</summary>
      <param name="measurement">Measurement in the current unit to convert to K.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degF.op_Explicit(HAL.Units.Temperature.degF)~HAL.Units.Temperature.degC">
      <summary>Implicit conversion to degC.</summary>
      <param name="measurement">Measurement in the current unit to convert to degC.</param>
    </member>
    <member name="M:HAL.Units.Temperature.degF.op_UnaryPlus(HAL.Units.Temperature.degF)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.op_UnaryNegation(HAL.Units.Temperature.degF)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Add(HAL.Units.Temperature.degF)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Subtract(HAL.Units.Temperature.degF)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Equals(HAL.Units.Temperature.degF)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.NotEqual(HAL.Units.Temperature.degF)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.LessThan(HAL.Units.Temperature.degF)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.LessThanOrEqual(HAL.Units.Temperature.degF)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.GreaterThan(HAL.Units.Temperature.degF)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.GreaterThanOrEqual(HAL.Units.Temperature.degF)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.Equals(HAL.Units.Temperature.ITemperature)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Temperature.degF.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.Time">
      <summary>A measurement of Time, expressed in seconds (s).</summary>
    </member>
    <member name="F:HAL.Units.Time.Time.DefaultEpsilon">
      <summary>The default difference allowed between two Time measurements.</summary>
    </member>
    <member name="F:HAL.Units.Time.Time.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Time measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Time.Time.DefaultTolerance">
      <summary>The default tolerance allowed between two Time measurements.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.#ctor(HAL.Units.Time.s)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.#ctor(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.#ctor(HAL.Units.Time.Time)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Time.Time.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Time.Time.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.Time.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Time.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.Equal(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether values are within the default tolerance of Time.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.NotEqual(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThan(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThan(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.Equal(HAL.Units.Time.s,HAL.Units.Time.s,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.NotEqual(HAL.Units.Time.s,HAL.Units.Time.s,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThan(HAL.Units.Time.s,HAL.Units.Time.s,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThan(HAL.Units.Time.s,HAL.Units.Time.s,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.Equal(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.NotEqual(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThan(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.LessThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThan(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.GreaterThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Time.Time.Equals(HAL.Units.Time.Time)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Equality(HAL.Units.Time.Time,HAL.Units.Time.Time)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Inequality(HAL.Units.Time.Time,HAL.Units.Time.Time)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Equality(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Inequality(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_GreaterThan(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_GreaterThanOrEqual(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_LessThan(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_LessThanOrEqual(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Addition(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Subtraction(HAL.Units.Time.Time,HAL.Units.Time.s)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Multiply(HAL.Units.Time.Time,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Division(HAL.Units.Time.Time,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.ns)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Nanoseconds.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.us)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Microseconds.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.ms)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Milliseconds.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.s)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Seconds.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.min)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Minutes.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.h)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Hours.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.d)~HAL.Units.Time.Time">
      <summary>Implicit conversion from a value in Days.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.Time)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.Time.op_Implicit(HAL.Units.Time.Time)~HAL.Units.Time.s">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Time.ITime">
      <summary>Implement this class if you wish to add a(n) Time measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Time.ns">
      <summary>Nanoseconds unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.ns.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.ns.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.ns.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Implicit(System.Double)~HAL.Units.Time.ns">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Explicit(HAL.Units.Time.ns)~HAL.Units.Time.us">
      <summary>Implicit conversion to us.</summary>
      <param name="measurement">Measurement in the current unit to convert to us.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Explicit(HAL.Units.Time.ns)~HAL.Units.Time.ms">
      <summary>Implicit conversion to ms.</summary>
      <param name="measurement">Measurement in the current unit to convert to ms.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Explicit(HAL.Units.Time.ns)~HAL.Units.Time.s">
      <summary>Implicit conversion to s.</summary>
      <param name="measurement">Measurement in the current unit to convert to s.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Explicit(HAL.Units.Time.ns)~HAL.Units.Time.min">
      <summary>Implicit conversion to min.</summary>
      <param name="measurement">Measurement in the current unit to convert to min.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Explicit(HAL.Units.Time.ns)~HAL.Units.Time.h">
      <summary>Implicit conversion to h.</summary>
      <param name="measurement">Measurement in the current unit to convert to h.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_Explicit(HAL.Units.Time.ns)~HAL.Units.Time.d">
      <summary>Implicit conversion to d.</summary>
      <param name="measurement">Measurement in the current unit to convert to d.</param>
    </member>
    <member name="M:HAL.Units.Time.ns.op_UnaryPlus(HAL.Units.Time.ns)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.op_UnaryNegation(HAL.Units.Time.ns)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.Add(HAL.Units.Time.ns)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.Subtract(HAL.Units.Time.ns)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ns.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.Equals(HAL.Units.Time.ns)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.NotEqual(HAL.Units.Time.ns)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.LessThan(HAL.Units.Time.ns)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.LessThanOrEqual(HAL.Units.Time.ns)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.GreaterThan(HAL.Units.Time.ns)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.GreaterThanOrEqual(HAL.Units.Time.ns)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ns.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.us">
      <summary>Microseconds unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.us.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.us.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.us.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.us.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.op_Implicit(System.Double)~HAL.Units.Time.us">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_Explicit(HAL.Units.Time.us)~HAL.Units.Time.ns">
      <summary>Implicit conversion to ns.</summary>
      <param name="measurement">Measurement in the current unit to convert to ns.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_Explicit(HAL.Units.Time.us)~HAL.Units.Time.ms">
      <summary>Implicit conversion to ms.</summary>
      <param name="measurement">Measurement in the current unit to convert to ms.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_Explicit(HAL.Units.Time.us)~HAL.Units.Time.s">
      <summary>Implicit conversion to s.</summary>
      <param name="measurement">Measurement in the current unit to convert to s.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_Explicit(HAL.Units.Time.us)~HAL.Units.Time.min">
      <summary>Implicit conversion to min.</summary>
      <param name="measurement">Measurement in the current unit to convert to min.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_Explicit(HAL.Units.Time.us)~HAL.Units.Time.h">
      <summary>Implicit conversion to h.</summary>
      <param name="measurement">Measurement in the current unit to convert to h.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_Explicit(HAL.Units.Time.us)~HAL.Units.Time.d">
      <summary>Implicit conversion to d.</summary>
      <param name="measurement">Measurement in the current unit to convert to d.</param>
    </member>
    <member name="M:HAL.Units.Time.us.op_UnaryPlus(HAL.Units.Time.us)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.op_UnaryNegation(HAL.Units.Time.us)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.Add(HAL.Units.Time.us)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.Subtract(HAL.Units.Time.us)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.us.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.Equals(HAL.Units.Time.us)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.NotEqual(HAL.Units.Time.us)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.LessThan(HAL.Units.Time.us)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.LessThanOrEqual(HAL.Units.Time.us)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.GreaterThan(HAL.Units.Time.us)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.GreaterThanOrEqual(HAL.Units.Time.us)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.us.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.ms">
      <summary>Milliseconds unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.ms.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.ms.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.ms.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Implicit(System.Double)~HAL.Units.Time.ms">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Explicit(HAL.Units.Time.ms)~HAL.Units.Time.ns">
      <summary>Implicit conversion to ns.</summary>
      <param name="measurement">Measurement in the current unit to convert to ns.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Explicit(HAL.Units.Time.ms)~HAL.Units.Time.us">
      <summary>Implicit conversion to us.</summary>
      <param name="measurement">Measurement in the current unit to convert to us.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Explicit(HAL.Units.Time.ms)~HAL.Units.Time.s">
      <summary>Implicit conversion to s.</summary>
      <param name="measurement">Measurement in the current unit to convert to s.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Explicit(HAL.Units.Time.ms)~HAL.Units.Time.min">
      <summary>Implicit conversion to min.</summary>
      <param name="measurement">Measurement in the current unit to convert to min.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Explicit(HAL.Units.Time.ms)~HAL.Units.Time.h">
      <summary>Implicit conversion to h.</summary>
      <param name="measurement">Measurement in the current unit to convert to h.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_Explicit(HAL.Units.Time.ms)~HAL.Units.Time.d">
      <summary>Implicit conversion to d.</summary>
      <param name="measurement">Measurement in the current unit to convert to d.</param>
    </member>
    <member name="M:HAL.Units.Time.ms.op_UnaryPlus(HAL.Units.Time.ms)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.op_UnaryNegation(HAL.Units.Time.ms)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.Add(HAL.Units.Time.ms)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.Subtract(HAL.Units.Time.ms)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.ms.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.Equals(HAL.Units.Time.ms)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.NotEqual(HAL.Units.Time.ms)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.LessThan(HAL.Units.Time.ms)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.LessThanOrEqual(HAL.Units.Time.ms)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.GreaterThan(HAL.Units.Time.ms)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.GreaterThanOrEqual(HAL.Units.Time.ms)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.ms.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.s">
      <summary>Seconds unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.s.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.s.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.s.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.s.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.op_Implicit(System.Double)~HAL.Units.Time.s">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Explicit(HAL.Units.Time.s)~HAL.Units.Time.ns">
      <summary>Implicit conversion to ns.</summary>
      <param name="measurement">Measurement in the current unit to convert to ns.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Explicit(HAL.Units.Time.s)~HAL.Units.Time.us">
      <summary>Implicit conversion to us.</summary>
      <param name="measurement">Measurement in the current unit to convert to us.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Explicit(HAL.Units.Time.s)~HAL.Units.Time.ms">
      <summary>Implicit conversion to ms.</summary>
      <param name="measurement">Measurement in the current unit to convert to ms.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Explicit(HAL.Units.Time.s)~HAL.Units.Time.min">
      <summary>Implicit conversion to min.</summary>
      <param name="measurement">Measurement in the current unit to convert to min.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Explicit(HAL.Units.Time.s)~HAL.Units.Time.h">
      <summary>Implicit conversion to h.</summary>
      <param name="measurement">Measurement in the current unit to convert to h.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Explicit(HAL.Units.Time.s)~HAL.Units.Time.d">
      <summary>Implicit conversion to d.</summary>
      <param name="measurement">Measurement in the current unit to convert to d.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_UnaryPlus(HAL.Units.Time.s)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.op_UnaryNegation(HAL.Units.Time.s)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.op_Addition(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>s addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Subtraction(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>s subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Multiply(HAL.Units.Time.s,System.Double)">
      <summary>s multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Division(HAL.Units.Time.s,System.Double)">
      <summary>s division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Time.s.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.op_Equality(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Equality operator with the default Time tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_Inequality(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_GreaterThan(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_GreaterThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_LessThan(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.op_LessThanOrEqual(HAL.Units.Time.s,HAL.Units.Time.s)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Time.s.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.Add(HAL.Units.Time.s)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.Subtract(HAL.Units.Time.s)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.s.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.Equals(HAL.Units.Time.s)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.NotEqual(HAL.Units.Time.s)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.LessThan(HAL.Units.Time.s)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.LessThanOrEqual(HAL.Units.Time.s)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.GreaterThan(HAL.Units.Time.s)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.GreaterThanOrEqual(HAL.Units.Time.s)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.s.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.min">
      <summary>Minutes unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.min.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.min.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.min.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.min.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.op_Implicit(System.Double)~HAL.Units.Time.min">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_Explicit(HAL.Units.Time.min)~HAL.Units.Time.ns">
      <summary>Implicit conversion to ns.</summary>
      <param name="measurement">Measurement in the current unit to convert to ns.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_Explicit(HAL.Units.Time.min)~HAL.Units.Time.us">
      <summary>Implicit conversion to us.</summary>
      <param name="measurement">Measurement in the current unit to convert to us.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_Explicit(HAL.Units.Time.min)~HAL.Units.Time.ms">
      <summary>Implicit conversion to ms.</summary>
      <param name="measurement">Measurement in the current unit to convert to ms.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_Explicit(HAL.Units.Time.min)~HAL.Units.Time.s">
      <summary>Implicit conversion to s.</summary>
      <param name="measurement">Measurement in the current unit to convert to s.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_Explicit(HAL.Units.Time.min)~HAL.Units.Time.h">
      <summary>Implicit conversion to h.</summary>
      <param name="measurement">Measurement in the current unit to convert to h.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_Explicit(HAL.Units.Time.min)~HAL.Units.Time.d">
      <summary>Implicit conversion to d.</summary>
      <param name="measurement">Measurement in the current unit to convert to d.</param>
    </member>
    <member name="M:HAL.Units.Time.min.op_UnaryPlus(HAL.Units.Time.min)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.op_UnaryNegation(HAL.Units.Time.min)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.Add(HAL.Units.Time.min)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.Subtract(HAL.Units.Time.min)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.min.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.Equals(HAL.Units.Time.min)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.NotEqual(HAL.Units.Time.min)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.LessThan(HAL.Units.Time.min)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.LessThanOrEqual(HAL.Units.Time.min)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.GreaterThan(HAL.Units.Time.min)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.GreaterThanOrEqual(HAL.Units.Time.min)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.min.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.h">
      <summary>Hours unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.h.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.h.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.h.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.h.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.op_Implicit(System.Double)~HAL.Units.Time.h">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_Explicit(HAL.Units.Time.h)~HAL.Units.Time.ns">
      <summary>Implicit conversion to ns.</summary>
      <param name="measurement">Measurement in the current unit to convert to ns.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_Explicit(HAL.Units.Time.h)~HAL.Units.Time.us">
      <summary>Implicit conversion to us.</summary>
      <param name="measurement">Measurement in the current unit to convert to us.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_Explicit(HAL.Units.Time.h)~HAL.Units.Time.ms">
      <summary>Implicit conversion to ms.</summary>
      <param name="measurement">Measurement in the current unit to convert to ms.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_Explicit(HAL.Units.Time.h)~HAL.Units.Time.s">
      <summary>Implicit conversion to s.</summary>
      <param name="measurement">Measurement in the current unit to convert to s.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_Explicit(HAL.Units.Time.h)~HAL.Units.Time.min">
      <summary>Implicit conversion to min.</summary>
      <param name="measurement">Measurement in the current unit to convert to min.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_Explicit(HAL.Units.Time.h)~HAL.Units.Time.d">
      <summary>Implicit conversion to d.</summary>
      <param name="measurement">Measurement in the current unit to convert to d.</param>
    </member>
    <member name="M:HAL.Units.Time.h.op_UnaryPlus(HAL.Units.Time.h)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.op_UnaryNegation(HAL.Units.Time.h)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.Add(HAL.Units.Time.h)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.Subtract(HAL.Units.Time.h)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.h.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.Equals(HAL.Units.Time.h)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.NotEqual(HAL.Units.Time.h)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.LessThan(HAL.Units.Time.h)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.LessThanOrEqual(HAL.Units.Time.h)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.GreaterThan(HAL.Units.Time.h)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.GreaterThanOrEqual(HAL.Units.Time.h)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.h.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Time.d">
      <summary>Days unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Time.d.#ctor(HAL.Units.Time.ITime)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Time.d.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.d.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Time.d.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.op_Implicit(System.Double)~HAL.Units.Time.d">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_Explicit(HAL.Units.Time.d)~HAL.Units.Time.ns">
      <summary>Implicit conversion to ns.</summary>
      <param name="measurement">Measurement in the current unit to convert to ns.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_Explicit(HAL.Units.Time.d)~HAL.Units.Time.us">
      <summary>Implicit conversion to us.</summary>
      <param name="measurement">Measurement in the current unit to convert to us.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_Explicit(HAL.Units.Time.d)~HAL.Units.Time.ms">
      <summary>Implicit conversion to ms.</summary>
      <param name="measurement">Measurement in the current unit to convert to ms.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_Explicit(HAL.Units.Time.d)~HAL.Units.Time.s">
      <summary>Implicit conversion to s.</summary>
      <param name="measurement">Measurement in the current unit to convert to s.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_Explicit(HAL.Units.Time.d)~HAL.Units.Time.min">
      <summary>Implicit conversion to min.</summary>
      <param name="measurement">Measurement in the current unit to convert to min.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_Explicit(HAL.Units.Time.d)~HAL.Units.Time.h">
      <summary>Implicit conversion to h.</summary>
      <param name="measurement">Measurement in the current unit to convert to h.</param>
    </member>
    <member name="M:HAL.Units.Time.d.op_UnaryPlus(HAL.Units.Time.d)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.op_UnaryNegation(HAL.Units.Time.d)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.Add(HAL.Units.Time.d)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.Subtract(HAL.Units.Time.d)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Time.d.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.Equals(HAL.Units.Time.d)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.NotEqual(HAL.Units.Time.d)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.LessThan(HAL.Units.Time.d)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.LessThanOrEqual(HAL.Units.Time.d)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.GreaterThan(HAL.Units.Time.d)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.GreaterThanOrEqual(HAL.Units.Time.d)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.Equals(HAL.Units.Time.ITime)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Time.d.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Torque.Torque">
      <summary>A measurement of Torque, expressed in newton meters (N·m).</summary>
    </member>
    <member name="F:HAL.Units.Torque.Torque.DefaultEpsilon">
      <summary>The default difference allowed between two Torque measurements.</summary>
    </member>
    <member name="F:HAL.Units.Torque.Torque.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Torque measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Torque.Torque.DefaultTolerance">
      <summary>The default tolerance allowed between two Torque measurements.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.#ctor(HAL.Units.Torque.Nm)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.#ctor(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.#ctor(HAL.Units.Torque.Torque)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Torque.Torque.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Torque.Torque.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Torque.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Equal(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether values are within the default tolerance of Torque.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.NotEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Equal(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.NotEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Equal(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.NotEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.LessThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GreaterThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Equals(HAL.Units.Torque.Torque)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Equality(HAL.Units.Torque.Torque,HAL.Units.Torque.Torque)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Inequality(HAL.Units.Torque.Torque,HAL.Units.Torque.Torque)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Equality(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Inequality(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_GreaterThan(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_GreaterThanOrEqual(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_LessThan(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_LessThanOrEqual(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Addition(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Subtraction(HAL.Units.Torque.Torque,HAL.Units.Torque.Nm)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Multiply(HAL.Units.Torque.Torque,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Division(HAL.Units.Torque.Torque,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Implicit(HAL.Units.Torque.Nm)~HAL.Units.Torque.Torque">
      <summary>Implicit conversion from a value in Newton Meters.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Implicit(HAL.Units.Torque.Torque)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Torque.Torque.op_Implicit(HAL.Units.Torque.Torque)~HAL.Units.Torque.Nm">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Torque.ITorque">
      <summary>Implement this class if you wish to add a(n) Torque measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Torque.Nm">
      <summary>Newton Meters unit.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.#ctor(HAL.Units.Torque.ITorque)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Torque.Nm.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Torque.Nm.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Torque.Nm.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Implicit(System.Double)~HAL.Units.Torque.Nm">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_UnaryPlus(HAL.Units.Torque.Nm)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_UnaryNegation(HAL.Units.Torque.Nm)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Addition(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Nm addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Subtraction(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Nm subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Multiply(HAL.Units.Torque.Nm,System.Double)">
      <summary>Nm multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Division(HAL.Units.Torque.Nm,System.Double)">
      <summary>Nm division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Equality(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Equality operator with the default Torque tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_Inequality(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_GreaterThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_GreaterThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_LessThan(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.op_LessThanOrEqual(HAL.Units.Torque.Nm,HAL.Units.Torque.Nm)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Torque.Nm.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Add(HAL.Units.Torque.Nm)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Subtract(HAL.Units.Torque.Nm)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Equals(HAL.Units.Torque.Nm)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.NotEqual(HAL.Units.Torque.Nm)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.LessThan(HAL.Units.Torque.Nm)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.LessThanOrEqual(HAL.Units.Torque.Nm)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.GreaterThan(HAL.Units.Torque.Nm)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.GreaterThanOrEqual(HAL.Units.Torque.Nm)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.Equals(HAL.Units.Torque.ITorque)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Torque.Nm.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.Volume">
      <summary>A measurement of Volume, expressed in cubic meter (m3).</summary>
    </member>
    <member name="F:HAL.Units.Volume.Volume.DefaultEpsilon">
      <summary>The default difference allowed between two Volume measurements.</summary>
    </member>
    <member name="F:HAL.Units.Volume.Volume.DefaultEpsilonSquared">
      <summary>The default difference allowed between two Volume measurements squared. Useful in certain calculations.</summary>
    </member>
    <member name="F:HAL.Units.Volume.Volume.DefaultTolerance">
      <summary>The default tolerance allowed between two Volume measurements.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.#ctor">
      <summary>Creates a measurement with values set to defaults.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.#ctor(HAL.Units.Volume.m3)">
      <summary>Creates a measurement with the value set to that given.</summary>
      <param name="value">The value that this measurement should have.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.#ctor(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Creates a measurement with the value set to that given and a range bounded by the minimum and maximum values.</summary>
      <param name="value">The value that this measurement should have.</param>
      <param name="min">The minimum allowable value for this measurement.</param>
      <param name="max">The maximum allowable value for this measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.#ctor(HAL.Units.Volume.Volume)">
      <summary>Creates a measurement by duplicating the measurement given.</summary>
      <param name="clonee">The measurement to clone.</param>
    </member>
    <member name="P:HAL.Units.Volume.Volume.Tolerance">
      <summary>Tolerance range of the value, in system units.</summary>
    </member>
    <member name="P:HAL.Units.Volume.Volume.CompatibilityInterface">
      <summary>Interface marking compatible units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Equal(System.Double,System.Double)">
      <summary>Whether values are within the default tolerance of Volume.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.NotEqual(System.Double,System.Double)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThan(System.Double,System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThan(System.Double,System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Equal(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether values are within the default tolerance of Volume.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.NotEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Equal(HAL.Units.Volume.m3,HAL.Units.Volume.m3,System.Double)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.NotEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3,System.Double)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3,System.Double)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3,System.Double)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3,System.Double)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3,System.Double)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Equal(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether values are within the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.NotEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether  values are not the same with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is less than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.LessThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is less than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is greater than the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GreaterThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Whether first value is greater than or equal to the second with the given tolerance.</summary>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Equals(HAL.Units.Volume.Volume)">
      <summary>Equality via the object equals method.</summary>
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.Equals(System.Object)">
      <param name="other">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Equality(HAL.Units.Volume.Volume,HAL.Units.Volume.Volume)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Inequality(HAL.Units.Volume.Volume,HAL.Units.Volume.Volume)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Equality(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Equality via the double equals (==) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Inequality(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Inequality via the exclamation equals (!=) operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_GreaterThan(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_GreaterThanOrEqual(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Greater than or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_LessThan(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_LessThanOrEqual(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Addition(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Double addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Subtraction(HAL.Units.Volume.Volume,HAL.Units.Volume.m3)">
      <summary>Double subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Multiply(HAL.Units.Volume.Volume,System.Double)">
      <summary>Double multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Division(HAL.Units.Volume.Volume,System.Double)">
      <summary>Double division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.uL)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Microlitre.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.mL)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Millilitre.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.cL)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Centilitre.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.dL)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Decilitre.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.L)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Litre.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Cubic Millimeter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Cubic Centimeter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Cubic decimeter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.m3)~HAL.Units.Volume.Volume">
      <summary>Implicit conversion from a value in Cubic Meter.</summary>
      <param name="value">Unitized value to store in the current measurement.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.Volume)~System.Double">
      <summary>Implicit conversion to a numeric value.</summary>
      <param name="measurement">Measurement in the current unit to convert back to a raw numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.Volume.op_Implicit(HAL.Units.Volume.Volume)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to a value in the base unit.</summary>
      <param name="measurement">Measurement from which to extract a unitized value.</param>
    </member>
    <member name="T:HAL.Units.Volume.IVolume">
      <summary>Implement this class if you wish to add a(n) Volume measurement unit.</summary>
    </member>
    <member name="T:HAL.Units.Volume.uL">
      <summary>Microlitre unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.uL.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.uL.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.uL.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Implicit(System.Double)~HAL.Units.Volume.uL">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_Explicit(HAL.Units.Volume.uL)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_UnaryPlus(HAL.Units.Volume.uL)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.op_UnaryNegation(HAL.Units.Volume.uL)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.Add(HAL.Units.Volume.uL)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.Subtract(HAL.Units.Volume.uL)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.uL.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.Equals(HAL.Units.Volume.uL)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.NotEqual(HAL.Units.Volume.uL)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.LessThan(HAL.Units.Volume.uL)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.LessThanOrEqual(HAL.Units.Volume.uL)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.GreaterThan(HAL.Units.Volume.uL)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.GreaterThanOrEqual(HAL.Units.Volume.uL)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.uL.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.mL">
      <summary>Millilitre unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.mL.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.mL.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.mL.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Implicit(System.Double)~HAL.Units.Volume.mL">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_Explicit(HAL.Units.Volume.mL)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_UnaryPlus(HAL.Units.Volume.mL)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.op_UnaryNegation(HAL.Units.Volume.mL)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.Add(HAL.Units.Volume.mL)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.Subtract(HAL.Units.Volume.mL)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mL.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.Equals(HAL.Units.Volume.mL)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.NotEqual(HAL.Units.Volume.mL)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.LessThan(HAL.Units.Volume.mL)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.LessThanOrEqual(HAL.Units.Volume.mL)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.GreaterThan(HAL.Units.Volume.mL)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.GreaterThanOrEqual(HAL.Units.Volume.mL)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mL.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.cL">
      <summary>Centilitre unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.cL.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.cL.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.cL.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Implicit(System.Double)~HAL.Units.Volume.cL">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_Explicit(HAL.Units.Volume.cL)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_UnaryPlus(HAL.Units.Volume.cL)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.op_UnaryNegation(HAL.Units.Volume.cL)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.Add(HAL.Units.Volume.cL)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.Subtract(HAL.Units.Volume.cL)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cL.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.Equals(HAL.Units.Volume.cL)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.NotEqual(HAL.Units.Volume.cL)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.LessThan(HAL.Units.Volume.cL)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.LessThanOrEqual(HAL.Units.Volume.cL)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.GreaterThan(HAL.Units.Volume.cL)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.GreaterThanOrEqual(HAL.Units.Volume.cL)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cL.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.dL">
      <summary>Decilitre unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.dL.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.dL.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.dL.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Implicit(System.Double)~HAL.Units.Volume.dL">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_Explicit(HAL.Units.Volume.dL)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_UnaryPlus(HAL.Units.Volume.dL)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.op_UnaryNegation(HAL.Units.Volume.dL)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.Add(HAL.Units.Volume.dL)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.Subtract(HAL.Units.Volume.dL)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dL.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.Equals(HAL.Units.Volume.dL)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.NotEqual(HAL.Units.Volume.dL)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.LessThan(HAL.Units.Volume.dL)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.LessThanOrEqual(HAL.Units.Volume.dL)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.GreaterThan(HAL.Units.Volume.dL)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.GreaterThanOrEqual(HAL.Units.Volume.dL)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dL.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.L">
      <summary>Litre unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.L.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.L.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.L.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Implicit(System.Double)~HAL.Units.Volume.L">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_Explicit(HAL.Units.Volume.L)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.L.op_UnaryPlus(HAL.Units.Volume.L)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.op_UnaryNegation(HAL.Units.Volume.L)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.Add(HAL.Units.Volume.L)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.Subtract(HAL.Units.Volume.L)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.L.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.Equals(HAL.Units.Volume.L)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.NotEqual(HAL.Units.Volume.L)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.LessThan(HAL.Units.Volume.L)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.LessThanOrEqual(HAL.Units.Volume.L)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.GreaterThan(HAL.Units.Volume.L)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.GreaterThanOrEqual(HAL.Units.Volume.L)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.L.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.mm3">
      <summary>Cubic Millimeter unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.mm3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.mm3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.mm3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Implicit(System.Double)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_Explicit(HAL.Units.Volume.mm3)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_UnaryPlus(HAL.Units.Volume.mm3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.op_UnaryNegation(HAL.Units.Volume.mm3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Add(HAL.Units.Volume.mm3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Subtract(HAL.Units.Volume.mm3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Equals(HAL.Units.Volume.mm3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.NotEqual(HAL.Units.Volume.mm3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.LessThan(HAL.Units.Volume.mm3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.LessThanOrEqual(HAL.Units.Volume.mm3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.GreaterThan(HAL.Units.Volume.mm3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.GreaterThanOrEqual(HAL.Units.Volume.mm3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.mm3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.cm3">
      <summary>Cubic Centimeter unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.cm3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.cm3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.cm3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Implicit(System.Double)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_Explicit(HAL.Units.Volume.cm3)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_UnaryPlus(HAL.Units.Volume.cm3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.op_UnaryNegation(HAL.Units.Volume.cm3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Add(HAL.Units.Volume.cm3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Subtract(HAL.Units.Volume.cm3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Equals(HAL.Units.Volume.cm3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.NotEqual(HAL.Units.Volume.cm3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.LessThan(HAL.Units.Volume.cm3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.LessThanOrEqual(HAL.Units.Volume.cm3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.GreaterThan(HAL.Units.Volume.cm3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.GreaterThanOrEqual(HAL.Units.Volume.cm3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.cm3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.dm3">
      <summary>Cubic decimeter unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.dm3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.dm3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.dm3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Implicit(System.Double)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_Explicit(HAL.Units.Volume.dm3)~HAL.Units.Volume.m3">
      <summary>Implicit conversion to m3.</summary>
      <param name="measurement">Measurement in the current unit to convert to m3.</param>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_UnaryPlus(HAL.Units.Volume.dm3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.op_UnaryNegation(HAL.Units.Volume.dm3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Add(HAL.Units.Volume.dm3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Subtract(HAL.Units.Volume.dm3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Equals(HAL.Units.Volume.dm3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.NotEqual(HAL.Units.Volume.dm3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.LessThan(HAL.Units.Volume.dm3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.LessThanOrEqual(HAL.Units.Volume.dm3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.GreaterThan(HAL.Units.Volume.dm3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.GreaterThanOrEqual(HAL.Units.Volume.dm3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.dm3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Units.Volume.m3">
      <summary>Cubic Meter unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.#ctor(System.Double)">
      <summary>Stores a numeric value in the current unit.</summary>
      <param name="number">Numeric value.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.#ctor(HAL.Units.Volume.IVolume)">
      <summary>Stores a system value in the current unit.</summary>
      <param name="measurement">Numeric value.</param>
    </member>
    <member name="P:HAL.Units.Volume.m3.Value">
      <summary>Value of the measurement, in system unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.m3.Suffix">
      <summary>The suffix used to denote this unit.</summary>
    </member>
    <member name="P:HAL.Units.Volume.m3.IsValid">
      <summary>Whether the value is valid.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.ConvertToSystemUnit(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.ConvertFromSystemUnit(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.ConvertToSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in this unit to the system unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.ConvertFromSystemUnitFromInstance(System.Double)">
      <summary> Converts a value expressed in system unit to this unit.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Implicit(System.Double)~HAL.Units.Volume.m3">
      <summary>Implicit conversion from a numeric value.</summary>
      <param name="number">Numeric value to store in the current unit.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.uL">
      <summary>Implicit conversion to uL.</summary>
      <param name="measurement">Measurement in the current unit to convert to uL.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.mL">
      <summary>Implicit conversion to mL.</summary>
      <param name="measurement">Measurement in the current unit to convert to mL.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.cL">
      <summary>Implicit conversion to cL.</summary>
      <param name="measurement">Measurement in the current unit to convert to cL.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.dL">
      <summary>Implicit conversion to dL.</summary>
      <param name="measurement">Measurement in the current unit to convert to dL.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.L">
      <summary>Implicit conversion to L.</summary>
      <param name="measurement">Measurement in the current unit to convert to L.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.mm3">
      <summary>Implicit conversion to mm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to mm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.cm3">
      <summary>Implicit conversion to cm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to cm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Explicit(HAL.Units.Volume.m3)~HAL.Units.Volume.dm3">
      <summary>Implicit conversion to dm3.</summary>
      <param name="measurement">Measurement in the current unit to convert to dm3.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_UnaryPlus(HAL.Units.Volume.m3)">
      <summary>Positive unary operator. Serves strictly no purpose but balances the unary negative.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_UnaryNegation(HAL.Units.Volume.m3)">
      <summary>Negative unary operator. Negates the value of this measurement.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Addition(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>m3 addition via the plus (+) operator.</summary>
      <param name="object1">The first item to be summed.</param>
      <param name="object2">The second item to be summed.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Subtraction(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>m3 subtraction via the minus (-) operator.</summary>
      <param name="object1">The item to be subtracted from.</param>
      <param name="object2">The item to subtract.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Multiply(HAL.Units.Volume.m3,System.Double)">
      <summary>m3 multiplication via the asterisk (*) operator.</summary>
      <param name="object1">The first item to be multiplied.</param>
      <param name="object2">The second item to be multiplied.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Division(HAL.Units.Volume.m3,System.Double)">
      <summary>m3 division via the slash (/) operator.</summary>
      <param name="object1">The item to be divided.</param>
      <param name="object2">The divisor.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.Equals(System.Object)">
      <summary>Equality via the object equals method.</summary>
      <param name="obj">The item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Equality(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Equality operator with the default Volume tolerance.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_Inequality(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Inequality operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_GreaterThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Greater than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_GreaterThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Greater or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_LessThan(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Less than operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.op_LessThanOrEqual(HAL.Units.Volume.m3,HAL.Units.Volume.m3)">
      <summary>Less or equal operator.</summary>
      <param name="object1">The first item to be compared.</param>
      <param name="object2">The second item to be compared.</param>
    </member>
    <member name="M:HAL.Units.Volume.m3.InSystemUnits">
      <summary>Returns a value equivalent to this in system units.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#ReassignClone(System.Double)">
      <summary>Creates a clone of the original measurement with a new value.</summary>
      <param name="newValue">The value that the new measurement should now have.</param>
      <returns>A new measurement with a modified value.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#Clone">
      <summary>Duplicates this measurement.</summary>
      <returns>A copy of this measurement.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.ToString">
      <summary>Returns a string representation of the measurement in the current unit.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.ToString(System.Int32)">
      <summary>Returns a string representation of the measurement in the current unit with the number of decimal places given.</summary>
      <returns>[Value][Unit] concatenated string.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#Add(HAL.Units.IUnitizedValue)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#Subtract(HAL.Units.IUnitizedValue)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.Add(HAL.Units.Volume.m3)">
      <summary>Adds a given value to this.</summary>
      <param name="addend">The value that will be added to this.</param>
      <returns>The sum of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.Subtract(HAL.Units.Volume.m3)">
      <summary>Subtracts a given value from this.</summary>
      <param name="subtrahend">The value that will be subtracted from this.</param>
      <returns>The subtraction of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.Multiply(System.Double)">
      <summary>Multiplies this by a given value.</summary>
      <param name="multiplier">The value that this will be multiplied by.</param>
      <returns>The multiplication of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.Divide(System.Double)">
      <summary>Divides this by a given value.</summary>
      <param name="divisor">The value that this will be divided by.</param>
      <returns>The division of the two values.</returns>
    </member>
    <member name="M:HAL.Units.Volume.m3.Equals(System.Double)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.NotEqual(System.Double)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.LessThan(System.Double)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.LessThanOrEqual(System.Double)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.GreaterThan(System.Double)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.GreaterThanOrEqual(System.Double)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.Equals(HAL.Units.Volume.m3)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.NotEqual(HAL.Units.Volume.m3)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.LessThan(HAL.Units.Volume.m3)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.LessThanOrEqual(HAL.Units.Volume.m3)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.GreaterThan(HAL.Units.Volume.m3)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.GreaterThanOrEqual(HAL.Units.Volume.m3)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.Equals(HAL.Units.Volume.IVolume)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#Equals(HAL.Units.IUnitizedValue)">
      <summary>Whether values are equal.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#NotEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether  values are not the same.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#LessThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#LessThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is less than or equal to the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#GreaterThan(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than the second.</summary>
    </member>
    <member name="M:HAL.Units.Volume.m3.HAL#Units#IUnitizedValue#GreaterThanOrEqual(HAL.Units.IUnitizedValue)">
      <summary>Whether first value is greater than or equal to the second.</summary>
    </member>
    <member name="T:HAL.Utilities.HAL_Utilities">
      <summary>This makes life easier.</summary>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.Equals(HAL.IIdentifiable,HAL.Identifier)">
      <summary>Checks for equality between an identifiable object and an identity.</summary>
      <param name="identifiable">Object.</param>
      <param name="identity">Identity.</param>
      <returns>Whether the identifiable's identity matches that given.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetProperties(System.Object,System.Boolean)">
      <summary>Collects the properties of an object including custom extension properties from extensible classes.</summary>
      <param name="obj">The object whose properties should be returned.</param>
      <param name="publishableOnly">Defines whether only properties marked with the Publish Property attribute should be included.</param>
      <returns>List of <see cref="T:HAL.Bindings.IPropertyIdentifer" />s pointing to all of the properties of the input object.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetProperties(System.Reflection.TypeInfo,System.Boolean)">
      <summary>Collects the properties of an object including custom extension properties from extensible classes.</summary>
      <param name="typeInfo">The type whose properties should be returned.</param>
      <param name="publishableOnly">Defines whether only properties marked with the Publish Property attribute should be included.</param>
      <returns>List of <see cref="T:HAL.Bindings.PropertyKey" />s pointing to all of the properties of the input object.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetProperties(System.Type,System.Boolean)">
      <summary>Collects the properties of a type including custom extension properties from extensible classes.</summary>
      <param name="type">The type whose properties should be returned.</param>
      <param name="publishableOnly">Defines whether only properties marked with the Publish Property attribute should be included.</param>
      <returns>List of <see cref="T:HAL.Bindings.PropertyKey" />s pointing to all of the properties of the input object.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetMethods(System.Type,System.Int32@)">
      <summary>Get the (non-constructor) methods of a specified type.</summary>
      <param name="typeToAnalyse">Type to analyze.</param>
      <param name="maximumVariation">Returns the maximum variation available, or -1 if no method is available.</param>
      <returns>Returns the list of methods for this type.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetNotImplementingTypes(System.Type,System.Reflection.Assembly)">
      <summary>Gets an IEnumerable of Type which contains all the Types which don't implement a given Type.</summary>
      <param name="type">The type to search for.</param>
      <param name="assembly">Assembly to search in.</param>
      <returns>The Types which don't implement type.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.HasPrimitiveConstructors(System.Type)">
      <summary>Determines whether any of the constructors of a given type only have primitive type parameters or are empty.</summary>
      <param name="type">The type whose constructors should be found.</param>
      <returns>A list of <see cref="T:System.Reflection.ConstructorInfo" /> representing all of the "primitive" constructors.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.PrimitveConstructors(System.Type)">
      <summary>Finds all the constructors of a given type that only have primitive type parameters or are empty.</summary>
      <param name="type">The type whose constructors should be found.</param>
      <returns>A list of <see cref="T:System.Reflection.ConstructorInfo" /> representing all of the "primitive" constructors.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.CreateEmptyType(System.Type)">
      <summary>Creates and empty instance of the given type if possible.</summary>
      <param name="type">The type to create.</param>
      <returns>An instance of the type if its creation was possible, otherwise null.</returns>
    </member>
    <member name="F:HAL.Utilities.HAL_Utilities.PresetConstructors">
      <summary>Custom constructors for creating objects with complex constructors.</summary>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.IsPrimitiveOnly(System.Reflection.MethodBase)">
      <summary>Determines whether a method has none or only primitive system type parameters.</summary>
      <param name="method">The method to test.</param>
      <returns>Whether the method has no parameters or they are all primitive. <c>false</c> otherwise.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetConstructors(System.Type)">
      <summary>Get the constructors of a specified type.</summary>
      <param name="typeToAnalyse">Type to analyze.</param>
      <returns>Returns the list of constructors for this type, leaving out any constructor using the same type as argument.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetMethod(System.Type,System.Boolean,System.String,System.Collections.Generic.List{System.Type},System.Boolean)">
      <summary>Retrieves a method from its declaring type and signature.</summary>
      <param name="type">Declaring type of the method.</param>
      <param name="isConstructor">If true, will look for a constructor method.</param>
      <param name="name">Method name.</param>
      <param name="signature">Method signature.</param>
      <param name="strict">If true, returns only a strictly equivalent method, if any.</param>
      <returns>Closest method, null if no corresponding method is found.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.MergeWith``1(``0,``0)">
      <summary>Merges all the null or empty properties of an initial instance with those of a second.</summary>
      <typeparam name="T">The type of object to be merged.</typeparam>
      <param name="primary">The target.</param>
      <param name="secondary">The source.</param>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.IsNotNull(System.Object)">
      <summary>Determines whether the given object is not null.</summary>
      <param name="obj">The object to test.</param>
      <returns>Whether the object is not null.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.GetAllAlerts(HAL.Alerts.IAlertEmitter)">
      <summary>Recursively collects all of the alerts of a given source object and its properties.</summary>
      <param name="source">The object whose properties are to be collected.</param>
      <returns>A new <see cref="T:HAL.Alerts.AlertRegistry" /> with the alerts of the source object and all its alert capable properties.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.CastTo``2(``0@,``1)">
      <summary>Cast from a type to another.</summary>
      <typeparam name="T">Target type.</typeparam>
      <typeparam name="TO">Origin type.</typeparam>
      <param name="result">Resulting variable in the target type.</param>
      <param name="value">Value in the origin type.</param>
      <returns>Whether the cast was successful.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.DeepClone``1(``0)">
      <summary>Creates a deep cloned copy of a serializable object.</summary>
      <typeparam name="T">Object type.</typeparam>
      <param name="source">The object to be cloned.</param>
      <returns>A deep copy of the source object.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.IsCastableTo(System.Type,System.Type)">
      <summary>Checks whether a type is castable to another. That is to say the class to be cast to inherits from the initial type or an implicit or explicit operator is defined.</summary>
      <param name="from">The type to be cast.</param>
      <param name="to">The type to be cast to.</param>
      <returns>Whether the cast was successful.</returns>
    </member>
    <member name="M:HAL.Utilities.HAL_Utilities.IsCastOperator(System.Reflection.MethodInfo)">
      <summary>Checks whether a method is an implicit or explicit cast operator.</summary>
      <param name="methodToTest">The method info to be tested.</param>
      <returns>Whether this method is a cast operator.</returns>
    </member>
  </members>
</doc>