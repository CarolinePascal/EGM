<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.UI.WPF</name>
  </assembly>
  <members>
    <member name="T:HAL.UI.WPF.Controls.InterfaceTemplateSelector">
      <summary>Provides a data template selector which honors data templates targeting interfaces implemented by the data context.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Controls.InterfaceTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <inheritdoc />
    </member>
    <member name="T:HAL.UI.WPF.Controls.NestedUserControl">
      <summary>Nested user control, automatically setting its DataContext from its visual parent.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Controls.ProgressRing">
      <summary>Progress ring.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.ProgressRing.Body">
      <summary>Body.</summary>
    </member>
    <member name="F:HAL.UI.WPF.Controls.ProgressRing.SpeedProperty">
      <summary>Rotation speed.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.ProgressRing.Speed">
      <summary>Rotation speed.</summary>
    </member>
    <member name="F:HAL.UI.WPF.Controls.ProgressRing.ParticlesProperty">
      <summary>Ring particles.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.ProgressRing.Items">
      <summary>Number of ring particles.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Controls.PropertyGrid.EditorRegister">
      <summary>Editor register.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.EditorRegister.#ctor(Unity.IUnityContainer)">
      <summary>Creates an editor register.</summary>
      <param name="container">Parent container.</param>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.EditorRegister.Add(System.Type,System.Type[])">
      <summary>Adds an editor to the register.</summary>
      <param name="editorType">Editor type.</param>
      <param name="editedTypes">Edited types.</param>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.EditorRegister.GetEditorAlias(System.Type,System.String@)">
      <summary>Attempts to retrieve the alias of the editor mapped to a type.</summary>
      <param name="type">Type to test.</param>
      <param name="alias">Editor alias, if any.</param>
      <returns>Whether an editor was found.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.EditorRegister.GetEditorTemplate(System.Type)">
      <summary>Attempts to retrieve the template of the editor mapped to a type.</summary>
      <param name="type">Type to test.</param>
      <returns>Matching template.</returns>
    </member>
    <member name="T:HAL.UI.WPF.Controls.PropertyGrid.IPropertyEditor">
      <summary> Qualifies a property editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.PropertyGrid.IPropertyEditor.Property">
      <summary>Edited property.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.PropertyGrid.IPropertyEditor.ViewModel">
      <summary>Editor view model.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditor">
      <summary>Property editor use control.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditor.#ctor">
      <summary>Creates a new property editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditor.ViewModel">
      <summary>Editor view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditor.Property">
      <summary>Edited property.</summary>
    </member>
    <member name="F:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditor.PropertyProperty">
      <summary>Edited property.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditor.ResolveEditor(Xceed.Wpf.Toolkit.PropertyGrid.PropertyItem)">
      <summary>Called by the property grid when an <see cref="T:System.ComponentModel.EditorAttribute" /> is specified on a property.</summary>
      <param name="propertyItem">Wrapped property.</param>
    </member>
    <member name="T:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditorRegister">
      <summary>Property editor register.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditorRegister.Item(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditorRegister.TryGetEditorTemplate(System.Type,System.Object@)">
      <summary>Attempts to retrieve the editor template for a given type.</summary>
      <param name="type">Type to analyze.</param>
      <param name="template">Editor template.</param>
      <returns>Whether an editor template was found.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.PropertyEditorRegister.Add(System.Type,System.Type[])">
      <summary>Adds an editor to the register.</summary>
      <param name="editorType">Editor type.</param>
      <param name="editedTypes">Edited types.</param>
    </member>
    <member name="T:HAL.UI.WPF.Controls.PropertyGrid.Editors.V_ItemEditor">
      <summary>
            V_ItemEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Controls.PropertyGrid.Editors.V_ItemEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Controls.UserControlHelpers.UseParentControlRegionManager(System.Windows.Controls.UserControl)">
      <summary>Enables a user control to retrieve and use its visual parent <see cref="T:HAL.UI.Composition.IExtendedRegionManager" />.</summary>
      <param name="control">Control.</param>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_Add">
      <summary>Number to added number converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_BitmapToImage">
      <summary>Converts a bitmap to an image.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_BoolToInverseBool">
      <summary>Boolean to inverted boolean converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_BoolToString">
      <summary>Boolean to string converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_BoolToVisibility">
      <summary>Bool to visibility converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_InverseBoolToVisibility">
      <summary>Inverse bool to visibility converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_Multiply">
      <summary>Number to multiplied number converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_NullToBool">
      <summary>Null to boolean converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_InverseNullToBool">
      <summary>Null to boolean converter.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_NullToVisibility">
      <summary>Converts a null variable to visibility.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_InverseNullToVisibility">
      <summary>Converts a null variable to visibility.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_PathToImage">
      <summary>Converts a path to an image or a vectorial drawing in a viewbox.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Converters.CVRT_PathToImage.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Not used.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_StringToLower">
      <summary>Converts a string to lower case.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_StringToUpper">
      <summary>Converts a string to upper case.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Converters.CVRT_ToolTipFormatter">
      <summary>Maintains the homogeneous formatting of all tool-tips.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Helpers.VisualTreeHelpers.GetDataTemplate(System.Type,System.Windows.DependencyObject)">
      <summary>Retrieves the <see cref="T:System.Windows.DataTemplate" /> associated with a specified <see cref="T:System.Type" />.</summary>
      <param name="type">Type to analyze.</param>
      <param name="container">Visual container.</param>
      <returns>Data template.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Helpers.VisualTreeHelpers.GetClosestVisualParent(System.Windows.DependencyObject)">
      <summary>Retrieves the closest visual parent of a <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="object">Object to be analyzed.</param>
      <returns>Closest visual parent.</returns>
    </member>
    <member name="T:HAL.UI.WPF.Interactivity.AlertConfirmation">
      <summary>Alert confirmation.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.AlertConfirmation.#ctor(HAL.Alerts.Alert)">
      <summary>Creates a new alert confirmation.</summary>
      <param name="alert">Alert to be confirmed.</param>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.AlertConfirmation.#ctor(System.String,System.String)">
      <summary>Creates a new alert confirmation.</summary>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.AlertConfirmation.IsConfirmed">
      <summary>Whether the notification is confirmed.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.AlertConfirmation.Confirmed">
      <summary>Whether the notification is confirmed.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Interactivity.AlertNotification">
      <summary>Alert notification.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.AlertNotification.#ctor(HAL.Alerts.Alert)">
      <summary>Creates a new alert notification.</summary>
      <param name="alert">Alert to be displayed.</param>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.AlertNotification.#ctor(System.String,System.String)">
      <summary>Creates a new alert notification.</summary>
      <param name="title">Alert title.</param>
      <param name="message">Alert message.</param>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.AlertNotification.Alert">
      <summary>Inner alert.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.AlertNotification.Title">
      <summary>Notification title.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.AlertNotification.Message">
      <summary>Notification message.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.AlertNotification.Content">
      <summary>Notification content.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Interactivity.ExtendedPopupAction">
      <summary>Popup action, to be used wrapped by a <see cref="T:Prism.Interactivity.InteractionRequest.InteractionRequestTrigger" /> from WPF.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.ExtendedPopupAction.#ctor">
      <summary>Creates a new popup action.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.ExtendedPopupAction.CreateDefaultWindow(Prism.Interactivity.InteractionRequest.INotification)">
      <summary>Called when a popup must be emitted to display default IConfirmation and INotification implementations.</summary>
      <param name="notification">The INotification or IConfirmation parameter to show.</param>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.ExtendedPopupAction.CreateWindow">
      <summary>Called when a popup must be emitted to display a custom notification.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Interactivity.NotificationService">
      <summary>Notification service based on Prism notifications.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.NotificationService.NotificationRequest">
      <summary>Notification interaction manager.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.NotificationService.ConfirmationRequest">
      <summary>Confirmation interaction manager.,</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.NotificationService.Notify(HAL.UI.Interactivity.IUserNotification,System.Action{HAL.UI.Interactivity.IUserNotification})">
      <summary>Notifies the user of an alert.</summary>
      <param name="notification">Notification to be shown to the user.</param>
      <param name="callback">Callback method invoked once the notification is acknowledged.</param>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.NotificationService.Confirm(HAL.UI.Interactivity.IUserConfirmation,System.Action{HAL.UI.Interactivity.IUserConfirmation})">
      <summary>Asks the user to confirm an alert.</summary>
      <param name="confirmation">Confirmation to be shown to the user.</param>
      <param name="callback">Callback method invoked once the confirmation is processed.</param>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.NotificationService.CreatePopUp(HAL.UI.Interactivity.IUserNotification)">
      <summary>Called when a popup must be emitted to display confirmations and notifications.</summary>
      <param name="notification">The INotification or IConfirmation parameter to show.</param>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.NotificationService.CreateWindow">
      <summary>Called when a popup must be emitted to display a custom notification.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Interactivity.UserConfirmation">
      <summary>Notification shown to the user for confirmation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.UserConfirmation.IsConfirmed">
      <summary>Whether the notification is confirmed.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Interactivity.UserNotification">
      <summary>Notification shown to the user for acknowledgment.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.UserNotification.#ctor">
      <summary>Creates an empty notification.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Interactivity.UserNotification.#ctor(System.String,System.String)">
      <summary>Creates a new user notification.</summary>
      <param name="title">Title.</param>
      <param name="message">Message.</param>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.UserNotification.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.UserNotification.Content">
      <summary>Gets or sets the content of the notification.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Interactivity.UserNotification.Message">
      <summary>Notification message.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Reflection.UIAssemblyContent">
      <summary>Assembly content with support of UI-related attribute reflection.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.UIAssemblyContent.#ctor(System.Reflection.Assembly)">
      <summary>Creates reflected assembly information.</summary>
      <param name="assembly">Target assembly.</param>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.UIAssemblyContent.ThreadSafeRegister(System.Type)">
      <summary>Registers the specified type from the client main thread.</summary>
      <param name="type">Type to register.</param>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.UIAssemblyContent.InterpretTypeAttributes(System.Type,System.Attribute[])">
      <inheritdoc />
    </member>
    <member name="T:HAL.UI.WPF.Reflection.UIContentManager">
      <summary>Content manager with view and view model registration features.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.UIContentManager.ViewModelResolvers">
      <summary>View model type resolvers, specifying view model naming conventions to look for.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.UIContentManager.ViewViewModelMatchCache">
      <summary>Maintains matching view and view model types.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.UIContentManager.ViewModelViewMatchCache">
      <summary>Maintains matching view model and view types.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.UIContentManager.GetAssemblyContent(System.Reflection.Assembly)">
      <inheritdoc />
    </member>
    <member name="M:HAL.UI.WPF.Reflection.UIContentManager.ResolveViewModel(System.Type)">
      <summary>Attempts to find a view model type matching a given view type.</summary>
      <param name="viewType">View type to match.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.UIContentManager.ResolveView(System.Type)">
      <summary>Attempts to find a view type matching a given view model type.</summary>
      <param name="viewModelType">View model type to match.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="T:HAL.UI.WPF.Reflection.ViewModelTypeResolver">
      <summary>View model type resolver.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.ViewModelTypeResolver.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Creates a view model type resolver.</summary>
      <param name="viewModelPrefix">Prefix to be attached before the view name.</param>
      <param name="viewModelSuffix">Suffix to be attached after the view name.</param>
      <param name="viewPrefix">Prefix of the view name.</param>
      <param name="viewSuffix">Suffix of the view name.</param>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.ViewModelTypeResolver.ViewModelPrefix">
      <summary>Prefix to be attached before the view name.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.ViewModelTypeResolver.ViewPrefix">
      <summary>Prefix of the view name.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.ViewModelTypeResolver.ViewModelSuffix">
      <summary>Suffix to be attached after the view name.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Reflection.ViewModelTypeResolver.ViewSuffix">
      <summary>Suffix of the view name.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.ViewModelTypeResolver.Resolve(System.String)">
      <summary>Attempts to resolve the view model type from a specified view type name.</summary>
      <param name="viewTypeName">View type name.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Reflection.ViewModelTypeResolver.ResolveBack(System.String)">
      <summary>Attempts to resolve the view type from a specified view model type name.</summary>
      <param name="viewModelTypeName">View model type name.</param>
      <returns>Matching type, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.SetScopedRegionManager(System.Object)">
      <summary>Creates a scoped region manager from this one, and assigns it to the specified target object.</summary>
      <param name="target">Target object.</param>
      <returns>Resulting scoped region manager.</returns>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.SetTo(System.Object)">
      <summary>Assigns this region manager to the specified target object.</summary>
      <param name="target">Target object.</param>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.GetRegion(System.String)">
      <summary>Retrieves a region from its name.</summary>
      <param name="regionName">Region name.</param>
      <returns>Matching region, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.RegisterViewWithRegion(System.Type,System.String)">
      <summary>Associates a view with a region.</summary>
      <param name="regionName">Region name to associate the view with.</param>
      <param name="viewType">View type.</param>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.RegisterViewWithRegion``1(System.String)">
      <summary>Associates a view with a region.</summary>
      <typeparam name="T">View type.</typeparam>
      <param name="regionName">Region name to associate the view with.</param>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.GetRegionManager(System.Windows.FrameworkElement)">
      <summary>Retrieves the region manager associated with a specified target object.</summary>
      <param name="target">Target object.</param>
      <returns>Retrieved region manager.</returns>
    </member>
    <member name="M:HAL.UI.WPF.RegionManagers.ExtendedRegionManager.GetRegionManager(HAL.UI.Shells.IShell)">
      <summary>Retrieves the region manager associated with a specified target object.</summary>
      <param name="target">Target object.</param>
      <returns>Retrieved region manager.</returns>
    </member>
    <member name="T:HAL.UI.WPF.Compatibility.DynamicModuleCatalog">
      <summary>Custom module catalog facilitating the loading of HAL extension modules at runtime.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Compatibility.DynamicModuleCatalog.ModulePath">
      <summary>Directory containing modules to search for.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Compatibility.DynamicModuleCatalog.InnerLoad">
      <summary>Drives the main logic of building the child domain and searching for the assemblies.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Compatibility.DynamicModuleCatalog.BuildChildDomain(System.AppDomain)">
      <summary>Creates a new child domain and copies the evidence from a parent domain.</summary>
      <param name="parentDomain">The parent domain.</param>
      <returns>The new child domain.</returns>
      <remarks>
            Grabs the <paramref name="parentDomain" /> evidence and uses it to construct the new
            <see cref="T:System.AppDomain" /> because in a ClickOnce execution environment, creating an
            <see cref="T:System.AppDomain" /> will by default pick up the partial trust environment of 
            the AppLaunch.exe, which was the root executable. The AppLaunch.exe does a 
            create domain and applies the evidence from the ClickOnce manifests to 
            create the domain that the application is actually executing in. This will 
            need to be Full Trust for Composite Application Library applications.
            </remarks>
      <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException" /> is thrown if <paramref name="parentDomain" /> is null.</exception>
    </member>
    <member name="M:HAL.UI.WPF.Compatibility.DynamicModuleCatalog.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Adds a range of items to a collection.</summary>
      <typeparam name="T">Type of objects within the collection.</typeparam>
      <param name="collection">The collection to add items to.</param>
      <param name="items">The items to add to the collection.</param>
      <returns>The collection.</returns>
      <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException" /> is thrown if <paramref name="collection" /> or <paramref name="items" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:HAL.UI.WPF.Runtime.ResourceMapper">
      <summary>Maintains the relation between HAL content and associated resource files.</summary>
    </member>
    <member name="F:HAL.UI.WPF.Runtime.ResourceMapper.ResourceManagers">
      <summary>Resource managers.</summary>
    </member>
    <member name="F:HAL.UI.WPF.Runtime.ResourceMapper.Bitmaps">
      <summary>Maintains bitmaps associated with identifiers.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.Register(System.String,System.Reflection.Assembly)">
      <summary>Registers resources.</summary>
      <param name="resourceFileName">Resource file base name (without .resource extension).</param>
      <param name="assembly">Resource file assembly.</param>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.Register(System.Type)">
      <summary>Registers resources.</summary>
      <param name="resources">Resource container type.</param>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.RegisterBitmap(System.Guid,System.Drawing.Bitmap)">
      <summary>Associates a bitmap with a specified identity.</summary>
      <param name="id">Identity.</param>
      <param name="bitmap">Icon.</param>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.RetrieveBitmap(HAL.Reflection.IIdentifiableSignature)">
      <summary>Attempts to retrieve the bitmap associated to a <see cref="T:HAL.Reflection.IIdentifiableSignature" />.</summary>
      <param name="signature">Signature.</param>
      <returns>Corresponding bitmap, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.RetrieveBitmap(System.Guid)">
      <summary>Attempts to retrieve the bitmap associated to a <see cref="T:System.Guid" />.</summary>
      <param name="id">Identity.</param>
      <returns>Corresponding bitmap, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.RetrieveIcon(HAL.Reflection.IIdentifiableSignature)">
      <summary>Attempts to retrieve the bitmap icon associated to a <see cref="T:HAL.Reflection.IIdentifiableSignature" />.</summary>
      <param name="signature">
        <see cref="T:HAL.Reflection.IIdentifiableSignature" /> referencing this icon.</param>
      <returns>Corresponding bitmap icon, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.ResourceMapper.RetrieveIcon(System.String,System.Nullable{System.Guid})">
      <summary>Attempts to retrieve a bitmap icon from its alias.</summary>
      <param name="alias">Icon alias.</param>
      <param name="id">Identity of the object referencing this icon.</param>
      <returns>Corresponding bitmap icon, if any.</returns>
    </member>
    <member name="T:HAL.UI.WPF.Runtime.UIClient">
      <summary>Base implementation of a client with a user interface.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.ContentManagerType">
      <inheritdoc />
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.Container">
      <inheritdoc />
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.Editors">
      <summary>Editors.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.PropertyEditors">
      <summary>Property editors.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.Shell">
      <summary>Main client shell.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.NotificationService">
      <summary>Notification service.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.ShellService">
      <summary>Notification service.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.PropertyEditorRegister">
      <summary>Property editor register.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.EditorRegister">
      <summary>Editor register.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Runtime.UIClient.Resources">
      <summary>Notification service.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.RunOnClientThread``1(System.Func{``0})">
      <summary>Runs a function on the client thread.</summary>
      <param name="function">Function to be invoked.</param>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.InitializeContainer">
      <inheritdoc />
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.LoadDependencies">
      <inheritdoc />
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.LoadExtensions">
      <summary>Loads client extensions.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.InitializeUserInterface">
      <summary>Initializes the client user interface.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.RegisterRequiredTypes">
      <summary>Registers all types that are required by Prism to function with the container.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.ConfigureViewModelLocator">
      <summary>Configures the view model locator.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.ConfigureServiceLocator">
      <summary>Configures the locator provider for the <see cref="T:CommonServiceLocator.ServiceLocator" />.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.RegisterCustomExceptions">
      <summary>Registers the <see cref="T:System.Type" />s of the Exceptions that are not considered root exceptions by the <see cref="T:System.ExceptionExtensions" />.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.ConfigureRegionAdapterMappings(Prism.Regions.RegionAdapterMappings)">
      <summary>
            Configures the default region adapter mappings to use in the application, in order
            to adapt UI controls defined in XAML to use a region and register it automatically.
            May be overwritten in a derived class to add specific mappings required by the application.
            </summary>
      <returns>The <see cref="T:Prism.Regions.RegionAdapterMappings" /> instance containing all the mappings.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.ConfigureDefaultRegionBehaviors(Prism.Regions.IRegionBehaviorFactory)">
      <summary>Configures the <see cref="T:Prism.Regions.IRegionBehaviorFactory" />. This will be the list of default behaviors that will be added to a region.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.InitializeGraphicalResources">
      <summary>Initializes the UI resources.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.CreateShell">
      <summary>Creates the main shell of the application.</summary>
      <returns>The shell of the application.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.InitializeShell(HAL.UI.Shells.IShell)">
      <summary>Initializes the main shell.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.Notify(HAL.UI.Interactivity.IUserNotification,System.Action{HAL.UI.Interactivity.IUserNotification})">
      <summary>Notifies the user of an alert.</summary>
      <param name="notification">Notification to be shown to the user.</param>
      <param name="callback">Callback method invoked once the notification is acknowledged.</param>
    </member>
    <member name="M:HAL.UI.WPF.Runtime.UIClient.Confirm(HAL.UI.Interactivity.IUserConfirmation,System.Action{HAL.UI.Interactivity.IUserConfirmation})">
      <summary>Asks the user to confirm an alert.</summary>
      <param name="confirmation">Confirmation to be shown to the user.</param>
      <param name="callback">Callback method invoked once the confirmation is processed.</param>
    </member>
    <member name="T:HAL.UI.WPF.ShellModels.SM_Authentication">
      <summary>Authentication shell model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ShellModels.SM_Authentication.#ctor">
      <summary>Creates a default shell view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.Email">
      <summary>The email address to login.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.Password">
      <summary>The password login.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.RememberMe">
      <summary>Whether the user will be kept logged in.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.SecurePassword">
      <summary>Encrypted password.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.IsBusy">
      <summary>Indicates that the control is awaiting work that may take some time.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.ErrorMessage">
      <summary>Error message to display to the user.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.ConnectCommand">
      <summary>Connects the user.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Authentication.RegisterCommand">
      <summary>Directs the user to a page to register for the framework.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ShellModels.SM_Default">
      <summary>Default shell view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ShellModels.SM_Default.RegionManager">
      <summary>Shell region manager.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ShellModels.SM_Default.OpenShell(System.String)">
      <summary>Opens a new shell on a specified view.</summary>
      <param name="viewName">Specified view.</param>
    </member>
    <member name="M:HAL.UI.WPF.ShellModels.SM_Default.Navigate(System.String)">
      <summary>Navigates to the specified view.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Shells.Authentication.S_Authentication">
      <summary>
            S_Authentication
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Authentication.S_Authentication.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Shells.Interactivity.S_Confirmation">
      <summary>
            S_Confirmation
            </summary>
    </member>
    <member name="P:HAL.UI.WPF.Shells.Interactivity.S_Confirmation.Confirmation">
      <summary>Sets or gets the <see cref="T:HAL.UI.Interactivity.IUserConfirmation" /> shown by this window.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Interactivity.S_Confirmation.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Shells.Interactivity.S_Notification">
      <summary>
            S_Notification
            </summary>
    </member>
    <member name="P:HAL.UI.WPF.Shells.Interactivity.S_Notification.Notification">
      <summary>Sets or gets the <see cref="T:Prism.Interactivity.InteractionRequest.INotification" /> shown by this shell.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Interactivity.S_Notification.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Shells.Shell">
      <summary>Shell.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Shells.Shell.AutoSize">
      <summary>(De)activates the ability of this window to resize itself based on its content.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Shell.GetScreen">
      <summary>Parent screen.</summary>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Shell.OnStateChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Shell.TryGetRegionViewModel(System.String)">
      <summary>Attempts to retrieve the view model associated with the specified scoped region. If the region has multiple active views, the first view will be analyzed.</summary>
      <param name="regionName">Target region name.</param>
      <returns>Corresponding view model, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.Shells.Shell.ToggleFullScreen(System.Nullable{System.Boolean})">
      <summary>Toggles the shell full screen.</summary>
      <param name="hint">Whether the shell should be in full screen. Leave null to simply toggle the current value.</param>
    </member>
    <member name="P:HAL.UI.WPF.Shells.Shell.RedoCommand">
      <summary>Redo command.</summary>
    </member>
    <member name="P:HAL.UI.WPF.Shells.Shell.UndoCommand">
      <summary>Undo command.</summary>
    </member>
    <member name="T:HAL.UI.WPF.Shells.S_Default">
      <summary>
            S_Default
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Shells.S_Default.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.CatalogItemSelectionArguments">
      <summary>Catalog item selection event arguments.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.CatalogItemSelectionArguments.#ctor(HAL.UI.ViewModels.Catalog.VM_CatalogItem,System.String[])">
      <summary>Creates catalog item selection event arguments.</summary>
      <param name="item">Selected item.</param>
      <param name="tags">Research tags which led to the selection of the item.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.CatalogItemSelectionArguments.Item">
      <summary>Selected catalog item.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.CatalogItemSelectionArguments.Tags">
      <summary>Research tags which led to the selection of this item.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.IVM_Catalog">
      <summary>Qualifies a catalog view model.</summary>
    </member>
    <member name="E:HAL.UI.WPF.ViewModels.Catalogs.IVM_Catalog.ItemSelected">
      <summary>Raised when the selection of an item is confirmed.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.IVM_Catalog.ClearItemSelectedSubscriptions">
      <summary>Removes any subscription to <see cref="E:HAL.UI.WPF.ViewModels.Catalogs.IVM_Catalog.ItemSelected" />.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.IVM_Catalog.SelectTag(System.String,System.Boolean,System.Int32,System.Boolean)">
      <summary>Attempts to select a tag from a string hint.</summary>
      <param name="tag">Tag.</param>
      <param name="strict">Whether the tag name should be strictly identical to the specified hint.</param>
      <param name="tolerance">If strict = false: if &gt; 0, number of allowed deviating characters. Unlimited otherwise.</param>
      <param name="hide">Whether the matching tag should be hidden.</param>
      <returns>Selected tags, if any.</returns>
    </member>
    <member name="E:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.ItemSelected">
      <summary>Raised when the selection of an item is confirmed.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.ClearItemSelectedSubscriptions">
      <summary>Removes any subscription to <see cref="E:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.ItemSelected" />.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.Selected">
      <summary>Selected item.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.SelectedTags">
      <summary>Currently selected tags.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.IsLoadingInProgress">
      <summary>Whether the loading of the selected catalog item is currently in progress. </summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.IsOnlineRepositoryAccessible">
      <summary>Whether the on-line content repository is accessible.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.SelectTag(System.String,System.Boolean,System.Int32,System.Boolean)">
      <summary>Attempts to select a tag from a string hint.</summary>
      <param name="tag">Tag.</param>
      <param name="strict">Whether the tag name should be strictly identical to the specified hint.</param>
      <param name="tolerance">If strict = false: if &gt; 0, number of allowed deviating characters. Unlimited otherwise.</param>
      <param name="hide">Whether the matching tag should be hidden.</param>
      <returns>Selected tags, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog.ValidateSelection(HAL.UI.Shells.IShell)">
      <summary>Validates the current selection.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2">
      <summary>Base catalog view model implementation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.Content">
      <summary>Catalog content.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.Tags">
      <summary>Available tags.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.Search">
      <summary>Search bar.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.SelectableContentView">
      <summary>Displays selectable items.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.SelectableTagsView">
      <summary>Displays selectable tags.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.SelectedTagsView">
      <summary>Displays selectable tags.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.ValidateSelectionCommand">
      <summary>Triggers the removal of this tag from the collection of currently selected tags.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.DeselectTagCommand">
      <summary>Triggers the removal of this tag from the collection of currently selected tags.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.SelectTagCommand">
      <summary>Triggers the selection of this tag from the collection of currently available tags.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.SelectTag(System.String,System.Boolean,System.Int32,System.Boolean)">
      <summary>Attempts to select a tag from a string hint.</summary>
      <param name="tag">Tag.</param>
      <param name="strict">Whether the tag name should be strictly identical to the specified hint.</param>
      <param name="tolerance">If strict = false: if &gt; 0, number of allowed deviating characters. Unlimited otherwise.</param>
      <param name="hide">Whether the matching tag should be hidden.</param>
      <returns>Selected tags, if any.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_Catalog`2.Refresh">
      <summary>Refreshes the catalog browser.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.VM_CatalogSettings`2">
      <summary>Base catalog settings view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_CatalogSettings`2.Catalog">
      <summary>Repositories.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Catalogs.VM_CatalogSettings`2.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.VM_ControllerCatalog">
      <summary>Controller catalog view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_ControllerCatalog.#ctor">
      <summary>Creates a new controller catalog view model.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.VM_MechanismCatalog">
      <summary>Mechanism catalog view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_MechanismCatalog.#ctor">
      <summary>Creates a new mechanism catalog view model.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.VM_PartCatalog">
      <summary>Part catalog view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_PartCatalog.#ctor">
      <summary>Creates a new part catalog view model.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Catalogs.VM_ProcedureCatalog">
      <summary>Procedure catalog view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Catalogs.VM_ProcedureCatalog.#ctor">
      <summary>Creates a new procedure catalog view model.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Configuration.VM_About">
      <summary>About menu view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Configuration.VM_About.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Function.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionBrowser">
      <summary>Function browser view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionBrowser.#ctor">
      <summary>Creates a new function browser view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionBrowser.Categories">
      <summary>Categories.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionCategory">
      <summary>Creates a new function category view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionCategory.#ctor(HAL.Reflection.FunctionCategory)">
      <summary>Creates a new function category view model.</summary>
      <param name="category">Wrapped category.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionCategory.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSet">
      <summary>Function set view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSet.#ctor(HAL.Reflection.FunctionSet)">
      <summary>Creates a new function set view model.</summary>
      <param name="set">Wrapped function set.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSet.Functions">
      <summary>Function sets.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSet.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSubcategory">
      <summary>Function subcategory view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSubcategory.#ctor(HAL.Reflection.FunctionSubcategory)">
      <summary>Creates a new function subcategory view model.</summary>
      <param name="subcategory">Wrapped subcategory.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSubcategory.Suites">
      <summary>Function suites.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSubcategory.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSuite">
      <summary>Function suite view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSuite.#ctor(HAL.Reflection.FunctionSuite)">
      <summary>Creates a new function suite view model.</summary>
      <param name="suite">Wrapped function suite.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSuite.Sets">
      <summary>Function sets.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_FunctionSuite.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_IdentifiableSignatureBase`1">
      <summary>Base implementation of an <see cref="T:HAL.Reflection.IIdentifiableSignature" /> view model</summary>
      <typeparam name="T">Signature type.</typeparam>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_IdentifiableSignatureBase`1.#ctor(`0)">
      <summary>Creates a new signature view model.</summary>
      <param name="signature">Wrapped signature.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_IdentifiableSignatureBase`1.Id">
      <summary>Identity.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_IdentifiableSignatureBase`1.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.#ctor(HAL.Reflection.ParameterSignature)">
      <summary>Creates a new signature view model.</summary>
      <param name="signature">Wrapped signature.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.HasDefault">
      <summary>Whether this parameter has a default value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.Default">
      <summary>Parameter default value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.Type">
      <summary>Parameter type.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.IsOutput">
      <summary>Whether this parameter is an output.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_Parameter.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1">
      <summary>Base implementation of an <see cref="T:HAL.Reflection.ISignature" /> view model</summary>
      <typeparam name="T">Signature type.</typeparam>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.#ctor(`0)">
      <summary>Creates a new signature view model.</summary>
      <param name="signature">Wrapped signature.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.Signature">
      <summary>Wrapped signature.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.Name">
      <summary>Name.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.Nickname">
      <summary>Nickname.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.Description">
      <summary>Description.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.Order">
      <summary>Order.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.Icon">
      <summary>Icon.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.Functions.VM_SignatureBase`1.ToMarkdown(System.String)">
      <summary>Extract a markdown representation from this signature.</summary>
      <param name="prefix">Prefix.</param>
      <returns>Resulting markdown.</returns>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.NestedSettingsMockup.Alias">
      <summary>Settings alias.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.NestedSettingsMockup.Description">
      <summary>Settings description.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.NestedSettingsMockup.InnerSettings">
      <summary>Inner settings.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.NestedSettingsMockup.GetNestedItems">
      <summary>Retrieves items nested in this one.</summary>
      <returns>Nested items, if any.</returns>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.Byte">
      <summary>(Unsigned) byte documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.ReadOnlyByte">
      <summary>Read-only byte documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.SByte">
      <summary>S-Byte documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.UShort">
      <summary>Unsigned short documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.Short">
      <summary>Signed short documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.UInt">
      <summary>Unsigned integer documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.Int">
      <summary>Integer documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.ULong">
      <summary>Unsigned long documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.Float">
      <summary>Long documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.Double">
      <summary>Unsigned long documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_NestedProperties.Decimal">
      <summary>Long documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Properties.Numbers">
      <summary>Double documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Properties.Unit">
      <summary>Unit documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Properties.Measurement">
      <summary>Measurement documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Properties.OptionalMeasurement">
      <summary>Measurement documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Properties.ReadOnlyMeasurement">
      <summary>Measurement documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Properties.ProportionalMeasurement">
      <summary>Proportional measurement documentation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Tab.Alias">
      <summary>Settings alias.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Debugging.VM_Tab.Description">
      <summary>Settings description.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.VM_Tab.WrapNestedObjects">
      <summary>Wrap nested objects.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.VM_TabControl.Wrap">
      <summary>Wraps the specified collection.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.VM_TabControl.InitializeNestedEditor(System.Object)">
      <summary>Initializes the nested editor.</summary>
      <param name="edited">Edited object.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Debugging.VM_TabControl.SetNestedEditorContext(Prism.Regions.Region,System.Object)">
      <summary>Sets the nested editor context.</summary>
      <param name="editorRegion">Nested editor region.</param>
      <param name="edited">Edited object.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.EditorDataTemplateSelector">
      <summary>Selects an editor data-template matching a type to be edited.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.EditorDataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate" /> based on custom logic.</summary>
      <param name="item">The data object for which to select the template.</param>
      <param name="container">The data-bound object.</param>
      <returns>Returns a <see cref="T:System.Windows.DataTemplate" /> or <see langword="null" />. The default value is <see langword="null" />.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_Action">
      <summary>Action view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_Action.Alias">
      <summary>Action alias.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_Action.IsSelected">
      <summary>Whether this action is currently selected in the editor.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_Action.WrapNestedObjects">
      <summary>Wrap nested objects.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_Action.Delete">
      <summary>Deletes this action and its inner actions from the procedure.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_ProcedureEditor">
      <summary>Procedure editor view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_ProcedureEditor.Procedure">
      <summary>Edited procedure.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.Graphs.Procedures.VM_ProcedureEditor.Wrap">
      <summary>Wraps the specified collection.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.VM_Collection">
      <summary>Editable collection view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_Collection.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_Collection.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditor">
      <summary>Collection editor view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditor.Wrap">
      <summary>Wraps the specified collection.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditor.OnNestedEditorPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Called when the nested editor is updated.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditor.Validate(HAL.UI.Shells.IShell)">
      <summary>Called when the OK button is pressed.</summary>
      <param name="shell">Parent shell.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase">
      <summary>Base implementation of a collection editor view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.Items">
      <summary>Collection items</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.SelectedIndex">
      <summary>Selected index.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.SelectedItem">
      <summary>Selected item.</summary>
    </member>
    <member name="F:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.Collection">
      <summary>Edited collection.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.ItemType">
      <summary>Item type.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.ItemConstructor">
      <summary>Item constructor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.IsCollectionEditable">
      <summary>Whether items can be added to this collection.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.AddItemCommand">
      <summary>Triggers the addition of an item.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.RemoveItemCommand">
      <summary>Triggers the removal of an item.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.GetConstructor">
      <summary>Retrieves the construction method to be invoked when a new item is added to the collection.</summary>
      <returns>Method.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.OnEditedObjectSet">
      <summary>Called when the edited object changes.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.Wrap">
      <summary>Wraps the specified collection.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.SetNestedEditorContext(Prism.Regions.Region,System.Object)">
      <summary>Sets the nested editor context.</summary>
      <param name="editorRegion">Nested editor region.</param>
      <param name="edited">Edited object.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.AddItem">
      <summary>Adds an item to the collection.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_CollectionEditorBase.RemoveItem(System.Object)">
      <summary>Removes an item from the collection.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedCollectionEditorBase">
      <summary>Base implementation of a nested collection editor.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObject">
      <summary>Nested object view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObject.WrapNestedObjects">
      <summary>Wrap nested objects.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObject.Delete">
      <summary>Deletes this action and its inner actions from the procedure.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase">
      <summary>Base implementation of a nested object view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.Wrapped">
      <summary>Wrapped action.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.Parent">
      <summary>Parent action.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.NestedCollectionEditor">
      <summary>Parent procedure editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.NestedItems">
      <summary>Nested items.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.CanExpand">
      <summary>Whether this action can be expanded.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.IsVisible">
      <summary>Whether this action is visible in the editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.IsSelected">
      <summary>Whether this action is currently selected in the editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.DeleteCommand">
      <summary>Triggers the deletion of this action and its inner actions in the procedure editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.DuplicateCommand">
      <summary>Triggers the duplication of this action and its inner actions in the procedure editor.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.WrapNestedObjects">
      <summary>Wrap nested objects.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.Delete">
      <summary>Deletes this action and its inner actions from the procedure.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Collections.VM_NestedObjectBase.Duplicate(System.Nullable{System.Int32})">
      <summary>Duplicates this action a specified number of times.</summary>
      <param name="duplications">Number of duplications.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Boolean">
      <summary>Editable boolean view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Boolean.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum">
      <summary>Editable enumeration view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum.NamedValues">
      <summary>Named values.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum.SelectedValue">
      <summary>Selected value.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum.OnPropertySet">
      <summary>Called when the <see cref="P:HAL.UI.Controls.PropertyGrid.IVM_PropertyEditor.Property" /> input is set.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum.AddNamedValues(System.Type)">
      <summary>Adds enumeration fields to this parameter.</summary>
      <param name="enumerationType">Enumeration type.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Enum.Reset">
      <summary>Resets the value of the property to its initial value.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_EnumEditor">
      <summary>Enumeration editor view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_EnumEditor.NamedValues">
      <summary>Named values.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_EnumEditor.SelectedValue">
      <summary>Selected value.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_EnumEditor.OnEditedObjectSet">
      <summary>Called when the edited object changes.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_EnumEditor.AddNamedValues(System.Type)">
      <summary>Adds enumeration fields to this parameter.</summary>
      <param name="enumerationType">Enumeration type.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_EnumEditor.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number">
      <summary>Editable number view model.</summary>
    </member>
    <member name="F:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.Step">
      <summary>Stepping range.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.CanDecrease">
      <summary>Whether the current value can be decreased.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.CanIncrease">
      <summary>Whether the current value can be increased.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.DecreaseCommand">
      <summary>Triggers the decrease of the number value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.IncreaseCommand">
      <summary>Triggers the increase of the number value.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Number.Reset">
      <summary>Resets the value of the property to its initial value.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor">
      <summary>Number editor view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.#ctor">
      <summary>Creates a number editor view model.</summary>
    </member>
    <member name="F:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.Step">
      <summary>Stepping range.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.CanDecrease">
      <summary>Whether the current value can be decreased.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.CanIncrease">
      <summary>Whether the current value can be increased.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.ParseCommand">
      <summary>Triggers the parsing of the editor input.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.DecreaseCommand">
      <summary>Triggers the decrease of the number value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.IncreaseCommand">
      <summary>Triggers the increase of the number value.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.OnEditedObjectSet">
      <summary>Called when the edited object changes.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.Value">
      <summary>Property value.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_NumberEditor.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Object">
      <summary>Fall-back property editor view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_Object.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_ObjectEditor">
      <summary>Fall-back object editor view model.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_String">
      <summary>Editable string view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_String.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_StringEditor">
      <summary>String editor.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Primitives.VM_StringEditor.ParseCommand">
      <summary>Triggers the parsing of the editor input.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement">
      <summary>Editable measurement view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.Property">
      <summary>Edited property.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.Min">
      <summary>Minimum allowed value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.Max">
      <summary>Maximum allowed value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.Units">
      <summary>Unit symbols and descriptions.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.UnitProtoTypes">
      <summary>Unit prototypes.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.ConversionRatio">
      <summary>Current conversion ratio to the system unit.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.SelectedUnit">
      <summary>Selected measurement unit.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.GetAvailableUnits(System.Type)">
      <summary>Retrieves the available units for the specified measurement type.</summary>
      <param name="measurementType">Measurement type.</param>
      <returns>Whether units where found.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.GetValue">
      <summary>Retrieves the property value as a string.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_Measurement.Reset">
      <summary>Resets the value of the property to its initial value.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement">
      <summary>Editable proportional measurement view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.#ctor">
      <summary>Creates a new editable proportional measurement view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.Property">
      <summary>Edited property.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.Min">
      <summary>Minimum allowed value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.Max">
      <summary>Maximum allowed value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.ProportionalValue">
      <summary>Proportional value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.IsValueEditable">
      <summary>Whether the measurement value can be edited.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.IsProportionalValueEditable">
      <summary>Whether the proportional value can be edited.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.ParseProportionalValueCommand">
      <summary>Triggers the parsing of the proportional value.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.GetValue">
      <summary>Retrieves the property value as a string.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.ParseProportionalValue(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.Units.VM_ProportionalMeasurement.Reset">
      <summary>Resets the value of the property to its initial value.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase">
      <summary>Base implementation of an object editor view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.#ctor">
      <summary>Creates an object editor view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.EditedObject">
      <summary>Edited item.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.ShowButtons">
      <summary>Whether validation buttons should be shown, if any.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.ValidateCommand">
      <summary>Triggers the edition validation.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.CancelCommand">
      <summary>Triggers the edition canceling.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.OnEditedObjectSet">
      <summary>Called when the edited object changes.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.InitializeNestedEditor(System.Object)">
      <summary>Initializes the nested editor.</summary>
      <param name="edited">Edited object.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.SetNestedEditorContext(Prism.Regions.Region,System.Object)">
      <summary>Sets the nested editor context.</summary>
      <param name="editorRegion">Nested editor region.</param>
      <param name="edited">Edited object.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.OnNestedEditorPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Called when the nested editor is updated.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.Cancel(HAL.UI.Shells.IShell)">
      <summary>Called when the cancel button is pressed.</summary>
      <param name="shell">Parent shell.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_EditorBase.Validate(HAL.UI.Shells.IShell)">
      <summary>Called when the OK button is pressed.</summary>
      <param name="shell">Parent shell.</param>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.VM_ItemEditor">
      <summary>Item editor view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_ItemEditor.OnEditedObjectSet">
      <summary>Called when the edited object changes.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase">
      <summary>Base implementation of an editable property view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.#ctor">
      <summary>Creates a property view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.Property">
      <summary>Edited property.</summary>
    </member>
    <member name="F:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.PropertyItem">
      <summary>Property item.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.PropertyType">
      <summary>Edited property type.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.Name">
      <summary>Property name.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.Value">
      <summary>Property value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.DefaultValue">
      <summary>Default value, if any.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.IsDefault">
      <summary>Whether the current property value is the default property value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.IsEditable">
      <summary>Whether this property can be edited.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.ParseCommand">
      <summary>Triggers the parsing of the editor input.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.ResetCommand">
      <summary>Triggers the resetting of the property value.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.EditCommand">
      <summary>Triggers the extended editor opening.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.ValidateInput(System.String)">
      <summary>Validates the property editor text input.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.OnPropertySet">
      <summary>Called when the <see cref="P:HAL.UI.Controls.PropertyGrid.IVM_PropertyEditor.Property" /> input is set.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.GetValue">
      <summary>Retrieves the property value as a string.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.SetValue(System.Object)">
      <summary>Sets the property value.</summary>
      <returns>Property value as a string.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.ShowExtendedEditor">
      <summary>Displays the extended property editor.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.Parse(System.String)">
      <summary>Parses the editor text input.</summary>
      <param name="input">Input.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Editors.VM_PropertyEditorBase.Reset">
      <summary>Resets the value of the property to its initial value.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar">
      <summary>Search bar view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar.#ctor(System.Action{System.String},System.Action,System.Action{System.String},System.Action)">
      <summary>Creates a search bar view model, with filtering and selection clearing callbacks.</summary>
      <param name="parseAction"> Action to be executed to parse the search bar input. </param>
      <param name="clearAction"> Action to be executed to clear the search bar input. </param>
      <param name="typingAction"> Action to be executed during the input typing. </param>
      <param name="deleteAction"> Action to be executed when the delete key is pressed. </param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar.Input">
      <summary>Search bar input.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar.ClearCommand">
      <summary>Triggers the clearing of the search bar input.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar.DeleteCommand">
      <summary>Triggers when the delete key is pressed.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar.ParseCommand">
      <summary>Triggers the parsing of the search bar input.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Filtering.VM_SearchBar.ReadKeyCommand">
      <summary>Triggers when the back or delete key is pressed.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.IVM_EditableCollection">
      <summary>Qualifies an editable collection view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.IVM_EditableCollection.IsCollectionEditable">
      <summary>Whether items can be added to this collection.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.IVM_EditableCollection.AddItemCommand">
      <summary>Triggers the addition of an item.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.IVM_EditableCollection.RemoveItemCommand">
      <summary>Triggers the removal of an item.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.IVM_EditableCollection`1">
      <summary>Qualifies an editable collection view model.</summary>
      <typeparam name="T">Item type.</typeparam>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.IVM_EditableCollection`1.Items">
      <summary>Collection items.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.IVM_Identified">
      <summary>Identified view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.IVM_Identified.Alias">
      <summary>Settings alias.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.IVM_Identified.Description">
      <summary>Settings description.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Licensing.VM_License">
      <summary>License view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Licensing.VM_License.#ctor(HAL.Web.User.ILicense)">
      <summary>License view model.</summary>
      <param name="license">License.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_License.Name">
      <summary>License name.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_License.Status">
      <summary>License status.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout">
      <summary>License checkout view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout.NumDays">
      <summary>Modifies the ratio of simulation time elapsed relative to real time.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout.ErrorMessage">
      <summary>Any error returned by the request.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout.HasErrorMessage">
      <summary>Whether an error has been returned by the request.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout.IsCheckoutInProgress">
      <summary>Whether a license is currently being checked out.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout.ValidateCommand">
      <summary>Validates the value of the time ratio.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseCheckout.CheckoutCommand">
      <summary>Checks out the current license collection.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseExpirationStatus">
      <summary>License expiration status view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Licensing.VM_LicenseExpirationStatus.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction">
      <summary>Executed action view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.#ctor(HAL.Procedures.Actions.Action)">
      <summary>Creates an executed action view model.</summary>
      <param name="action">Action being executed.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.Action">
      <summary>Action being executed.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.Alias">
      <summary>Action identity.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.Description">
      <summary>Action description.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.IsExecutionComplete">
      <summary>Whether the execution of this action is complete.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.NotificationLevel">
      <summary>Action notification level.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.Notifications">
      <summary>Action notifications.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.CanExpand">
      <summary>Whether this action can be expanded.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.IsExecuting">
      <summary>Whether this action is currently being executed.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.Equals(HAL.Procedures.Actions.Action)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedAction.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedActionSet">
      <summary>Executed action set view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedActionSet.#ctor(HAL.Procedures.Procedure,HAL.Procedures.Actions.ActionSet)">
      <summary>Creates an executed action view model.</summary>
      <param name="procedure">Parent procedure.</param>
      <param name="set">Action set being executed.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedActionSet.Actions">
      <summary>Actions of this action set.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedActionSet.Notifications">
      <summary>Action notifications.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedActionSet.NotificationLevel">
      <summary>Action notification level.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedActionSet.CanExpand">
      <summary>Whether this action can be expanded.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction">
      <summary>Executed blocking action view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction.#ctor(HAL.Procedures.Actions.BlockingAction)">
      <summary>Creates an executed blocking action view model.</summary>
      <param name="action">Action being executed.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction.BlockingAction">
      <summary>Executed blocking action.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction.Progress">
      <summary>Execution progress.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction.IsExecuting">
      <summary>Whether this action is currently being executed.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction.OnActionProgressed(System.Object,System.Double)">
      <summary>Raised when the action execution progress changes.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedBlockingAction.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedProcedure">
      <summary>Executed procedure view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedProcedure.#ctor(HAL.Procedures.Procedure,HAL.Procedures.ProcedureManager,HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard)">
      <summary>Creates an executed procedure view model.</summary>
      <param name="procedure">Procedure being executed.</param>
      <param name="manager">Parent procedure manager.</param>
      <param name="dashboard">Parent simulation dashboard.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedProcedure.Actions">
      <summary>Procedure actions.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedProcedure.ChangeExecutedActionCommand">
      <summary>Triggers the execution of a specific action.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_ExecutedProcedure.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard">
      <summary>Simulation dashboard view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.RegionManager">
      <summary>Region manager.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.IsExecuting">
      <summary>Whether the execution control is currently executing the procedures.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.TimeRatio">
      <summary>Modifies the ratio of simulation time elapsed relative to real time.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.ValidateTimeRatioCommand">
      <summary>Triggers the validation of the time ratio.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.ResetCommand">
      <summary>Triggers the resetting execution.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.ExecuteCommand">
      <summary>Starts or pauses the execution.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.StepBackCommand">
      <summary>Triggers a step back.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.StepForwardCommand">
      <summary>Triggers a step forward.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.LoopCommand">
      <summary>Toggles the looping of the execution.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.Controllers">
      <summary>Controllers associated with this dashboard.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.Procedure">
      <summary>Monitored procedure.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Simulation.VM_SimulationDashboard.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard">
      <summary>Wizard view model.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.#ctor">
      <summary>Creates a new wizard view model.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.Steps">
      <summary>Wizard steps.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.IsComplete">
      <summary>Whether the wizard completed its tasks.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.SelectedIndex">
      <summary>Selected step index.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.SelectedStep">
      <summary>Selected step.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.Start">
      <summary>Starts the wizard.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.Reset(System.Boolean)">
      <summary>Resets the wizard steps.</summary>
      <param name="restart">Whether the wizard should be restarted once reset.</param>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Wizards.VM_Wizard.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep">
      <summary>Wizard step view model.</summary>
    </member>
    <member name="E:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.Completed">
      <summary>Raised if the state of the controller changed.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.#ctor(HAL.UI.WPF.ViewModels.Wizards.VM_Wizard,System.String,System.String)">
      <summary>Creates a new wizard step view model.</summary>
      <param name="wizard">Parent wizard.</param>
      <param name="title">Step title.</param>
      <param name="description">Step description.</param>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.Wizard">
      <summary>Parent wizard.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.Index">
      <summary>Step index.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.Title">
      <summary>Title.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.Description">
      <summary>Description.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.IsComplete">
      <summary>Whether this step is complete.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.IsFaulted">
      <summary>Whether this step is faulted.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.ExecuteCommand">
      <summary>Triggers the execution of this wizard step.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.CancelCommand">
      <summary>Triggers the cancellation of this wizard step.</summary>
    </member>
    <member name="P:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.ResetCommand">
      <summary>Triggers the resetting of this wizard step.</summary>
    </member>
    <member name="M:HAL.UI.WPF.ViewModels.Wizards.VM_WizardStep.ToggleExecution(System.Boolean)">
      <summary>Toggles the execution of this step.</summary>
      <param name="execute">Whether the step should be executed of canceled.</param>
    </member>
    <member name="T:HAL.UI.WPF.Views.Catalogs.V_ControllerCatalog">
      <summary>
            V_ControllerCatalog
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Catalogs.V_ControllerCatalog.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Catalogs.V_MechanismCatalog">
      <summary>
            V_MechanismCatalog
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Catalogs.V_MechanismCatalog.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Catalogs.V_PartCatalog">
      <summary>
            V_PartCatalog
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Catalogs.V_PartCatalog.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Catalogs.V_ProcedureCatalog">
      <summary>
            V_ProcedureCatalog
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Catalogs.V_ProcedureCatalog.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Configuration.V_About">
      <summary>
            V_About
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Configuration.V_About.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Debugging.V_Empty">
      <summary>
            V_Empty
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Debugging.V_Empty.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Debugging.V_FunctionBrowser">
      <summary>
            V_FunctionBrowser
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Debugging.V_FunctionBrowser.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Debugging.V_Properties">
      <summary>
            V_Properties
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Debugging.V_Properties.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Debugging.V_Tab">
      <summary>
            V_Tab
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Debugging.V_Tab.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Debugging.V_TabControl">
      <summary>
            V_TabControl
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Debugging.V_TabControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Collections.Graphs.V_ProcedureEditor">
      <summary>
            V_ProcedureEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Collections.Graphs.V_ProcedureEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Collections.V_Collection">
      <summary>
            V_Collection
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Collections.V_Collection.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Collections.V_CollectionEditor">
      <summary>
            V_CollectionEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Collections.V_CollectionEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_Boolean">
      <summary>
            V_Boolean
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_Boolean.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_BooleanEditor">
      <summary>
            V_BooleanEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_BooleanEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_Enum">
      <summary>
            V_Enum
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_Enum.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_EnumEditor">
      <summary>
            V_EnumEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_EnumEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_Number">
      <summary>
            V_Number
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_Number.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_NumberEditor">
      <summary>
            V_NumberEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_NumberEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_Object">
      <summary>
            V_Object
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_Object.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_ObjectEditor">
      <summary>
            V_ObjectEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_ObjectEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_String">
      <summary>
            V_String
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_String.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Primitives.V_StringEditor">
      <summary>
            V_StringEditor
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Primitives.V_StringEditor.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Units.V_Measurement">
      <summary>
            V_Measurement
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Units.V_Measurement.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Editors.Units.V_ProportionalMeasurement">
      <summary>
            V_ProportionalMeasurement
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Editors.Units.V_ProportionalMeasurement.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Filtering.V_SearchBar">
      <summary>
            V_SearchBar
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Filtering.V_SearchBar.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Licensing.V_LicenseCheckout">
      <summary>
            V_LicenseCheckout
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Licensing.V_LicenseCheckout.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Licensing.V_LicenseExpirationStatus">
      <summary>
            V_LicenseExpirationStatus
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Licensing.V_LicenseExpirationStatus.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Simulation.V_ExecutedProcedure">
      <summary>
            V_ExecutedProcedure
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Simulation.V_ExecutedProcedure.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Simulation.V_SimulationDashboard">
      <summary>
            V_SimulationDashboard
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Simulation.V_SimulationDashboard.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:HAL.UI.WPF.Views.Wizards.V_Wizard">
      <summary>
            V_Wizard
            </summary>
    </member>
    <member name="M:HAL.UI.WPF.Views.Wizards.V_Wizard.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
  </members>
</doc>