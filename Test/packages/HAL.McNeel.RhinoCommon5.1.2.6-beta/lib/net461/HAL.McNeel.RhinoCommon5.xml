<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.McNeel.RhinoCommon5</name>
  </assembly>
  <members>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Display.ColorConverter">
      <summary>Color converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Display.MaterialConverter">
      <summary>Material converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Numerics.IntervalConverter">
      <summary>Interval converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Numerics.MatrixConverter">
      <summary>Matrix converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.RhinoConverters">
      <summary>RhinoCommon to/from HAL converters.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.RhinoConverters.#ctor">
      <summary>Creates a RhinoCommon wrapper.</summary>
    </member>
    <member name="E:HAL.McNeel.RhinoCommon5.Compatibility.RhinoConverters.OnSolutionExpired">
      <summary>Raised when the HAL solution has expired.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.RhinoConverters.OnNewDocSettings(System.Object,Rhino.DocumentEventArgs)">
      <summary>Manages the changes of Rhino document settings.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Compatibility.RhinoConverters.LengthFactor">
      <summary>Length conversion factor between the current Rhino length unit and the default HAL length unit (m).</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Compatibility.RhinoConverters.LengthUnitType">
      <summary>Current equivalent HAL length unit type.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.ArcConverter">
      <summary>Rhino.Geometry.Arc converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.BlendConverter">
      <summary>Blend converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.CircleConverter">
      <summary>Rhino.Geometry.Circle converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.CurveConverter">
      <summary>Curve converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.FrameConverter">
      <summary>Frame converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.JointSplineConverter">
      <summary>Joint spline converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.LineConverter">
      <summary>Rhino.Geometry.Line converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.MeshObjectConverter">
      <summary>Mesh document object converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.MeshConverter">
      <summary>Mesh converter.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.MeshConverter.ShadedMeshesToHAL(Rhino.Geometry.BoundingBox@,System.Collections.Generic.List{Rhino.Geometry.Mesh},System.Collections.Generic.List{Rhino.Display.DisplayMaterial},System.Boolean)">
      <summary>Converts shaded meshes while updating their bounding box.</summary>
      <param name="boundingBox">Bounding box.</param>
      <param name="meshes">Meshes to be converted.</param>
      <param name="materials">Shader of each mesh.</param>
      <param name="fast">Whether the bounding box calculations should be computed in a fast, inaccurate fashion.</param>
      <returns>Converted shaded meshes.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.PointConverter">
      <summary>Point converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.RotationConverter">
      <summary>Rotation matrix converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.VectorConverter">
      <summary>Vector converter.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.VectorConverter.ToHAL(Rhino.Geometry.Vector3d)">
      <summary>Converts a vector to a compatible HAL vector.</summary>
      <param name="vector">Vector to convert.</param>
      <returns>Converted vector.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.VectorConverter.FromHAL(HAL.Spatial.Vector3D)">
      <summary>Converts a HAL vector to a compatible vector.</summary>
      <param name="vector">Vector to convert.</param>
      <returns>Converted vector.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.ScaledVectorConverter">
      <summary>Scaled vector converter.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.ScaledVectorConverter.ToHAL(Rhino.Geometry.Vector3d)">
      <summary>Converts a scaled vector to a compatible HAL vector.</summary>
      <param name="vector">Vector to convert.</param>
      <returns>Converted vector.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Compatibility.Spatial.ScaledVectorConverter.FromHAL(HAL.Spatial.Vector3D)">
      <summary>Converts a scaled HAL vector to a compatible vector.</summary>
      <param name="vector">Vector to convert.</param>
      <returns>Converted vector.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.RadianConverter">
      <summary>Angle converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.AngleConverter">
      <summary>Angle converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.AngularSpeedConverter">
      <summary>Linear speed converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.AngularAccelerationConverter">
      <summary>Angular acceleration converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.MeterConverter">
      <summary>Meter converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.LengthConverter">
      <summary>Length converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.LengthRangeConverter">
      <summary>Length range converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.LinearSpeedConverter">
      <summary>Linear speed converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Compatibility.Units.LinearAccelerationConverter">
      <summary>Linear acceleration converter.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Diagnosis.CollisionDiagnosis">
      <summary>Diagnoses collisions between two groups of parts.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Diagnosis.CollisionDiagnosis.#ctor(System.Collections.Generic.IEnumerable{HAL.Objects.Parts.Part},System.Collections.Generic.IEnumerable{HAL.Objects.Parts.Part},HAL.Units.Length.m,HAL.Diagnosis.DiagnosisPrecision,HAL.Alerts.AlertLevel,System.Action{HAL.Diagnosis.IDiagnosis},System.Boolean)">
      <summary>Creates a collision diagnosis for two groups of parts.</summary>
      <param name="threshold">Shortest acceptable distance between parts of different groups.</param>
      <param name="groupA"> First group of parts to test for collisions.</param>
      <param name="groupB"> Second group of parts to test for collisions.</param>
      <param name="precision">Precision of the diagnosis.</param>
      <param name="criticality">Specifies the <see cref="T:HAL.Alerts.AlertLevel" /> from which a diagnostic is considered critical, thus halting further diagnoses.</param>
      <param name="followedBy">Callback method to be invoked upon diagnosis completion.</param>
      <param name="isEnabled">Whether this diagnosis is enabled.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Diagnosis.CollisionDiagnosis.RunDiagnosis(System.IProgress{System.String},System.Nullable{System.Threading.CancellationToken})">
      <summary>Diagnosis.</summary>
      <param name="progress">Progress report callback.</param>
      <param name="cancellationToken">Cancellation token.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.DisplayCache">
      <summary>Maintains the display cache of the current session objects.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.ClippingBox">
      <summary>Clipping box.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.CachedObjects">
      <summary>Cached mechanical objects.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.CachedMechanisms">
      <summary>Cached mechanisms.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.CachedProcedures">
      <summary>Cached procedures.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.CachedTargets">
      <summary>Cached targets.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.CachedProcedureWidgets">
      <summary>Cached procedure widgets.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplayCache.ReferencedWidgets">
      <summary>Cached referenced widgets, per reference.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.UpdateClippingBox(System.Collections.Generic.List{Rhino.Geometry.Mesh})">
      <summary>Updates the rendering clipping box.</summary>
      <param name="meshes">Meshes to take into account.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.UpdateClippingBox(System.Collections.Generic.List{Rhino.Geometry.Point3d})">
      <summary>Updates the rendering clipping box.</summary>
      <param name="points">Points to take into account.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Clear">
      <summary>Clears the content of this cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Add(System.Object)">
      <summary>Adds/updates the cache of an object.</summary>
      <param name="item">Object to cache.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Add(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Adds/updates the cache of a mechanism.</summary>
      <param name="mechanismToCache">Mechanism to cache.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Add(HAL.Procedures.Procedure)">
      <summary>Adds/updates the cache of an action graph.</summary>
      <param name="graphToCache">Graph to cache.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Add(HAL.Motion.Settings.Target)">
      <summary>Adds/updates the cache of a motion target.</summary>
      <param name="targetToCache">Target to cache.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Remove(HAL.IIdentifiable,HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget@)">
      <summary>Attempts to remove the widget associated to an identified object from the cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Remove(HAL.Objects.IObjectGraphEntity,System.Boolean)">
      <summary>Attempts to remove an object from the cache.</summary>
      <param name="objectToRemove">Object to be removed.</param>
      <param name="rebuildEdgeNeighbors">Whether neighbor vertices of object graph edges should have their display cache rebuilt.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Remove(HAL.Objects.Mechanisms.Mechanism)">
      <summary>Attempts to remove a mechanism from the cache.</summary>
      <param name="mechanism">Mechanism to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.Remove(HAL.Procedures.Procedure)">
      <summary>Attempts to remove a graph from the cache.</summary>
      <param name="graphToRemove">Graph to be removed.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.GetDisplayCache(HAL.IIdentifiable)">
      <summary>Attempts to retrieve the widget associated with an object from its identity.</summary>
      <param name="cachedObject">Cached object.</param>
      <returns>Cached widgets, if any.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.GetProcedureDisplayCache(HAL.Identifier)">
      <summary>Attempts to retrieve the full display cache of a procedure from its identity.</summary>
      <param name="identifier">Graph identity.</param>
      <returns>Cached widgets, if any.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.GetMechanismDisplayCache(HAL.Objects.Mechanisms.Mechanism,System.Collections.Generic.List{HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget}@,System.Collections.Generic.List{HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget}@,System.Collections.Generic.List{HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PrismaticJointWidget}@,System.Collections.Generic.List{HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget}@)">
      <summary>Attempts to retrieve the full display cache of a mechanism.</summary>
      <param name="mechanism">Mechanism.</param>
      <param name="parts">Part widgets.</param>
      <param name="connections">Connection widgets.</param>
      <param name="prismaticJoints">Prismatic joint widgets.</param>
      <param name="revoluteJoints">Revolute joint widgets.</param>
      <returns>Whether the mechanism was found in the cache.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplayCache.RefreshLocation(HAL.Objects.Mechanisms.Mechanism,System.Boolean,System.Collections.Generic.List{HAL.Spatial.MatrixFrame})">
      <summary>Refreshes the display cache of the specified mechanism.</summary>
      <param name="mechanism">Maintained mechanism.</param>
      <param name="resetCache">Resets the cached mechanism geometry.</param>
      <param name="segmentLocations">Position of the segments. Will be computed if unspecified.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.DisplaySettings">
      <summary>Display settings for McNeel products.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.ShowWidgets">
      <summary>Whether widgets should be displayed.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.DefaultTargetAxisLength">
      <summary>Default target axis length.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.Font">
      <summary>Default font.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.FaintColor">
      <summary>Default faint color, used to draw non-critical information.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.MediumColor">
      <summary>Default medium color.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.StrongColor">
      <summary>Default strong color, used to draw critical information.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.AccentColor">
      <summary>Default accent color, used to draw special information.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.XColor">
      <summary>Default x-axis color.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.YColor">
      <summary>Default x-axis color.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.ZColor">
      <summary>Default x-axis color.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.InfoColor">
      <summary>Color of <see cref="F:HAL.Alerts.AlertLevel.Info">informations</see>.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.RemarkColor">
      <summary>Color of <see cref="F:HAL.Alerts.AlertLevel.Remark">remarks</see>.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.WarningColor">
      <summary>Color of <see cref="F:HAL.Alerts.AlertLevel.Warning">warnings</see>.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.ErrorColor">
      <summary>Color of <see cref="F:HAL.Alerts.AlertLevel.Error">errors</see>.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.ExceptionColor">
      <summary>Color of <see cref="T:System.Exception" />.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.MeshShine">
      <summary>Mesh shine.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.DefaultMaterial">
      <summary>Default display material for meshes.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.SelectedMaterial">
      <summary>Default display material for selected meshes.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.CollidingMaterial">
      <summary>Default display material for selected meshes.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.DpiScaling">
      <summary>
            Gets the screen-scaling factor for the entire system.
            Use the UiAdjust methods in the Grasshopper top level namespace
            (Global_Proc module) to modify integer and single values.
            </summary>
      <returns>Scaling factor (dpi / 96).</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.DisplaySettings.GetBackgroundContrastingColor(System.Boolean)">
      <summary>Switches between black and white, depending on the viewport background color.</summary>
      <remarks>Does not work in render display mode.</remarks>
      <returns>Black or white, depending on which one contrasts the most with the viewport background.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.TextJustification">
      <summary>Enumerates ways to justify text.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.TopLeft">
      <summary>Top left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.CenteredLeft">
      <summary>Centered left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.BottomLeft">
      <summary>Bottom left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.TopCentered">
      <summary>Top left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.Centered">
      <summary>Centered left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.BottomCentered">
      <summary>Bottom left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.TopRight">
      <summary>Top left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.CenteredRight">
      <summary>Centered left.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Display.TextJustification.BottomRight">
      <summary>Bottom left.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Diagnosis.CollisionWidget">
      <summary>Renders a collision event.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Diagnosis.CollisionWidget.#ctor(HAL.Diagnosis.Collisions.CollisionDiagnostic)">
      <summary>Creates a visualization for a collision diagnostic.</summary>
      <param name="diagnostic">Diagnostic to visualize.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Diagnosis.CollisionWidget.Cache">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Diagnosis.CollisionWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Diagnosis.CollisionWidget.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.ILocatedWidget">
      <summary>Qualifies a widget locatable in the world.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.ILocatedWidget.Location">
      <summary>Location of this widget in the world.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.IReferencedWidget">
      <summary>Qualifies a widget which location depends on a <see cref="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IReferencedWidget.Reference" />.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IReferencedWidget.Reference">
      <summary>Reference being followed.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.IReferencedWidget.ReferenceMoved(Rhino.Geometry.Transform)">
      <summary>Called byt the reference of this widget when it moved.</summary>
      <param name="toNewReferenceLocation">Transformation relative to the last known reference location.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget">
      <summary>Qualifies a widget participating to the Rhino viewport rendering.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.FaintColor">
      <summary>Color to be used to draw less important widget elements.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.AccentColor">
      <summary>Color to be used to draw special widget elements.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.StrongColor">
      <summary>Color to be used to draw important widget elements.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.IsSelected">
      <summary>True if this object has to be drawn as a selected object.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.IsCached">
      <summary>Whether the display cache of this widget has already been built.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.RenderedObject">
      <summary>Object being rendered by this widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.EnsureCache(System.Boolean)">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <param name="neutral">Whether the neutral display of the widget should be cached.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.TryRenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <summary>Attempts to render the widget wireframe.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget.TryRenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <summary>Attempts to render the widget meshes.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
      <param name="material">Display material override.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget`1">
      <summary>Qualifies a widget participating to the Rhino viewport rendering.</summary>
      <typeparam name="T">Type of object being rendered by this widget.</typeparam>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.IWidget`1.RenderedObject">
      <summary>Object being rendered by this widget.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1">
      <summary>Base implementation of a widget located in the world, and capable of displaying frames.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.#ctor(`0,Rhino.Geometry.Plane)">
      <summary>Creates a new located widget.</summary>
      <param name="renderedObject">Object being rendered by this widget.</param>
      <param name="location">Object location.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.Location">
      <summary>Location of this widget in the world.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.FrameSize">
      <summary>Frame size.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.XColor">
      <summary>Color to be used to draw the X axis of a frame.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.YColor">
      <summary>Color to be used to draw the Y axis of a frame.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.ZColor">
      <summary>Color to be used to draw the Z axis of a frame.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.AxesColors">
      <summary>Colors of the axes of a frame.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.GetFrameSize">
      <summary>Computes the frame size in the current document units.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.LocatedWidget`1.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget">
      <summary>Connection widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.#ctor(HAL.Objects.Connection)">
      <summary>Creates a connection widget from an existing connection.</summary>
      <param name="connection">Connection to create a widget for.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.EnsureCache(System.Boolean)">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <param name="neutral">Whether the neutral display of the widget should be cached.</param>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ConnectionWidget.Dispose">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.IMobileReferenceWidget">
      <summary>Qualifies a widget displaying a mobile <see cref="T:HAL.Objects.Reference" />.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.IMobileReferenceWidget.LastLocationKnownByChildren">
      <summary>Last location of this reference known by its reference children.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.IMobileReferenceWidget.RefreshChildrenLocation(Rhino.Geometry.Transform)">
      <summary>Call this method to update the locations of referenced widgets.</summary>
      <param name="transformation">Transformation from <see cref="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.IMobileReferenceWidget.LastLocationKnownByChildren" /> to the <see cref="P:HAL.McNeel.RhinoCommon5.Display.Widgets.ILocatedWidget.Location">current location</see>.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1">
      <summary>Base implementation of <see cref="!:" /> widget.</summary>
      <typeparam name="TJointPositionUnit">
      </typeparam>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.#ctor(HAL.Objects.Joint)">
      <summary>Creates a <see cref="F:HAL.Objects.JointType.Revolute" /><see cref="T:HAL.Objects.Joint" /> widget.</summary>
      <param name="joint">Joint to be rendered.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.ParentLocation">
      <summary>Location of the joint parent.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.Range">
      <summary>Joint position range.</summary>|
        </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.TryRenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.TryRenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.DrawParent(Rhino.Display.DisplayPipeline,System.Double)">
      <summary>Draws a dashed line to the joint parent.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="size">Scaled frame size.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.JointWidget`1.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.MobileReferenceWidget`1">
      <summary>Base implementation of a mobile reference widget.</summary>
      <typeparam name="T">Type of mobile reference being rendered.</typeparam>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.MobileReferenceWidget`1.#ctor(`0)">
      <summary>Creates a new located widget.</summary>
      <param name="renderedObject">Object being rendered by this widget.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.MobileReferenceWidget`1.LastLocationKnownByChildren">
      <summary>Last location of this reference known by its reference children.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.MobileReferenceWidget`1.RefreshChildrenLocation(Rhino.Geometry.Transform)">
      <summary>Call this method to update the locations of referenced widgets.</summary>
      <param name="transformation">Transformation from <see cref="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.IMobileReferenceWidget.LastLocationKnownByChildren" /> to the <see cref="P:HAL.McNeel.RhinoCommon5.Display.Widgets.ILocatedWidget.Location">current location</see>.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ObjectGraphEntityWidget`1">
      <summary>Widget rendering an object graph entity.</summary>
      <typeparam name="T">Type of object being rendered.</typeparam>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ObjectGraphEntityWidget`1.#ctor(`0,Rhino.Geometry.Plane)">
      <summary>Creates a new located widget.</summary>
      <param name="renderedObject">Object being rendered by this widget.</param>
      <param name="location">Current object location.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ObjectGraphEntityWidget`1.Location">
      <summary>Location of this widget in the world.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ObjectGraphEntityWidget`1.InitialLocation">
      <summary>Location before the simulation starts.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ObjectGraphEntityWidget`1.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget">
      <summary>
        <see cref="T:HAL.Objects.Parts.Part" /> widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.#ctor(HAL.Objects.Parts.Part)">
      <summary>Creates a widget for the specified part.</summary>
      <param name="part">Part.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.HasBody">
      <summary>Whether the part has a body to be displayed.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.NeutralBody">
      <summary>Body in initial position.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.ActuatedBody">
      <summary>Body in actuated position.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.BodyMaterials">
      <summary>Body materials.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.IsColliding">
      <summary>Whether this part is colliding with another.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.RefreshLocation(System.Boolean,System.Boolean,HAL.Spatial.MatrixFrame)">
      <summary>Refreshes the location of the actuated body of this part.</summary>
      <param name="resetCoreCache">Whether the core position cache should be rebuilt.</param>
      <param name="resetClientCache">Whether the existing client application position cache should be rebuilt (slower).</param>
      <param name="location">New location of this part. Will be computed if not specified.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <summary>Renders the widget wireframe.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PartWidget.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <summary>Renders the widget meshes.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
      <param name="material">Display material override.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PrismaticJointWidget">
      <summary>
        <see cref="F:HAL.Objects.JointType.Revolute" />
        <see cref="T:HAL.Objects.Joint" /> widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PrismaticJointWidget.#ctor(HAL.Objects.Joint)">
      <summary>Creates a <see cref="F:HAL.Objects.JointType.Revolute" /><see cref="T:HAL.Objects.Joint" /> widget.</summary>
      <param name="joint">Joint to be rendered.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PrismaticJointWidget.ClearCache">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PrismaticJointWidget.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.PrismaticJointWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ReferenceWidget">
      <summary>
        <see cref="T:HAL.Objects.Reference" /> widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ReferenceWidget.#ctor(HAL.Objects.Reference)">
      <summary>Creates a reference widget from an existing reference.</summary>
      <param name="reference">Reference to create a widget for.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ReferenceWidget.Cache">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ReferenceWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.ReferenceWidget.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget">
      <summary>
        <see cref="F:HAL.Objects.JointType.Revolute" />
        <see cref="T:HAL.Objects.Joint" /> widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget.#ctor(HAL.Objects.Joint)">
      <summary>Creates a <see cref="F:HAL.Objects.JointType.Revolute" /><see cref="T:HAL.Objects.Joint" /> widget.</summary>
      <param name="joint">Joint to be rendered.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget.EnsureCache(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget.ClearCache">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget.Cache">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Objects.RevoluteJointWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.IActionWidget">
      <summary>Qualifies an action widget.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.IActionWidget.SimulationGraph">
      <summary>Simulation graph managing this action.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.IBlockingActionWidget">
      <summary>Qualifies a <see cref="T:HAL.Procedures.Actions.BlockingAction" />widget.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.IBlockingActionWidget.Duration">
      <summary>Duration of this blocking action.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.IBlockingActionWidget.TryRenderWireframe(Rhino.Display.DisplayPipeline,HAL.Units.Time.Time)">
      <summary>Attempts to render the widget wireframe.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="at">Execution time at which the widget should be displayed, relative to the action start time.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.IBlockingActionWidget.TryRenderMeshes(Rhino.Display.DisplayPipeline,HAL.Units.Time.Time)">
      <summary>Attempts to render the widget meshes.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="at">Execution time at which the widget should be displayed, relative to the action start time.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget">
      <summary>Motion action widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.#ctor(HAL.Procedures.Actions.MotionAction,HAL.Procedures.Procedure)">
      <summary>Creates a widget associated with a motion action.</summary>
      <param name="action">Motion action.</param>
      <param name="parentProcedure">Parent procedure containing this action.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.Location">
      <summary>Location of this widget in the world.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.SimulationGraph">
      <summary>Simulation graph managing this action.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.ParentGraphIdentity">
      <summary>Identity of the parent graph containing this action.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.Reference">
      <summary>Reference being followed.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.Duration">
      <summary>Duration of this blocking action.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.EnsureCache(System.Boolean)">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <param name="neutral">Whether the neutral display of the widget should be cached.</param>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.ReferenceMoved(Rhino.Geometry.Transform)">
      <summary>Called but the reference of this widget when it moved.</summary>
      <param name="toNewReferenceLocation">Transformation relative to the last known reference location.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <summary>Draws this widget wires with a given pipeline.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.TryRenderWireframe(Rhino.Display.DisplayPipeline,HAL.Units.Time.Time)">
      <summary>Draws this widget wires with a given pipeline.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="at">Execution time at which the widget should be displayed.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.TryRenderMeshes(Rhino.Display.DisplayPipeline,HAL.Units.Time.Time)">
      <summary>Attempts to render the widget meshes.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="at">Execution time at which the widget should be displayed, relative to the action start time.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Procedures.MotionActionWidget.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <summary>Renders the widget meshes.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
      <param name="material">Display material override.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget">
      <summary>
        <see cref="T:HAL.Motion.Settings.Target" /> widget.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.#ctor(HAL.Motion.Settings.Target)">
      <summary>Creates a widget associated with a motion target.</summary>
      <param name="target">Target.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.Reference">
      <summary>Reference being followed.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.Location">
      <summary>Location of this widget in the world.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.ReferenceMoved(Rhino.Geometry.Transform)">
      <summary>Called byt the reference of this widget when it moved.</summary>
      <param name="toNewReferenceLocation">Transformation relative to the last known reference location.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.TargetWidget.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1">
      <summary>Base implementation of a widget participating to the Rhino viewport rendering.</summary>
      <typeparam name="T">Type of object being rendered by this widget.</typeparam>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.#ctor(`0)">
      <summary>Creates a new widget.</summary>
      <param name="renderedObject">Object being rendered by this widget.</param>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.RenderedObject">
      <summary>Object being rendered by this widget.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.FaintColor">
      <summary>Color to be used to draw less important widget elements.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.AccentColor">
      <summary>Color to be used to draw special widget elements.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.StrongColor">
      <summary>Color to be used to draw important widget elements.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.IsSelected">
      <summary>True if this object has to be drawn as a selected object.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.IsCached">
      <summary>Whether the display cache of this widget has already been built.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.ClearCache">
      <summary>Clears this widget cache.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.EnsureCache(System.Boolean)">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <param name="neutral">Whether the neutral display of the widget should be cached.</param>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.Cache">
      <summary>Caches the information to display to avoid display errors during unexpected viewport expirations.</summary>
      <returns>Whether the cache is complete, and expected cached entries are present.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.TryRenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.RenderWireframe(Rhino.Display.DisplayPipeline,System.Boolean)">
      <summary>Renders the widget wireframe.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.TryRenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <inheritdoc />
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.Widget`1.RenderMeshes(Rhino.Display.DisplayPipeline,System.Boolean,Rhino.Display.DisplayMaterial)">
      <summary>Renders the widget meshes.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="neutral">If true, displays the widget in neutral position.</param>
      <param name="material">Display material override.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers">
      <summary>Provides a set of utilities to facilitate object display.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.DrawCirclesTowardsScreen(Rhino.Display.DisplayPipeline,Rhino.Geometry.Point3d[],System.Double,System.Drawing.Color[],System.Int32)">
      <summary>Draws circles oriented towards the camera.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="positions">Positions at which to draw circles.</param>
      <param name="radius">Radius of the circles.</param>
      <param name="colors">Colors of the circles.</param>
      <param name="thickness">Thickness of the circles.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.DrawFrameAxes(Rhino.Display.DisplayPipeline,Rhino.Geometry.Plane,System.Double,System.Int32)">
      <summary>Draws the axes of a frame.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="frame">Frame to draw.</param>
      <param name="size">Size of the axes, in model unit.</param>
      <param name="thickness">Axes thickness.</param>
      <returns>Endpoints for the X, Y and Z axes.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.DrawFrameAxes(Rhino.Display.DisplayPipeline,Rhino.Geometry.Plane,System.Double,System.Int32,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Boolean)">
      <summary>Draws the axes of a frame.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="frame">Frame to draw.</param>
      <param name="size">Size of the axes, in model unit.</param>
      <param name="xThickness">X axis thickness.</param>
      <param name="yThickness">Y axis thickness.</param>
      <param name="zThickness">Z axis thickness.</param>
      <param name="xColor">Color of the X axis.</param>
      <param name="yColor">Color of the Y axis.</param>
      <param name="zColor">Color of the Z axis.</param>
      <param name="dashed">If true, will draw dashed axes.</param>
      <returns>Endpoints for the X, Y and Z axes.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.DrawRelativeText(Rhino.Display.DisplayPipeline,System.String,Rhino.Geometry.Plane,System.Drawing.Color,System.Nullable{HAL.Units.Length.m},System.Nullable{HAL.Units.Length.m},HAL.McNeel.RhinoCommon5.Display.TextJustification,System.Boolean,System.Int32)">
      <summary>Draws the alias of an object.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="text">Text to be drawn.</param>
      <param name="location">Location relative to which the text should be drawn.</param>
      <param name="color">Text color.</param>
      <param name="drawLine">Whether a line should be drawn between from the location to the text.</param>
      <param name="distance">Distance from the location at which the text should be displayed.</param>
      <param name="size">Text size.</param>
      <param name="justification">Text justification.</param>
      <param name="lineThickness">Line thickness, in pixels.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.DrawJustified3DText(Rhino.Display.DisplayPipeline,System.String,System.Drawing.Color,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,HAL.McNeel.RhinoCommon5.Display.TextJustification)">
      <summary>Draws justified text.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="text">Text to draw.</param>
      <param name="color">Text color.</param>
      <param name="frame">Text Frame.</param>
      <param name="size">Text size, in model units.</param>
      <param name="font">Font to be used.</param>
      <param name="alignToScreen">If true, the text will be drawn parallel to the screen.</param>
      <param name="justification">Text justification.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.DrawDashedLine(Rhino.Display.DisplayPipeline,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Drawing.Color,System.Collections.Generic.List{Rhino.Geometry.Curve},System.Int32,System.Boolean)">
      <summary>Draws a dashed line between two points.</summary>
      <param name="pipeline">Pipeline to draw with.</param>
      <param name="from">Start point.</param>
      <param name="to">End point.</param>
      <param name="dashLength">Dash length in the model unit.</param>
      <param name="color">Color.</param>
      <param name="preComputedDashes">Pre-computed dashes, if any. Dashes will be regenerated otherwise (slower).</param>
      <param name="thickness">Thickness.</param>
      <param name="scaleThickness">Whether the thickness of the dashed line should be adjusted to match the current screen resolution.</param>
      <returns>Drawn dashes.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.Dashed(Rhino.Geometry.Curve,System.Double,System.Double)">
      <summary>Creates a dashed curve.</summary>
      <param name="curve">Curve to dash.</param>
      <param name="dashLength">Dash length in the model unit.</param>
      <param name="gapLength">Gap length in the model unit.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.ZoomOnObject(Rhino.Display.RhinoViewport,Rhino.Geometry.GeometryBase)">
      <summary>Zooms the camera to see a specific object.</summary>
      <param name="viewport">Viewport in which to operate the zoom.</param>
      <param name="object">Object to zoom on.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.GetPixelScale(Rhino.Display.RhinoViewport,Rhino.Geometry.Point3d)">
      <summary>Get the scale factor (pixels per model unit) between model scale and screen scale displayed by a viewport.</summary>
      <param name="viewport">Viewport to analyze.</param>
      <param name="testPoint">Test point of the model, to project on the screen plane.</param>
      <returns>Pixels per model unit.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.GetColor(HAL.Alerts.AlertLevel)">
      <summary>Gets the color associated with an alert severity, if any.</summary>
      <param name="severity">Alert severity level.</param>
      <returns>Corresponding color if any, null otherwise.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.GetEmphasis(HAL.Alerts.AlertLevel)">
      <summary>Gets the display emphasis associated with an alert severity, if any.</summary>
      <param name="severity">Alert severity level.</param>
      <returns>Corresponding emphasis if any, DisplayEmphasis.None otherwise.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.ToArrow(Rhino.Geometry.Curve,Rhino.Geometry.Plane,System.Double,System.Double,System.Boolean,Rhino.Geometry.Point3d[]@,System.Double[]@,System.Collections.Generic.List{Rhino.Geometry.Curve}@,System.Collections.Generic.List{Rhino.Geometry.Polyline}@,System.Int32)">
      <summary>Creates one or multiple arrows from a curve.</summary>
      <param name="curve">Curve from which to generated arrows.</param>
      <param name="frame">Arrow heads frame.</param>
      <param name="headSize">Arrow heads size.</param>
      <param name="gapSize">Tail gap Size.</param>
      <param name="closeHeads">If true, generates closed arrow heads.</param>
      <param name="locations">Arrow head locations.</param>
      <param name="parameters">Arrow head location parameters.</param>
      <param name="tails">Generated arrow tails.</param>
      <param name="heads">Generated arrow heads.</param>
      <param name="amount">Number of arrows to generate from the curve.</param>
      <returns>Original curve.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.ScalableSpiral(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,System.Double,System.Double,Rhino.Geometry.Interval@,Rhino.Geometry.Plane@,Rhino.Geometry.Plane@,Rhino.Geometry.Plane@,System.Int32)">
      <summary>Creates a scalable spiral displaying a rotation range.</summary>
      <param name="frame">Host frame. The Z axis is the rotation axis of the spiral, the X axis is the neutral axis of the spiral.</param>
      <param name="range">Rotation range of the spiral.</param>
      <param name="displayRange">Limited range of the spiral, to avoid display glitches.</param>
      <param name="radius">Radius of the spiral at 1/1 scale.</param>
      <param name="scale">Scaling factor.</param>
      <param name="safeRange">Drawn range.</param>
      <param name="zeroFrame">Frame at zero, if zero is in the drawn range.</param>
      <param name="minFrame">Minimum frame.</param>
      <param name="maxFrame">Maximum frame.</param>
      <param name="definition">Number of steps to compute per rotation.</param>
      <returns>Generated spiral.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.CylindricalToCartesian(Rhino.Geometry.Plane,System.Double,System.Double,System.Double)">
      <summary>Converts a point from cylindrical coordinates to Cartesian coordinates.</summary> //todo: move to core?
            <param name="frame">Reference frame. The polar axis (A) follows X, and the longitudinal axis (L) follows Z.</param><param name="radius">Radial distance (ρ) of the point.</param><param name="angle">Angular coordinate (φ) of the point.</param><param name="height">Height of the point.</param><returns>Cartesian point expressed in the frame coordinates.</returns></member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.FixBounds(Rhino.Geometry.Interval)">
      <summary>Fixes the bounds of an interval if T1 is smaller than T0.</summary>
      <param name="interval">Interval to analyze.</param>
      <returns>Fixed interval.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.Limit(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
      <summary>Limits the bounds of an interval to stay in a second one.</summary>
      <param name="interval">Interval to be limited.</param>
      <param name="limit">Limiting interval.</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Display.Widgets.WidgetHelpers.ToZX(Rhino.Geometry.Plane)">
      <summary>Modifies a plane so X=Z and Y=X.</summary>
      <param name="plane">Plane to modify.</param>
      <returns>Modified plane.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers">
      <summary>Mechanism creation utilities.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.ImportMechanism(System.String)">
      <summary>Converts a mechanism 3d model to a rhino document.</summary>
      <param name="path">Path of the file to be imported.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.Explode(System.Collections.Generic.List{Rhino.DocObjects.RhinoObject})">
      <summary>Explodes a set of blocks recursively.</summary>
      <param name="potentialBlocks">Potential objects which could be blocks to explode.</param>
      <returns>Resulting objects obtained from each initial object.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.RoundPosition(Rhino.Geometry.Plane,System.Int32)">
      <summary>Rounds the position of a plane.</summary>
      <param name="plane">Plane to process.</param>
      <param name="digits">Digits.</param>
      <returns>New plane with rounded origin coordinates.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.ToMesh(Rhino.Geometry.Brep,System.Int32)">
      <summary>Converts a BRep to a mesh.</summary>
      <param name="brep">BRep to convert.</param>
      <param name="maxFaces">Desired maximum number of faces. Leave to 0 to keep minimal deviation.</param>
      <returns>Resulting mesh.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.CreatePart(System.String)">
      <summary>Creates a part.</summary>
      <param name="alias">Part alias.</param>
      <returns>Resulting part.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.CreateRevoluteJoint(System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Angle.rad,HAL.Units.Speed.rad_s)">
      <summary>Creates a revolute joint.</summary>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="min">Min position.</param>
      <param name="max">Max position.</param>
      <param name="maxSpeed">Max speed.</param>
      <param name="position">Current position, if the model is not at 0.</param>
      <returns>Created joint.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.CreatePrismaticJoint(System.String,HAL.Objects.Parts.Part,HAL.Objects.Parts.Part,HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Length.m,HAL.Units.Speed.m_s)">
      <summary>Creates a prismatic joint.</summary>
      <param name="alias">Joint alias.</param>
      <param name="from">Parent part.</param>
      <param name="to">Child part.</param>
      <param name="min">Min position.</param>
      <param name="max">Max position.</param>
      <param name="maxSpeed">Max speed.</param>
      <param name="position">Current position, if the model is not at 0.</param>
      <returns>Created joint.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.CreateConnection(System.String,HAL.Objects.Parts.Part,System.Boolean)">
      <summary>Creates a connection.</summary>
      <param name="alias">Connection alias.</param>
      <param name="from">Parent part.</param>
      <param name="isEndPoint">Whether this connection is a mechanism endpoint (flange).</param>
      <returns>Created connection.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.Assemble(System.String,System.String,System.String,System.String,System.String,HAL.Objects.IObjectGraphEntity[])">
      <summary>Creates a new mechanism from the specified components.</summary>
      <param name="alias">Mechanism alias.</param>
      <param name="manufacturer">Mechanism manufacturer.</param>
      <param name="series">Mechanism series.</param>
      <param name="model">Mechanism model.</param>
      <param name="version">Model version.</param>
      <param name="components">Mechanism components, starting from the mechanism base.</param>
      <returns>Resulting mechanism.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.CreateItem(HAL.Objects.ProductIdentity,System.String,System.String,System.String,HAL.Catalog.Items.Attributes.Tags.Tag[])">
      <summary>Creates a catalog item for the given mechanism.</summary>
      <param name="identity">Mechanism identity.</param>
      <param name="description">Marketing description.</param>
      <param name="illustrationPath">Illustration path.</param> //todo [urgent] revise
            <param name="url">Product URL.</param><param name="customTags">Custom tags to be associated with this item, including topic/sub-type tags (i.e: positioner, manipulator, tool, palletizer, etc.)</param><returns>Catalog item.</returns></member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.Illustrate``1(HAL.Catalog.Items.CatalogItem{``0},``0,System.String,System.Int32,System.Int32)">
      <summary>Creates an illustration for the specified catalog item.</summary>
      <typeparam name="T">Catalog item payload type.</typeparam>
      <param name="item">Catalog item.</param>
      <param name="value">Catalog item payload.</param>
      <param name="directory">Directory in which this item is stored.</param>
      <param name="width">Illustration width in pixels.</param>
      <param name="height">Illustration height in pixels.</param>
      <returns>Whether the illustration creation was successful.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Extensions.MechanismHelpers.Store(HAL.Catalog.Items.MechanismCatalogItem,HAL.Objects.Mechanisms.Mechanism,System.Boolean,HAL.Catalog.CatalogRepository{HAL.Catalog.Items.MechanismCatalogItem,HAL.Objects.Mechanisms.Mechanism})">
      <summary>Stores a mechanism catalog item in the specified repository.</summary>
      <param name="item">Catalog item.</param>
      <param name="payload">Catalog item payload.</param>
      <param name="overwrite">Whether any previously stored version of this item should be overwritten.</param>
      <param name="repository">Repository.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Import.HAL_ImportUtilities">
      <summary>Helper class for geometry import.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Import.HAL_ImportUtilities.Import(System.String,Rhino.Geometry.Transform,System.Boolean)">
      <summary>Imports a file into the rhino document.</summary>
      <param name="path">Path of the file to import, including its extension.</param>
      <param name="transform">Transformation to apply to the imported geometry.</param>
      <param name="clearLayers">If true, will clean the document layers before the import.</param>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Interactivity.InteractiveDisplay">
      <summary>Interactive display conduit.</summary>
    </member>
    <member name="P:HAL.McNeel.RhinoCommon5.Interactivity.InteractiveDisplay.Instance">
      <summary>Interactive display conduit instance.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Spatial.CurveDiscretization">
      <summary>Enumerates supported curve discretization methods.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Spatial.CurveDiscretization.ArcsAndLines">
      <summary>Arcs and lines.</summary>
    </member>
    <member name="F:HAL.McNeel.RhinoCommon5.Spatial.CurveDiscretization.Lines">
      <summary>Lines.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers">
      <summary>Biarc utilities.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers.GetTargets(Rhino.Geometry.Curve,HAL.McNeel.RhinoCommon5.Spatial.CurveDiscretization,System.Double,System.Nullable{Rhino.Geometry.Plane},System.Nullable{Rhino.Geometry.Plane},Rhino.Geometry.PolyCurve@,Rhino.Geometry.GeometryBase,HAL.Spatial.Axis,System.Boolean,HAL.Objects.Reference,System.Boolean,System.String)">
      <summary>Generates a tool path from a curve.</summary>
      <param name="curve">Curve to generate a path from.</param>
      <param name="discretization">Discretization method.</param>
      <param name="resolution">Path resolution, as the maximum allowed deviation in Cartesian space.</param>
      <param name="entry">Entry orientation.</param>
      <param name="exit">Exit orientation.</param>
      <param name="trace">Resulting curve.</param>
      <param name="guide">Host geometry for the path.</param>
      <param name="orientedAxis">If a guide geometry is specified, target axis following the guide geometry.</param>
      <param name="flip">If a guide geometry is specified, whether the inverse direction of the axis should be used.</param>
      <param name="reference">Reference system of the resulting path.</param>
      <param name="isAbsolute">Whether the curve is expressed in absolute world location. If false, the curve is considered relative to the reference.</param>
      <param name="name">Resulting path name.</param>
      <returns>Resulting actions.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers.PlaneAtNormalizedParameter(Rhino.Geometry.Curve,System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Plane)">
      <summary>Retrieves the plate at a position along a curve, and at the corresponding interpolated rotation.</summary>
      <param name="curve">Host curve. The domain of the polyCurve must be 0 to 1.</param>
      <param name="parameter">Parameter on the segment.</param>
      <param name="angle">Total rotation angle towards which to interpolate.</param>
      <param name="axis">Rotation axis.</param>
      <param name="entry">Initial plane from which to interpolate in rotation.</param>
      <returns>Rotated plane at the specified position.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers.Normalize(Rhino.Geometry.Curve,System.Double,System.Double)">
      <summary>Normalizes this curve between given bounds.</summary>
      <param name="curve">Curve to normalize.</param>
      <param name="t0">Interval start.</param>
      <param name="t1">Interval end.</param>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers.ToPolyline(Rhino.Geometry.Curve,System.Double)">
      <summary>Approximates a curve as a polyline.</summary>
      <param name="curve">Curve to convert.</param>
      <param name="tolerance">Tolerated deviation.</param>
      <returns>Resulting polyline.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers.SolveBiArc(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Arc@,Rhino.Geometry.Arc@,Rhino.Geometry.Curve@)">
      <summary>
             Solves a biarc for a specific set of end points and tangents.
             If a solution is found that is simpler than a biarc (i.e. a single arc or a straight line segment)
             then the solution out parameter will contain that solution and the segments will be null.
            </summary>
      <param name="startPoint">Start point of biarc.</param>
      <param name="startTangent">Start tangent of biarc.</param>
      <param name="endPoint">End point of biarc.</param>
      <param name="endTangent">End tangent of biarc.</param>
      <param name="firstSegment">First biarc segment.</param>
      <param name="secondSegment">Second biarc segment.</param>
      <param name="solution">Curve representing entire solution.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.CurveHelpers.SolveBiArc(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double,Rhino.Geometry.Arc@,Rhino.Geometry.Arc@,Rhino.Geometry.Curve@)">
      <summary>
             Solves a biarc for a specific set of end points and tangents.
             If a solution is found that is simpler than a biarc (i.e. a single arc or a straight line segment)
             then the solution out parameter will contain that solution and the segments will be null.
            </summary>
      <param name="startPoint">Start point of biarc.</param>
      <param name="startTangent">Start tangent of biarc.</param>
      <param name="endPoint">End point of biarc.</param>
      <param name="endTangent">End tangent of biarc.</param>
      <param name="weight">Factor between zero and one that defines the relative weight of the start and end points.</param>
      <param name="firstSegment">First biarc segment.</param>
      <param name="secondSegment">Second biarc segment.</param>
      <param name="solution">Curve representing entire solution.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Spatial.RhinoGeometryProvider">
      <summary>Provides wrappers to allow Rhino types to be used as native HAL geometry classes.</summary>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers">
      <summary>Utilities to generate constrained planes suitable for target orientation.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers.AlignAxis(Rhino.Geometry.Plane,HAL.Spatial.Axis,System.Boolean,Rhino.Geometry.Vector3d,System.Boolean)">
      <summary>Creates a plane aligned to a given direction from an existing one.</summary>
      <param name="plane">Initial plane.</param>
      <param name="axis">Plane vector to be aligned to the direction.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="direction">Direction.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers.AlignAxisTangentTo(Rhino.Geometry.Plane,HAL.Spatial.Axis,System.Boolean,Rhino.Geometry.Curve,System.Boolean,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@)">
      <summary>Creates a plane aligned to the tangent of a guide curve.</summary>
      <param name="plane">Initial plane.</param>
      <param name="axis">Plane axis to be aligned to the tangent.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="guide">Guide curve.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <param name="point">Origin on curve.</param>
      <param name="tangent">Local tangent at projected origin location.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers.AlignAxisNormalTo(Rhino.Geometry.Plane,HAL.Spatial.Axis,System.Boolean,Rhino.Geometry.Brep,System.Boolean)">
      <summary>Creates a plane aligned to the normal of a guide BRep.</summary>
      <param name="plane">Initial plane.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="axis">Plane vector to be aligned to the normal.</param>
      <param name="guide">Guide BRep.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers.AlignAxisNormalTo(Rhino.Geometry.Plane,HAL.Spatial.Axis,System.Boolean,Rhino.Geometry.Brep,System.Boolean,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@)">
      <summary>Creates a plane aligned to the normal of a guide BRep.</summary>
      <param name="plane">Initial plane.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="axis">Plane vector to be aligned to the normal.</param>
      <param name="guide">Guide BRep.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <param name="point">Evaluation point on the shape.</param>
      <param name="normal">Normal at the evaluation position.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers.AlignAxisNormalTo(Rhino.Geometry.Plane,HAL.Spatial.Axis,System.Boolean,Rhino.Geometry.Mesh,System.Boolean)">
      <summary>Creates a plane aligned to the normal of a guide mesh.</summary>
      <param name="plane">Initial plane.</param>
      <param name="axis">Plane vector to be aligned to the normal.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="shape">Guide mesh.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Spatial.TargetOrientationHelpers.AlignAxisNormalTo(Rhino.Geometry.Plane,HAL.Spatial.Axis,System.Boolean,Rhino.Geometry.Mesh,System.Boolean,Rhino.Geometry.MeshPoint@,Rhino.Geometry.Vector3d@)">
      <summary>Creates a plane aligned to the normal of a guide mesh.</summary>
      <param name="plane">Initial plane.</param>
      <param name="axis">Plane vector to be aligned to the normal.</param>
      <param name="flip">Whether the inverse direction of the axis should be used.</param>
      <param name="shape">Guide mesh.</param>
      <param name="project">If true, the direction vector will be projected on the initial plane.</param>
      <param name="point">Evaluation point on the shape.</param>
      <param name="normal">Normal at the evaluation position.</param>
      <returns>Oriented plane.</returns>
    </member>
    <member name="T:HAL.McNeel.RhinoCommon5.Utilities.DocumentationHelpers">
      <summary>Retrieves XML documentation from types and members.</summary>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Utilities.DocumentationHelpers.GetXmlDocumentation(System.Reflection.MemberInfo)">
      <summary>Retrieves the documentation of a specified member.</summary>
      <param name="member">Member to find in the documentation.</param>
      <returns>Content of the documentation for the member.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Utilities.DocumentationHelpers.GetXmlDocumentation(System.Reflection.MemberInfo,System.Xml.Linq.XDocument)">
      <summary>Retrieves the documentation of a specified member.</summary>
      <param name="member">Member to find in the documentation.</param>
      <param name="document">Documentation.</param>
      <returns>Content of the documentation for the member.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Utilities.DocumentationHelpers.GetXmlDocumentation(System.Reflection.ParameterInfo)">
      <summary>Retrieves the documentation of a specified parameter.</summary>
      <param name="parameter">Parameter or return value to find in the documentation.</param>
      <returns>Content of the documentation for the parameter.</returns>
    </member>
    <member name="M:HAL.McNeel.RhinoCommon5.Utilities.DocumentationHelpers.GetXmlDocumentation(System.Reflection.ParameterInfo,System.Xml.Linq.XDocument)">
      <summary>Retrieves the documentation of a specified parameter.</summary>
      <param name="parameter">Parameter or return value to find in the documentation.</param>
      <param name="document">Documentation.</param>
      <returns>Content of the documentation for the parameter.</returns>
    </member>
  </members>
</doc>