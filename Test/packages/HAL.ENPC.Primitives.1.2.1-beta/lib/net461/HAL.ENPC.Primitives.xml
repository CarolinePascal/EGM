<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.ENPC.Primitives</name>
  </assembly>
  <members>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_ControlSetup">
      <summary> 0 </summary>
    </member>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_ControlAction">
      <summary> 1 </summary>
    </member>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_Monitoring">
      <summary> 2 </summary>
    </member>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_Control">
      <summary> 3 </summary>
    </member>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_Analysis">
      <summary> 4 </summary>
    </member>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_Filtering">
      <summary> 5 </summary>
    </member>
    <member name="F:HAL.ENPC.FunctionSubcategory.Enpc_Display">
      <summary> 6 </summary>
    </member>
    <member name="M:HAL.ENPC.Control.Builder.ABB.EgmBuilder.JointControl(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Control task of the joints. </summary>
      <param name="joints">Command in degrees.</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.Builder.ABB.EgmBuilder.CartesianControl(HAL.ENPC.Sensoring.SensorData.Orientation)">
      <summary> Orientation control task. </summary>
      <param name="orientation">Command with position in mm.</param>
      <returns>Completed task.</returns>
    </member>
    <member name="T:HAL.ENPC.Control.Builder.GenericBuilder">
      <inheritdoc />
    </member>
    <member name="P:HAL.ENPC.Control.Builder.GenericBuilder.ControlType">
      <summary> Control type can be Joint or Cartesian, refer to <inheritdoc cref="T:HAL.ENPC.Messaging.IControlable" />'s message code (Joint, Orientation, Position or Rotation. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.Builder.GenericBuilder.JointControl(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Control task of the joints. </summary>
      <param name="command">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.Builder.GenericBuilder.CartesianControl(HAL.ENPC.Sensoring.SensorData.Orientation)">
      <summary> Orientation control task. </summary>
      <param name="orientation">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="T:HAL.ENPC.Control.OnlineController">
      <summary>Real time controller. Allow real time monitoring and real time control.</summary>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.CreateGeneric(HAL.ENPC.Control.OnlineController@,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},System.Collections.Generic.List{HAL.ENPC.Control.OnlineController},HAL.ENPC.Control.OnlineController@)">
      <summary>Create a generic on-line controller.</summary>
      <param name="instance">Existing instance to be modified.</param>
      <param name="alias">Controller alias.</param>
      <param name="mechanisms">Robot(s) being controlled.</param>
      <param name="procedure">Procedure(s) executed by the controller.</param>
      <param name="signal">Signal(s) mapped to the controller.</param>
      <param name="onlineController">On-line controller.</param>
      <param name="ipAdress">Controller's IP address.</param>
      <param name="clientPort">Client port.</param>
      <param name="receivePort">Receiver port.</param>
      <param name="subControllers">Sub controllers connected to this on-line controller.</param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.CreateEGM(HAL.ENPC.Control.OnlineController@,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.ENPC.Control.OnlineController},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},HAL.ENPC.Control.OnlineController@)">
      <summary>Create a ABB on-line controller with EGM protocol.</summary>
      <param name="instance">Existing instance to be modified.</param>
      <param name="alias">Controller alias.</param>
      <param name="mechanisms">Robot(s) being controlled.</param>
      <param name="procedure">Procedure(s) executed by the controller.</param>
      <param name="signal">Signal(s) mapped to the controller.</param>
      <param name="onlineController">On-line controller.</param>
      <param name="ipAdress">Controller's IP address.</param>
      <param name="clientPort">Client port.</param>
      <param name="receivePort">Receiver port.</param>
      <param name="subControllers">Sub controllers connected to this on-line controller.</param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.#ctor(HAL.Identifier,System.Collections.Generic.List{HAL.Communications.Protocol},HAL.ENPC.Messaging.Server.ISensorServer,HAL.ENPC.Control.Builder.GenericBuilder,HAL.Spatial.Body)">
      <summary> Create a RealTimeController and initialize managed collections. </summary>
      <param name="identity">
      </param>
      <param name="protocols">
      </param>
      <param name="server">
      </param>
      <param name="controlBuilder">
      </param>
      <param name="body">
      </param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.#ctor(HAL.Control.Controller,HAL.ENPC.Messaging.Server.ISensorServer,HAL.ENPC.Control.Builder.GenericBuilder)">
      <summary> Create a RealTimeController from a <inheritdoc cref="T:HAL.Control.Controller" />. </summary>
      <param name="clonee">
      </param>
      <param name="server">
      </param>
      <param name="controlBuilder">
      </param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.#ctor(HAL.ENPC.Control.OnlineController)">
      <summary> Clone a existing RealTimeControlle. </summary>
      <param name="clonee">
      </param>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.SubControllers">
      <summary> Sub real time controllers or sensors.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.ReceivedMessageQueue">
      <summary>Received message queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.CommandMessageQueue">
      <summary>Command message queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.CommandBufferQueue">
      <summary>Command message buffer queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.ReceiveBufferQueue">
      <summary>Received message buffer queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.IsControlRunning">
      <summary>Is control command loop activated?</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.IsMonitorRunning">
      <summary>Is monitoring loop activated?</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.IsSynchronized">
      <summary>Is synchronized command loop activated?</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.MechanismState">
      <summary>Mechanism state.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.ControlBuilder">
      <summary>Control builder.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.BufferMaximumMessageCount">
      <summary> Delay after a message in queue expire and is dequeued.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.OnlineController.Buffering">
      <summary>Activate buffering.</summary>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.Monitor(HAL.ENPC.Messaging.MessageCode[],System.Boolean,System.Boolean)">
      <summary> Monitoring of specified data types. </summary>
      <param name="persistent">Is monitoring callback should be persistent.</param>
      <param name="monitoredDataTypes">Data type's message code to monitor.</param>
      <param name="clear">True to clear previous listened types.</param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.RunSynchronizedControl(HAL.ENPC.Messaging.MessageCode,System.Boolean)">
      <summary> Run synchronized control loop. A send command message will be trigged if a message code is received. </summary>
      <param name="controlMessageCode">The message code that trigs the command sending.</param>
      <param name="overrideMonitoredMessage">
      </param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.SendCommandTo(HAL.ENPC.Control.OnlineController,HAL.ENPC.Messaging.IMessage,System.Boolean,HAL.ENPC.Messaging.Server.ResponseRequest,System.Boolean)">
      <summary>Send message command to a specific sensor.</summary>
      <param name="subController">
      </param>
      <param name="command">
      </param>
      <param name="confirmReceipt">
      </param>
      <param name="callback">
      </param>
      <param name="awaitResponse">
      </param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.ReceivedMessage">
      <summary>Task to deal with received message and associated steps (buffering, updating state and command sending).</summary>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.StopMonitor">
      <summary> Stop monitoring for all connected sub controllers. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.AddSubControllers(System.Collections.Generic.List{HAL.ENPC.Control.OnlineController})">
      <summary> Add real time controllers or sensors to this real time controller. </summary>
      <param name="controllers">Controllers to add.</param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.AddSubController(HAL.ENPC.Control.OnlineController)">
      <summary> Add a sub real time controller to this real time controller. This can be a sensor as well. </summary>
      <param name="controller">Controller to add.</param>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.RemoveSubController(HAL.ENPC.Control.OnlineController)">
      <summary> Remove a sub real time controller to this real time controller. This can be a sensor as well. </summary>
      <param name="controller">Controller to remove.</param>
      <remarks>This will terminate and remove the real time controller and sub classes contained by the removed controller.</remarks>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.ConnectAll">
      <summary> Connect all sub controllers and their sensors to this. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.DisconnectAll">
      <summary> Disconnect all sub controllers and their sensors to this. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.ConnectToController(HAL.ENPC.Control.OnlineController)">
      <summary> Connect a sensor and start listening to it : add messages to the Message Queue. </summary>
      <param name="controller">Real time controller to connect to this controller.</param>
      <remarks>
            This method must be override by extension method classes otherwise it will end up to a recursive call.
            This allow to go threw sub controllers that hold other real time controllers or sensors.
            </remarks>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.DisconnectFromController(HAL.ENPC.Control.OnlineController)">
      <summary> Disconnect a sensor and stop listening to it : stop adding messages to the Message Queue. </summary>
      <param name="controller">Real time controller to disconnect from this real time controller.</param>
      <remarks>
            This method must be override by extension method classes otherwise it will end up to a recursive call.
            This allow to go threw sub controllers that hold other real time controllers or sensors.
            </remarks>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.Initialize">
      <summary> Initialize all sub controllers. </summary>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.Run">
      <summary> Run all sub controllers. </summary>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.Terminate">
      <summary> Terminate all sub controllers. </summary>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.ClearAllQueues">
      <summary>CLear all queues from message. </summary>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.ClearQueue(System.Collections.Concurrent.BlockingCollection{HAL.ENPC.Messaging.IMessage})">
      <summary> Clear a queue from remaining messages. </summary>
      <param name="queue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Control.OnlineController.Dispose">
      <inheritdoc />
    </member>
    <member name="T:HAL.ENPC.Filtering.Filter`1">
      <summary> Filter class allows to filter ISensorData through time.</summary>
    </member>
    <member name="P:HAL.ENPC.Filtering.Filter`1.FilterBuffer">
      <summary> Filter buffer where data is enqueued and dequeued through time.</summary>
    </member>
    <member name="P:HAL.ENPC.Filtering.Filter`1.CurrentIndex">
      <summary> Current index of filter's buffer.  </summary>
    </member>
    <member name="M:HAL.ENPC.Filtering.Filter`1.FilterValue(`0)">
      <summary>This applies a filter to a data.</summary>
      <param name="sensordata">The data to filter.</param>
      <returns>Filtered data.</returns>
    </member>
    <member name="M:HAL.ENPC.Filtering.Filter`1.FilterMethod">
      <summary> This should be overridden by user. This allow to apply a filter to filter buffer's data.</summary>
      <returns>The filtered data.</returns>
    </member>
    <member name="T:HAL.ENPC.Messaging.IControlable">
      <summary>Message containing data used by controllers.</summary>
    </member>
    <member name="P:HAL.ENPC.Messaging.IControlable.ControlType">
      <summary>Represent the control type (in joint space or cartesian space).</summary>
    </member>
    <member name="T:HAL.ENPC.Messaging.ISensorData">
      <summary>Message containing data type used by sensors.</summary>
    </member>
    <member name="P:HAL.ENPC.Messaging.ISensorData.Values">
      <summary>Sensor data's raw values.</summary>
    </member>
    <member name="T:HAL.ENPC.Messaging.MessageCode">
      <summary>Defines the message header indices for the ENPC communication system.</summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.#ctor">
      <summary>
            Default contructor - Creates a new message builder to fill
            </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MakeHeader(System.Int32@)">
      <summary>
            Creates and fill the message header with 
             - The identifier of the message
             - The time stamp of the message
             - The type of the message
            </summary>
      <param name="seqNumber">Identifier of the last EGM message sent to the robot</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.CartesianBuilder(HAL.ENPC.Sensoring.SensorData.Translation)">
      <summary>
            Builds a translation command
            </summary>
      <param name="position">Translation vector as a Vector3D</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.QuaterionBuilder(HAL.ENPC.Sensoring.SensorData.Quaternion)">
      <summary>
            Builds a rotation command from a quaternion
            </summary>
      <param name="quaternion">Rotation quaternion as a Quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.EulerBuilder(HAL.ENPC.Sensoring.SensorData.EulerAngles)">
      <summary>
            Builds a rotation command from Euler angles
            </summary>
      <param name="angles">Rotation Euler angles as an EulerAngles</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.PoseBuilder(HAL.ENPC.Messaging.Server.ABB.EgmCartesian.Builder,HAL.ENPC.Messaging.Server.ABB.EgmQuaternion.Builder)">
      <summary> Builds a cartesian motion command from a translation command and a rotation command. </summary>
      <param name="cartesian">Translation command</param>
      <param name="quaternion">Rotation command from a quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.PoseBuilder(HAL.ENPC.Messaging.Server.ABB.EgmCartesian.Builder,HAL.ENPC.Messaging.Server.ABB.EgmEuler.Builder)">
      <summary> Builds a cartesian motion command from a transformation command and a rotation command. </summary>
      <param name="cartesian">Translation command</param>
      <param name="euler">Rotation command from Euler angles</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.JointsBuilder(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Builds a joints (internal or external) motion or speed command. </summary>
      <param name="joints">Motion joints values as a Joints</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.CartesianSpeedBuilder(HAL.ENPC.Sensoring.SensorData.CartesianSpeed)">
      <summary> Builds a cartesian speed reference command. </summary>
      <param name="speed">Cartesian speed command as a CartesianSpeed</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MovePose(HAL.ENPC.Sensoring.SensorData.Translation,HAL.ENPC.Sensoring.SensorData.Quaternion)">
      <summary> Fills the message with a cartesian motion command. </summary>
      <param name="position">Translation vector as a Vector3D</param>
      <param name="quaternion">Rotation quaternion as a Quaternion</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MovePose(HAL.ENPC.Sensoring.SensorData.Translation,HAL.ENPC.Sensoring.SensorData.EulerAngles)">
      <summary> Fills the message with a cartesian motion command. </summary>
      <param name="position">Translation vector as a Vector3D</param>
      <param name="angles">Rotation Euler angles as an EulerAngles</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MoveJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints motion command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MoveExternalJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints motion command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedCartesian(HAL.ENPC.Sensoring.SensorData.CartesianSpeed)">
      <summary>
            Fills the message with a cartesian speed command
            </summary>
      <param name="speed">Cartesian speed command as a CartesianSpeed</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints speed command
            </summary>
      <param name="joints">Speed joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedExtJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with an external joints speed command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.Build">
      <summary>
            Builds the message to send
            </summary>
      <returns>Message to send as a bytes array</returns>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.ABB.EgmServer">
      <summary> UDP Server class dedicated to ABB's EGM protocol. </summary>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.ABB.EgmServer.EgmIterator">
      <summary> EGM iterator for sending control message. </summary>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.ATI.ForceSensorServer">
      <summary> UDP Server class dedicated to ATI's Force sensor communication protocol.</summary>
      <remarks>
            1) Unplug the Ethernet cable from the LAN port on the computer
            2) Set the IPV4 IP Address on "192.168.1.100"
            3) Set the subnet mask on "255.255.255.0"
            4) Plug the Ethernet cable back again
            The sensor is now accessible on the following IP Address : "192.168.1.1"
            -&gt; This IP Address can be modified on the sensor interface, but only if the switch 9 of the Netbox is off
            </remarks>&gt;
        </member>
    <member name="T:HAL.ENPC.Messaging.Server.Generic.GenericServer">
      <summary> Sensor Generic UDP server class that extend the UdpServer class. This server can be paired with a single Sensor. </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.Generic.GenericServer.#ctor(System.String,System.Net.IPAddress,System.Int32,System.Int32,HAL.Alerts.AlertRegistry,System.Boolean,HAL.ENPC.Filtering.IFilter)">
      <inheritdoc />
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.Generic.GenericServer.Filter">
      <summary>Filter used by this server.</summary>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.Generic.GenericServer.PairedController">
      <summary> Paired controller to update with received message. </summary>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.Generic.GenericServer.IsFiltered">
      <summary> Is filter used. </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.Generic.GenericServer.Monitor(HAL.ENPC.Messaging.MessageCode,System.Boolean,System.Boolean)">
      <summary> Monitor a specified data type. </summary>
      <param name="typeToListen">Data type's message code corresponding.</param>
      <param name="persistent">Is Persistent.</param>
      <param name="clear">Clear previous callbacks. Should be on false if several callbacks have to be set.</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.Generic.GenericServer.UpdateSensor(HAL.ENPC.Messaging.IMessage)">
      <summary> Update paired sensor's received message queue.</summary>
      <param name="message">Update message.</param>
      <returns>Task completed.</returns>
      <remarks>Receive message queue can belong either to this paired sensor or to the real controller that old this sensors. <see cref="M:HAL.ENPC.Control.OnlineController.ConnectAll" /></remarks>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.ISensorServer">
      <summary>Qualifies a server that can be paired with a <see cref="!:Sensoring.Sensor" /></summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ISensorServer.UpdateSensor(HAL.ENPC.Messaging.IMessage)">
      <summary> Update paired sensor received message queue.
            Receive message queue can belong either to this paired sensor or to the real controller that old this sensors.
            See <see cref="M:HAL.ENPC.Control.OnlineController.ConnectAll" />.
            </summary>
      <param name="message">Update message.</param>
      <returns>Task completed.</returns>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.ResponseRequest.Persistent">
      <summary>Whether the response request should live on beyond its first execution</summary>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.UdpServer">
      <summary> Abstract class for UDP server with custom header and message types.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.CartesianSpeed.Speed">
      <summary>
            Cartesian speed values array
            </summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.CartesianSpeed.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            CartesianSpeed instance values constructor
            </summary>
      <param name="vx">Speed on the X axis in mm/s</param>
      <param name="vy">Speed on the Y axis in mm/s</param>
      <param name="vz">Speed on the Z axis in mm/s</param>
      <param name="vpsi">Speed according to the first Euler angle in degrees/mm</param>
      <param name="vtheta">Speed according to the second Euler angle in degrees/mm</param>
      <param name="vphi">Speed according to the third Euler angle in degrees/mm</param>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.EulerAngles.#ctor(System.Double,System.Double,System.Double)">
      <summary> EulerAngles instance constructor. </summary>
      <param name="psi">First Euler angle - Precession angle</param>
      <param name="theta">Second Euler angle - Nutation angle</param>
      <param name="phi">Third Euler angle - Intrinsic rotation angle</param>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Psi">
      <summary>
            First Euler Angle - Precession angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Theta">
      <summary>
            Second Euler angle - Nutation angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Phi">
      <summary>
            Third Euler angle - Intrinsic rotation angle
            </summary>
    </member>
    <member name="T:HAL.ENPC.Sensoring.SensorData.Joints">
      <summary> Joints class. Joint values are in degrees. </summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Joints.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary> Create a joints from six joint values. </summary>
      <param name="j1">
      </param>
      <param name="j2">
      </param>
      <param name="j3">
      </param>
      <param name="j4">
      </param>
      <param name="j5">
      </param>
      <param name="j6">
      </param>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Joints.Values">
      <summary> Create a joints from an array of six joint value. </summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Joints.Min">
      <summary> Returns the index of the minimum value joint. </summary>
      <returns> The index</returns>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Joints.Max">
      <summary> Returns the index of the minimum value joint. </summary>
      <returns> The index</returns>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Values">
      <summary>Quaternion components, in the Real, X, Y, Z order.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Real">
      <summary>Real (W) part of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.X">
      <summary>Imaginary X part (coefficient of complex I) of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Y">
      <summary>Imaginary Y part (coefficient of complex J) of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Z">
      <summary>Imaginary Z part (coefficient of complex K) of the quaternion.</summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Torsor.#ctor(System.Double[])">
      <summary>Creates a torsor from an array of six components, based on physical units.</summary>
      <param name="values">Values.</param>
    </member>
    <member name="F:HAL.ENPC.Sensoring.SensorData.Torsor.Default">
      <summary>0-filled torsor.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Torsor.TX">
      <summary>First component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Torsor.TY">
      <summary>Second component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Torsor.TZ">
      <summary>Third component of this vector.</summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Translation.#ctor(System.Double[])">
      <summary>Creates a 3D vector from an array of three components, based on physical units.</summary>
      <param name="values">Values.</param>
    </member>
    <member name="F:HAL.ENPC.Sensoring.SensorData.Translation.Default">
      <summary>0-filled 3D vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Translation.X">
      <summary>First component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Translation.Y">
      <summary>Second component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Translation.Z">
      <summary>Third component of this vector.</summary>
    </member>
  </members>
</doc>