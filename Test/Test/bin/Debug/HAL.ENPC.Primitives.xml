<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.ENPC.Primitives</name>
  </assembly>
  <members>
    <member name="M:HAL.ENPC.Control.ABB.Egm.JointControl(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Control task of the joints. </summary>
      <param name="joints">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.ABB.Egm.CartesianControl(HAL.ENPC.Sensoring.SensorData.Orientation)">
      <summary> Orientation control task. </summary>
      <param name="orientation">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="T:HAL.ENPC.Control.ControlStrategy">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Control.ControlStrategy.JointControl(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Control task of the joints. </summary>
      <param name="joints">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.ControlStrategy.CartesianControl(HAL.ENPC.Sensoring.SensorData.Orientation)">
      <summary> Orientation control task. </summary>
      <param name="orientation">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.Create(HAL.ENPC.Control.RealTimeController@,System.String,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},System.Collections.Generic.List{HAL.ENPC.Control.RealTimeController},HAL.ENPC.Control.ControlStrategy,HAL.ENPC.Control.RealTimeController@)">
      <summary>Create a sensor  server for communication and sensor synchronization.</summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.Create(HAL.ENPC.Control.RealTimeController@,System.String,System.Collections.Generic.List{HAL.ENPC.Control.RealTimeController},HAL.ENPC.Control.ControlStrategy,HAL.ENPC.Control.RealTimeController@)">
      <summary>Create a sensor  server for communication and sensor synchronization.</summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.Run(HAL.ENPC.Control.RealTimeController,System.Boolean)">
      <summary>Run sensor controller all communications. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.AddSubController(HAL.ENPC.Control.RealTimeController)">
      <summary> Add a sub real time controller to this real time controller. This can be a sensor as well. </summary>
      <param name="controller">Controller to add.</param>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.RemoveSubController(HAL.ENPC.Control.RealTimeController)">
      <summary> Remove a sub real time controller to this real time controller. This can be a sensor as well. </summary>
      <param name="controller">Controller to remove.</param>
      <remarks>This will terminate and remove the real time controller and sub classes contained by the removed controller.</remarks>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.ConnectSensor(HAL.ENPC.Control.RealTimeController)">
      <summary> Connect a sensor and start listening to it : add messages to the Message Queue. </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.DisconnectSensor(HAL.ENPC.Control.RealTimeController)">
      <summary> Disconnect a sensor and stop listening to it : stop adding messages to the Message Queue. </summary>
      <param name="controller">
      </param>
    </member>
    <member name="T:HAL.ENPC.Messaging.MessageCode">
      <summary>Defines the message header indices for the ENPC communication system.</summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.#ctor">
      <summary>
            Default contructor - Creates a new message builder to fill
            </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MakeHeader(System.Int32@)">
      <summary>
            Creates and fill the message header with 
             - The identifier of the message
             - The time stamp of the mesage
             - The type of the message
            </summary>
      <param name="seqNumber">Identifier of the last EGM message sent to the robot</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.CartesianBuilder(HAL.ENPC.Sensoring.SensorData.Translation)">
      <summary>
            Builds a translation command
            </summary>
      <param name="vector">Translation vector as a Vector3D</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.QuaterionBuilder(HAL.ENPC.Sensoring.SensorData.Quaternion)">
      <summary>
            Builds a rotation command from a quaternion
            </summary>
      <param name="quaternion">Rotation quaternion as a Quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.EulerBuilder(HAL.ENPC.Sensoring.SensorData.EulerAngles)">
      <summary>
            Builds a rotation command from Euler angles
            </summary>
      <param name="angles">Rotation Euler angles as an EulerAngles</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.PoseBuilder(HAL.ENPC.Messaging.Server.ABB.EgmCartesian.Builder,HAL.ENPC.Messaging.Server.ABB.EgmQuaternion.Builder)">
      <summary>
            Builds a cartesian motion command from a translation command and a rotation command
            </summary>
      <param name="cartesian">Trasnlation command</param>
      <param name="quaternion">Rotation command from a quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.PoseBuilder(HAL.ENPC.Messaging.Server.ABB.EgmCartesian.Builder,HAL.ENPC.Messaging.Server.ABB.EgmEuler.Builder)">
      <summary>
            Builds a cartesian motion command from a transmation command and a rotation command
            </summary>
      <param name="cartesian">Translation command</param>
      <param name="euler">Rotation command from Euler angles</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.JointsBuilder(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Builds a joints (internal or external) motion or speed command 
            </summary>
      <param name="rotations">Motion joints values as a Joints</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.CartesianSpeedBuilder(HAL.ENPC.Sensoring.SensorData.CartesianSpeed)">
      <summary>
            Builds a cartesian speed reference command 
            </summary>
      <param name="speeds">Cartesian speed command as a CartesianSpeed</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MovePose(HAL.ENPC.Sensoring.SensorData.Translation,HAL.ENPC.Sensoring.SensorData.Quaternion)">
      <summary>
            Fills the message with a cartesian motion command
            </summary>
      <param name="vector">Translation vector as a Vector3D</param>
      <param name="quaternion">Rotation quaternion as a Quaternion</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MovePose(HAL.ENPC.Sensoring.SensorData.Translation,HAL.ENPC.Sensoring.SensorData.EulerAngles)">
      <summary>
            Fills the message with a cartesian motion command
            </summary>
      <param name="vector">Translation vector as a Vector3D</param>
      <param name="angles">Rotation Euler angles as an EulerAngles</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MoveJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints motion command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MoveExternalJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints motion command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedCartesian(HAL.ENPC.Sensoring.SensorData.CartesianSpeed)">
      <summary>
            Fills the message with a cartesian speed command
            </summary>
      <param name="speed">Cartesian speed command as a CartesianSpeed</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints speed command
            </summary>
      <param name="joints">Speed joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedExtJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with an external joints speed command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.Build">
      <summary>
            Builds the message to send
            </summary>
      <returns>Message to send as a bytes array</returns>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.ABB.EgmServer.EgmIterator">
      <summary> EGM iterator for sending control message. </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.JointMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the joints' values from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.TcpRotationMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the flange rotation from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.TcpPositionMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the flange position from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.TcpOrientationMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the flange orientation from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ISensorServer.UpdateSensor(HAL.ENPC.Messaging.IMessage)">
      <summary> Update paired sensor received message queue.
            Receive message queue can belong either to this paired sensor or to the real controller that old this sensors.
            <see cref="M:HAL.ENPC.Control.RealTimeController.ConnectAll" /></summary>
      <param name="message">Update message.</param>
      <returns>Task completed.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.ResponseRequest.Persistent">
      <summary>Whether the response request should live on beyond its first execution</summary>
    </member>
    <member name="T:HAL.ENPC.Sensoring.ISensor">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.ConnectSensor(HAL.ENPC.Control.RealTimeController)">
      <summary> Connect a sensor and start listening to it : add messages to the Message Queue. </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.DisconnectSensor(HAL.ENPC.Control.RealTimeController)">
      <summary> Disconnect a sensor and stop listening to it : stop adding messages to the Message Queue. </summary>
      <param name="controller">
      </param>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.CartesianSpeed.Speed">
      <summary>
            Cartesian speed values array
            </summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.CartesianSpeed.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            CartesianSpeed instance values constructor
            </summary>
      <param name="vx">Speed on the X axis in mm/s</param>
      <param name="vy">Speed on the Y axis in mm/s</param>
      <param name="vz">Speed on the Z axis in mm/s</param>
      <param name="vpsi">Speed according to the first Euler angle in degrees/mm</param>
      <param name="vtheta">Speed according to the second Euler angle in degrees/mm</param>
      <param name="vphi">Speed according to the third Euler angle in degrees/mm</param>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.EulerAngles.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            EulerAngles instance constructor
            </summary>
      <param name="psi">First Euler angle - Precession angle</param>
      <param name="theta">Second Euler angle - Nutation angle</param>
      <param name="phi">Third Euler angle - Intrinsic rotation angle</param>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Psi">
      <summary>
            First Euler Angle - Precession angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Theta">
      <summary>
            Second Euler angle - Nutation angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Phi">
      <summary>
            Third Euler angle - Intrinsic rotation angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Values">
      <summary>Quaternion components, in the Real, X, Y, Z order.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Real">
      <summary>Real (W) part of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.X">
      <summary>Imaginary X part (coefficient of complex I) of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Y">
      <summary>Imaginary Y part (coefficient of complex J) of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Z">
      <summary>Imaginary Z part (coefficient of complex K) of the quaternion.</summary>
    </member>
  </members>
</doc>