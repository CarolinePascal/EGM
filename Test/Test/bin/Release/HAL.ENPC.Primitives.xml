<?xml version="1.0"?>
<doc>
  <assembly>
    <name>HAL.ENPC.Primitives</name>
  </assembly>
  <members>
    <member name="M:HAL.ENPC.Control.ABB.Egm.JointControl(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Control task of the joints. </summary>
      <param name="joints">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.ABB.Egm.CartesianControl(HAL.ENPC.Sensoring.SensorData.Orientation)">
      <summary> Orientation control task. </summary>
      <param name="orientation">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="T:HAL.ENPC.Control.ControlBuilder">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Control.ControlBuilder.JointControl(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary> Control task of the joints. </summary>
      <param name="joints">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="M:HAL.ENPC.Control.ControlBuilder.CartesianControl(HAL.ENPC.Sensoring.SensorData.Orientation)">
      <summary> Orientation control task. </summary>
      <param name="orientation">Command</param>
      <returns>Completed task.</returns>
    </member>
    <member name="F:HAL.ENPC.Control.ControlableType.Joint">
      <summary> Control in joint space.</summary>
    </member>
    <member name="F:HAL.ENPC.Control.ControlableType.Cartesian">
      <summary> Control in cartesian space.</summary>
    </member>
    <member name="F:HAL.ENPC.Control.ControlableType.Position">
      <summary> Control in position with fixed rotation.</summary>
    </member>
    <member name="F:HAL.ENPC.Control.ControlableType.Rotation">
      <summary> Control in rotation with fixed position.</summary>
    </member>
    <member name="F:HAL.ENPC.Control.ControlableType.ActionSet">
      <summary> Control in action set. </summary>
    </member>
    <member name="T:HAL.ENPC.Control.RealTimeController">
      <summary>Real time controller. Allow real time monitoring and real time control.</summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.Create(HAL.ENPC.Control.RealTimeController@,System.String,System.Collections.Generic.List{HAL.Control.IControllableObject},System.Collections.Generic.List{HAL.Procedures.Procedure},System.Collections.Generic.List{HAL.Communications.ElectricSignal},System.Collections.Generic.List{HAL.ENPC.Control.RealTimeController},HAL.ENPC.Control.ControlBuilder,HAL.ENPC.Control.RealTimeController@)">
      <summary>Create a real time controller.</summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.Create(HAL.ENPC.Control.RealTimeController@,System.String,System.Collections.Generic.List{HAL.ENPC.Control.RealTimeController},HAL.ENPC.Control.ControlBuilder,HAL.ENPC.Control.RealTimeController@)">
      <summary>Create a real time controller.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.SubControllers">
      <summary> Sub real time controllers or sensors.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.ReceivedMessageQueue">
      <summary>Received message queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.CommandMessageQueue">
      <summary>Command message queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.CommandBufferQueue">
      <summary>Command message buffer queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.ReceiveBufferQueue">
      <summary>Received message buffer queue.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.ControlStrategy">
      <summary>Control strategy.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.IsControlRunning">
      <summary>Is control command loop activated?</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.IsMonitorRunning">
      <summary>Is monitoring loop activated?</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.IsSynchronized">
      <summary>Is synchronized command loop activated?</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.Buffering">
      <summary>Activate buffering.</summary>
    </member>
    <member name="P:HAL.ENPC.Control.RealTimeController.BufferMaximumMessageCount">
      <summary> Delay after a message in queue expire and is dequeued.  </summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.Monitor(HAL.ENPC.Messaging.MessageCode[],System.Boolean,System.Boolean)">
      <summary> Monitoring of specified data types. </summary>
      <param name="persistent">Is monitoring callback should be persistent.</param>
      <param name="monitoredDataTypes">Data type's message code to monitor.</param>
      <param name="overrideMonitoredMessage">True to clear previous listened types.</param>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.RunSynchronizedControl(HAL.ENPC.Sensoring.Sensor,HAL.ENPC.Messaging.MessageCode,System.Boolean)">
      <summary> Run synchronized control loop. A send command message will be trigged if a message code is received. </summary>
      <param name="sensor">The sensor synchronized with.</param>
      <param name="synchronizationMessageCode">The message code that trigs the command sending.</param>
      <param name="overrideMonitoredMessage">
      </param>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.StopMonitor">
      <summary>
      </summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.StopSynchronizedControl(HAL.ENPC.Sensoring.Sensor,HAL.ENPC.Messaging.MessageCode)">
      <summary>
      </summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.AddSubControllers(System.Collections.Generic.List{HAL.ENPC.Control.RealTimeController})">
      <summary> Add real time controllers or sensors to this real time controller. </summary>
      <param name="controllers">Controllers to add.</param>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.AddSubController(HAL.ENPC.Control.RealTimeController)">
      <summary> Add a sub real time controller to this real time controller. This can be a sensor as well. </summary>
      <param name="controller">Controller to add.</param>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.RemoveSubController(HAL.ENPC.Control.RealTimeController)">
      <summary> Remove a sub real time controller to this real time controller. This can be a sensor as well. </summary>
      <param name="controller">Controller to remove.</param>
      <remarks>This will terminate and remove the real time controller and sub classes contained by the removed controller.</remarks>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.ConnectAll">
      <summary> Connect all sub controllers and their sensors to this. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.DisconnectAll">
      <summary> Disconnect all sub controllers and their sensors to this. </summary>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.ConnectToController(HAL.ENPC.Control.RealTimeController)">
      <summary> Connect a sensor and start listening to it : add messages to the Message Queue. </summary>
      <param name="controller">Real time controller to connect to this controller.</param>
      <remarks>
            This method must be override by extension method classes otherwise it will end up to a recursive call.
            This allow to go threw sub controllers that hold other real time controllers or sensors.
            </remarks>
    </member>
    <member name="M:HAL.ENPC.Control.RealTimeController.DisconnectFromController(HAL.ENPC.Control.RealTimeController)">
      <summary> Disconnect a sensor and stop listening to it : stop adding messages to the Message Queue. </summary>
      <param name="controller">Real time controller to disconnect from this real time controller.</param>
      <remarks>
            This method must be override by extension method classes otherwise it will end up to a recursive call.
            This allow to go threw sub controllers that hold other real time controllers or sensors.
            </remarks>
    </member>
    <member name="T:HAL.ENPC.Messaging.MessageCode">
      <summary>Defines the message header indices for the ENPC communication system.</summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.#ctor">
      <summary>
            Default contructor - Creates a new message builder to fill
            </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MakeHeader(System.Int32@)">
      <summary>
            Creates and fill the message header with 
             - The identifier of the message
             - The time stamp of the mesage
             - The type of the message
            </summary>
      <param name="seqNumber">Identifier of the last EGM message sent to the robot</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.CartesianBuilder(HAL.ENPC.Sensoring.SensorData.Translation)">
      <summary>
            Builds a translation command
            </summary>
      <param name="position">Translation vector as a Vector3D</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.QuaterionBuilder(HAL.ENPC.Sensoring.SensorData.Quaternion)">
      <summary>
            Builds a rotation command from a quaternion
            </summary>
      <param name="quaternion">Rotation quaternion as a Quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.EulerBuilder(HAL.ENPC.Sensoring.SensorData.EulerAngles)">
      <summary>
            Builds a rotation command from Euler angles
            </summary>
      <param name="angles">Rotation Euler angles as an EulerAngles</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.PoseBuilder(HAL.ENPC.Messaging.Server.ABB.EgmCartesian.Builder,HAL.ENPC.Messaging.Server.ABB.EgmQuaternion.Builder)">
      <summary>
            Builds a cartesian motion command from a translation command and a rotation command
            </summary>
      <param name="cartesian">Trasnlation command</param>
      <param name="quaternion">Rotation command from a quaternion</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.PoseBuilder(HAL.ENPC.Messaging.Server.ABB.EgmCartesian.Builder,HAL.ENPC.Messaging.Server.ABB.EgmEuler.Builder)">
      <summary>
            Builds a cartesian motion command from a transmation command and a rotation command
            </summary>
      <param name="cartesian">Translation command</param>
      <param name="euler">Rotation command from Euler angles</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.JointsBuilder(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Builds a joints (internal or external) motion or speed command 
            </summary>
      <param name="rotations">Motion joints values as a Joints</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.CartesianSpeedBuilder(HAL.ENPC.Sensoring.SensorData.CartesianSpeed)">
      <summary>
            Builds a cartesian speed reference command 
            </summary>
      <param name="speed">Cartesian speed command as a CartesianSpeed</param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MovePose(HAL.ENPC.Sensoring.SensorData.Translation,HAL.ENPC.Sensoring.SensorData.Quaternion)">
      <summary>
            Fills the message with a cartesian motion command
            </summary>
      <param name="position">Translation vector as a Vector3D</param>
      <param name="quaternion">Rotation quaternion as a Quaternion</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MovePose(HAL.ENPC.Sensoring.SensorData.Translation,HAL.ENPC.Sensoring.SensorData.EulerAngles)">
      <summary>
            Fills the message with a cartesian motion command
            </summary>
      <param name="position">Translation vector as a Vector3D</param>
      <param name="angles">Rotation Euler angles as an EulerAngles</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MoveJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints motion command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.MoveExternalJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints motion command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedCartesian(HAL.ENPC.Sensoring.SensorData.CartesianSpeed)">
      <summary>
            Fills the message with a cartesian speed command
            </summary>
      <param name="speed">Cartesian speed command as a CartesianSpeed</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with a joints speed command
            </summary>
      <param name="joints">Speed joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.SpeedExtJoints(HAL.ENPC.Sensoring.SensorData.Joints)">
      <summary>
            Fills the message with an external joints speed command
            </summary>
      <param name="joints">Motion joints values as a Joints</param>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmMessageBuilder.Build">
      <summary>
            Builds the message to send
            </summary>
      <returns>Message to send as a bytes array</returns>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.ABB.EgmServer">
      <summary> UDP Server class dedicated to ABB's EGM protocol. </summary>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.ABB.EgmServer.EgmIterator">
      <summary> EGM iterator for sending control message. </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.JointMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the joints' values from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.TcpRotationMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the flange rotation from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.TcpPositionMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the flange position from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ABB.EgmServer.TcpOrientationMonitoring(HAL.ENPC.Messaging.IMessage)">
      <summary> Update the sensor data only with the flange orientation from EGM feedback.  </summary>
      <param name="message">The message containing feedback data. </param>
      <returns>
      </returns>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.ATI.ForceSensorServer">
      <summary> UDP Server class dedicated to ATI's Force sensor communication protocol.</summary>
      <remarks>
            1) Unplug the Ethernet cable from the LAN port on the computer
            2) Set the IPV4 IP Address on "192.168.1.100"
            3) Set the subnet mask on "255.255.255.0"
            4) Plug the Ethernet cable back again
            The sensor is now accessible on the following IP Address : "192.168.1.1"
            -&gt; This IP Address can be modified on the sensor interface, but only if the switch 9 of the Netbox is off
            </remarks>&gt;
        </member>
    <member name="T:HAL.ENPC.Messaging.Server.Generic.GenericServer">
      <summary> Sensor Generic UDP server class that extend the UdpServer class. This server can be paired with a single Sensor. </summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.Generic.GenericServer.#ctor(System.String,System.Net.IPAddress,System.Int32,System.Int32,HAL.Alerts.AlertRegistry,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.Generic.GenericServer.UpdateSensor(HAL.ENPC.Messaging.IMessage)">
      <summary> Update paired sensor received message queue.</summary>
      <param name="message">Update message.</param>
      <returns>Task completed.</returns>
      <remarks>Receive message queue can belong either to this paired sensor or to the real controller that old this sensors. <see cref="M:HAL.ENPC.Control.RealTimeController.ConnectAll" /></remarks>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.ISensorServer">
      <summary>Qualifies a server that can be paired with a <see cref="T:HAL.ENPC.Sensoring.Sensor" /></summary>
    </member>
    <member name="M:HAL.ENPC.Messaging.Server.ISensorServer.UpdateSensor(HAL.ENPC.Messaging.IMessage)">
      <summary> Update paired sensor received message queue.
            Receive message queue can belong either to this paired sensor or to the real controller that old this sensors.
            See <see cref="M:HAL.ENPC.Control.RealTimeController.ConnectAll" />.
            </summary>
      <param name="message">Update message.</param>
      <returns>Task completed.</returns>
    </member>
    <member name="P:HAL.ENPC.Messaging.Server.ResponseRequest.Persistent">
      <summary>Whether the response request should live on beyond its first execution</summary>
    </member>
    <member name="T:HAL.ENPC.Messaging.Server.UdpServer">
      <summary> Abstract class for UDP server with custom header and message types.</summary>
    </member>
    <member name="T:HAL.ENPC.Sensoring.Sensor">
      <summary>
            Real time sensor controller.
            This is an extension that hold a server to connect to a physical or virtual sensor or controller in real time.
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.Sensor.SensorServer">
      <summary> Server used to communicate to a virtual or physical device. </summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.ConnectToController(HAL.ENPC.Control.RealTimeController)">
      <summary> Connect a sensor to a real time controller message queue.</summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.DisconnectFromController(HAL.ENPC.Control.RealTimeController)">
      <summary> Disconnect a sensor and stop listening to it : stop adding messages to the Message Queue. </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.Initialize">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.Run">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.Terminate">
      <summary> Terminate sensor server process and all base processes. </summary>
      <returns>
      </returns>
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.Monitor(HAL.ENPC.Messaging.MessageCode[],System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.StopMonitor">
      <inheritdoc />
    </member>
    <member name="M:HAL.ENPC.Sensoring.Sensor.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.CartesianSpeed.Speed">
      <summary>
            Cartesian speed values array
            </summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.CartesianSpeed.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            CartesianSpeed instance values constructor
            </summary>
      <param name="vx">Speed on the X axis in mm/s</param>
      <param name="vy">Speed on the Y axis in mm/s</param>
      <param name="vz">Speed on the Z axis in mm/s</param>
      <param name="vpsi">Speed according to the first Euler angle in degrees/mm</param>
      <param name="vtheta">Speed according to the second Euler angle in degrees/mm</param>
      <param name="vphi">Speed according to the third Euler angle in degrees/mm</param>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.EulerAngles.#ctor(System.Double,System.Double,System.Double)">
      <summary> EulerAngles instance constructor. </summary>
      <param name="psi">First Euler angle - Precession angle</param>
      <param name="theta">Second Euler angle - Nutation angle</param>
      <param name="phi">Third Euler angle - Intrinsic rotation angle</param>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Psi">
      <summary>
            First Euler Angle - Precession angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Theta">
      <summary>
            Second Euler angle - Nutation angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.EulerAngles.Phi">
      <summary>
            Third Euler angle - Intrinsic rotation angle
            </summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Values">
      <summary>Quaternion components, in the Real, X, Y, Z order.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Real">
      <summary>Real (W) part of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.X">
      <summary>Imaginary X part (coefficient of complex I) of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Y">
      <summary>Imaginary Y part (coefficient of complex J) of the quaternion.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Quaternion.Z">
      <summary>Imaginary Z part (coefficient of complex K) of the quaternion.</summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Torsor.#ctor(System.Double[])">
      <summary>Creates a torsor from an array of six components, based on physical units.</summary>
      <param name="values">Values.</param>
    </member>
    <member name="F:HAL.ENPC.Sensoring.SensorData.Torsor.Default">
      <summary>0-filled 3D vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Torsor.X">
      <summary>First component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Torsor.Y">
      <summary>Second component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Torsor.Z">
      <summary>Third component of this vector.</summary>
    </member>
    <member name="M:HAL.ENPC.Sensoring.SensorData.Translation.#ctor(System.Double[])">
      <summary>Creates a 3D vector from an array of three components, based on physical units.</summary>
      <param name="values">Values.</param>
    </member>
    <member name="F:HAL.ENPC.Sensoring.SensorData.Translation.Default">
      <summary>0-filled 3D vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Translation.X">
      <summary>First component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Translation.Y">
      <summary>Second component of this vector.</summary>
    </member>
    <member name="P:HAL.ENPC.Sensoring.SensorData.Translation.Z">
      <summary>Third component of this vector.</summary>
    </member>
  </members>
</doc>